{"version":3,"sources":["ToggleList.tsx","index.tsx"],"names":["styles","card","marginTop","border","borderRadius","padding","cursor","borderColor","fontFamily","display","highlightCard","cardHeaderIcon","marginRight","height","cardHeaderId","color","minWidth","textTransform","cardHeaderContent","width","whiteSpace","overflow","textOverflow","cardContent","backgroundColor","truncate","ToggleList","state","clickCard","id","visibleItem","setState","undefined","getIcon","name","icon","faSpinner","spin","style","faCheckCircle","faExclamationTriangle","faHourglassHalf","render","list","props","args","items","item","Object","assign","push","key","onClick","dangerouslySetInnerHTML","__html","value","paddingBottom","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"wRAaIA,EAAS,CACXC,KAAM,CACJC,UAAW,EACXC,OAAQ,cACRC,aAAc,EACdC,QAAS,GACTC,OAAQ,UACRC,YAAa,sBACbC,WAAY,6CACZC,QAAS,QAEXC,cAAe,CACbH,YAAa,WAEfI,eAAgB,CACdC,YAAa,GACbC,OAAQ,IAEVC,aAAc,CACZF,YAAa,GACbG,MAAO,sBACPC,SAAU,GACVP,QAAS,eACTQ,cAAe,aAEjBC,kBAAmB,CACjBT,QAAS,eACTM,MAAO,sBACPI,MAAO,OACPC,WAAY,SACZC,SAAU,SACVC,aAAc,YAEhBC,YAAa,CACXrB,UAAW,EACXE,aAAc,EACdC,QAAS,GACTmB,gBAAiB,kBACjBT,MAAO,WAETU,SAAU,CACRN,MAAO,OACPC,WAAY,SACZC,SAAU,SACVC,aAAc,aAIZI,E,4MACGC,MAAe,G,EAEfC,UAAY,SAACC,GAClB,OAAO,WACD,EAAKF,MAAMG,cAAgBD,EAC7B,EAAKE,SAAS,CAACD,iBAAaE,IAE5B,EAAKD,SAAS,CAACD,YAAaD,M,EAK3BI,QAAU,SAACC,GAChB,OAAQA,GACN,IAAK,UACH,OAAO,kBAAC,IAAD,CAAiBC,KAAMC,IAAWC,MAAM,EAAMtB,MAAO,UAAWuB,MAAOtC,EAAOW,iBACvF,IAAK,eACH,OAAO,kBAAC,IAAD,CAAiBwB,KAAMI,IAAexB,MAAO,UAAWuB,MAAOtC,EAAOW,iBAC/E,IAAK,wBACH,OAAO,kBAAC,IAAD,CAAiBwB,KAAMK,IAAuBzB,MAAO,UAAWuB,MAAOtC,EAAOW,iBACvF,IAAK,YACH,OAAO,kBAAC,IAAD,CAAiBwB,KAAMM,IAAiB1B,MAAO,UAAWuB,MAAOtC,EAAOW,iBACjF,QACE,S,EAIC+B,OAAS,WACd,IAD+B,EACzBC,EAAO,EAAKC,MAAMC,KAAKF,KACvBG,EAAQ,GAFiB,cAIdH,GAJc,IAI/B,2BAAuB,CAAC,IAAfI,EAAc,QACjBT,EAAK,eAAOtC,EAAOC,MACnB,EAAK0B,MAAMG,cAAgBiB,EAAKlB,IAClCmB,OAAOC,OAAOX,EAAOtC,EAAOU,eAG9BoC,EAAMI,KACJ,yBAAKC,IAAKJ,EAAKlB,GAAIS,MAAOA,EACrBc,QAAS,EAAKxB,UAAUmB,EAAKlB,KAC/B,EAAKI,QAAQc,EAAKZ,MACnB,0BAAMG,MAAOtC,EAAOc,cAAeiC,EAAKlB,IACxC,0BAAMS,MAAOtC,EAAOkB,mBAAoB6B,EAAKb,QAI7C,EAAKP,MAAMG,cAAgBiB,EAAKlB,IAClCiB,EAAMI,KACJ,yBAAKC,IAAK,UAAWb,MAAOtC,EAAOuB,YAC9B8B,wBAAyB,CAACC,OAAQP,EAAKQ,WAtBnB,8BA4B/B,OAAO,yBAAKjB,MAAO,CAACkB,cAAe,IAChCV,I,YAzDkBW,KAuEVC,cAAwBhC,GChIvCiC,IAASjB,OACP,kBAAC,IAAMkB,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.f63112e9.chunk.js","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\";\nimport React, {ReactNode} from \"react\";\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\nimport {faSpinner, faCheckCircle, faExclamationTriangle, faHourglassHalf} from '@fortawesome/free-solid-svg-icons'\n\ninterface State {\n  visibleItem?: string;\n}\n\nlet styles = {\n  card: {\n    marginTop: 4,\n    border: \"1.5px solid\",\n    borderRadius: 4,\n    padding: 12,\n    cursor: 'pointer',\n    borderColor: \"rgba(0, 0, 0, 0.12)\",\n    fontFamily: \"\\\"Roboto\\\", \\\"Helvetica\\\", \\\"Arial\\\", sans-serif\",\n    display: \"flex\" as \"flex\",\n  },\n  highlightCard: {\n    borderColor: \"#2196f3\"\n  },\n  cardHeaderIcon: {\n    marginRight: 12,\n    height: 24,\n  },\n  cardHeaderId: {\n    marginRight: 12,\n    color: 'rgba(0, 0, 0, 0.54)',\n    minWidth: 20,\n    display: 'inline-block',\n    textTransform: \"uppercase\" as \"uppercase\"\n  },\n  cardHeaderContent: {\n    display: \"inline-block\",\n    color: 'rgba(0, 0, 0, 0.54)',\n    width: '100%',\n    whiteSpace: \"nowrap\" as \"nowrap\",\n    overflow: \"hidden\" as \"hidden\",\n    textOverflow: \"ellipsis\" as \"ellipsis\",\n  },\n  cardContent: {\n    marginTop: 4,\n    borderRadius: 4,\n    padding: 12,\n    backgroundColor: 'rgb(14, 17, 23)',\n    color: '#00f900'\n  },\n  truncate: {\n    width: '100%',\n    whiteSpace: \"nowrap\" as \"nowrap\",\n    overflow: \"hidden\" as \"hidden\",\n    textOverflow: \"ellipsis\" as \"ellipsis\",\n  },\n}\n\nclass ToggleList extends StreamlitComponentBase<State> {\n  public state: State = {};\n\n  public clickCard = (id: string) => {\n    return () => {\n      if (this.state.visibleItem === id) {\n        this.setState({visibleItem: undefined});\n      } else {\n        this.setState({visibleItem: id});\n      }\n    }\n  }\n\n  public getIcon = (name: string) => {\n    switch (name) {\n      case \"spinner\":\n        return <FontAwesomeIcon icon={faSpinner} spin={true} color={\"#2196f3\"} style={styles.cardHeaderIcon}/>\n      case \"circle-check\":\n        return <FontAwesomeIcon icon={faCheckCircle} color={\"#4caf50\"} style={styles.cardHeaderIcon}/>\n      case \"triangle-exclaimation\":\n        return <FontAwesomeIcon icon={faExclamationTriangle} color={\"#ab003c\"} style={styles.cardHeaderIcon}/>\n      case \"hourglass\":\n        return <FontAwesomeIcon icon={faHourglassHalf} color={\"#2196f3\"} style={styles.cardHeaderIcon}/>\n      default:\n        return undefined;\n    }\n  }\n\n  public render = (): ReactNode => {\n    const list = this.props.args.list;\n    const items = [];\n\n    for (let item of list) {\n      let style = {...styles.card};\n      if (this.state.visibleItem === item.id) {\n        Object.assign(style, styles.highlightCard);\n      }\n\n      items.push(\n        <div key={item.id} style={style}\n             onClick={this.clickCard(item.id)}>\n          {this.getIcon(item.icon)}\n          <span style={styles.cardHeaderId}>{item.id}</span>\n          <span style={styles.cardHeaderContent}>{item.name}</span>\n        </div>\n      );\n\n      if (this.state.visibleItem === item.id) {\n        items.push(\n          <div key={\"content\"} style={styles.cardContent}\n               dangerouslySetInnerHTML={{__html: item.value}}>\n          </div>\n        )\n      }\n    }\n\n    return <div style={{paddingBottom: 4}}>\n      {items}\n    </div>;\n  }\n\n  //   this.setState(\n  //     prevState => ({ numClicks: prevState.numClicks + 1 }),\n  //     () => Streamlit.setComponentValue(this.state.numClicks)\n  //   )\n  // }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\nexport default withStreamlitConnection(ToggleList);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport MyComponent from \"./ToggleList\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <MyComponent />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}
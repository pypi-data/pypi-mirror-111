{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","state","rows","columns","loading","showDeleted","descending","pagination","total","current","pageSize","changePage","_filters","_sorter","queryTable","table","limit","offset","includeDeleted","setState","axios","get","params","include_deleted","order","then","resp","data","map","name","title","dataIndex","key","push","render","text","record","type","danger","onClick","deleteRecord","id","records","recordId","delete","filter","row","onToggleDeleted","e","target","checked","tableName","onToggleSearchOrder","window","location","pathname","replace","this","style","marginTop","marginBottom","onChange","size","dataSource","rowKey","pageSizeOptions","showSizeChanger","showTotal","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1b6d3ea3.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { Table, Button, TablePaginationConfig, Checkbox } from 'antd';\nimport axios from 'axios';\n\ninterface Props {\n\n}\n\ninterface TableRow {\n\n}\n\ninterface State {\n  rows: { [col: string]: string }[];\n  columns: any[];\n  loading: boolean;\n  showDeleted: boolean;\n  pagination: {\n    total: number;\n    current: number;\n    pageSize: number;\n  };\n  descending: boolean;\n}\n\nexport default class App extends React.Component<Props, State> {\n  public state: State = {\n    rows: [],\n    columns: [],\n    loading: true,\n    showDeleted: false,\n    descending: true,\n    pagination: {\n      total: 0,\n      current: 1,\n      pageSize: 500000,\n    }\n  }\n\n  get tableName() {\n    return window.location.pathname.replace(\"/exps/\", \"\");\n  }\n\n  componentDidMount() {\n    this.queryTable(this.tableName, this.state.pagination.pageSize, (this.state.pagination.current - 1) * this.state.pagination.pageSize, this.state.showDeleted, this.state.descending);\n  }\n\n  changePage = (pagination: TablePaginationConfig,\n    _filters?: any,\n    _sorter?: any) => {\n  }\n\n  queryTable = (table: string, limit: number, offset: number, includeDeleted: boolean, descending: boolean) => {\n    this.setState({ loading: true });\n    return axios.get('/api/v1/runs', {\n      params: { table, limit, offset, include_deleted: includeDeleted ? \"true\" : \"false\", order: descending ? 'desc' : 'asc' }\n    }).then((resp) => {\n      let columns = resp.data.columns.map((name: string) => ({\n        title: name,\n        dataIndex: name,\n        key: name\n      }));\n      columns.push({\n        title: \"Action\",\n        key: '__action__',\n        render: (text: string, record: any) => {\n          return <Button type=\"primary\" danger={true} onClick={this.deleteRecord(record.id)}>Delete</Button>\n        }\n      });\n      this.setState({\n        rows: resp.data.records,\n        columns,\n        loading: false\n      })\n    })\n  }\n\n  deleteRecord = (recordId: string) => {\n    return () => {\n      this.setState({ loading: true });\n      return axios.delete(`/api/v1/runs/${recordId}`).then((resp) => {\n        this.setState({ loading: false, rows: this.state.rows.filter((row) => row.id !== recordId) });\n      });\n    }\n  }\n\n  onToggleDeleted = (e: any) => {\n    if (e.target.checked !== this.state.showDeleted) {\n      this.setState({ showDeleted: e.target.checked });\n      this.queryTable(this.tableName, this.state.pagination.pageSize, (this.state.pagination.current - 1) * this.state.pagination.pageSize, e.target.checked, this.state.descending);\n    }\n  }\n\n  onToggleSearchOrder = (e: any) => {\n    if (e.target.checked !== this.state.descending) {\n      this.setState({ descending: e.target.checked });\n      this.queryTable(this.tableName, this.state.pagination.pageSize, (this.state.pagination.current - 1) * this.state.pagination.pageSize, this.state.showDeleted, e.target.checked);\n    }\n  }\n\n  render() {\n    return <div>\n      <div style={{ marginTop: 8, marginBottom: 8 }}>\n        <Checkbox onChange={this.onToggleDeleted} checked={this.state.showDeleted}>Show deleted runs</Checkbox>\n        <Checkbox onChange={this.onToggleSearchOrder} checked={this.state.descending}>Sort Descending</Checkbox>\n      </div>\n      <Table\n        size=\"small\"\n        dataSource={this.state.rows}\n        rowKey={\"id\"}\n        pagination={{\n          total: this.state.pagination.total,\n          current: this.state.pagination.current,\n          pageSize: this.state.pagination.pageSize,\n          pageSizeOptions: [\"5\", \"10\", \"20\", \"50\", \"100\", '200', '500', '1000'],\n          showSizeChanger: true,\n          showTotal: (total: number) => `Total ${total} items`,\n        }}\n        columns={this.state.columns}\n        loading={this.state.loading}\n        onChange={this.changePage}\n      />\n    </div>\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
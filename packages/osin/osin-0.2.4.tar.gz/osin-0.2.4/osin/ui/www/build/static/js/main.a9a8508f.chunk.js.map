{"version":3,"sources":["TableSchema.tsx","ExpTable.tsx","App.tsx","reportWebVitals.ts","Store.ts","index.tsx"],"names":["inject","observer","props","store","schema","schemas","tableName","version","undefined","useEffect","downloadSchema","items","column","item","Item","checked","visibility","onClick","e","setVisibility","target","type","Text","strong","style","width","ellipsis","tooltip","name","value","className","Option","push","Object","values","columns","show","bordered","save","disabled","hasChanged","ExpTable","state","records","antdColumns","loading","showDeleted","showSchema","descending","total","pageNo","pageSize","selectedRows","componentDidMount","updateData","componentDidUpdate","reload","Date","now","deleteRecords","recordIds","is_permanent","setState","axios","post","run_ids","then","onSelectRows","selectedRowKeys","restoreSelectedRows","updatePagination","pagination","current","memoizeOne","key","a","get","params","table","limit","offset","include_deleted","order","runsResp","data","record","keys","cname","title","toUpperCase","dataIndex","render","parseFloat","toFixed","length","text","Fragment","danger","id","deleted","this","match","antdCol","col","keyboard","onChange","size","dataSource","slice","rowKey","position","pageSizeOptions","showSizeChanger","showTotal","scroll","x","scrollToFirstRowOnChange","rowSelection","React","Component","withRouter","App","path","fontSize","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ColumnSchema","count","format","makeObservable","observable","action","TableSchema","flow","some","computed","resp","entries","setSchema","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.a9a8508f.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { List, Typography, Checkbox, Select, Divider, Button } from \"antd\";\nimport axios from 'axios';\nimport { toJS } from \"mobx\";\nimport { observer, inject } from \"mobx-react\";\nimport { ColumnSchema, TableSchema, Store, MobxProviderProps } from \"./Store\";\n\nconst TableSchemaComponent = (props: {\n  show: boolean, tableName: string,\n  store?: Store,\n}) => {\n  let store = props.store!;\n  let schema: TableSchema | undefined = store.schemas[props.tableName];\n  let version = schema === undefined ? undefined : schema.version;\n\n  useEffect(() => {\n    store.downloadSchema(props.tableName);\n  }, [props.tableName, version]);\n\n  if (schema === undefined) {\n    return null;\n  }\n\n  let items = [];\n  for (let column of Object.values(schema.columns)) {\n    const item = <List.Item key={column.name}>\n      <div>\n        <Checkbox checked={column.visibility}\n          onClick={(e: any) => { column.setVisibility(e.target.checked); }}>\n          show\n        </Checkbox>\n        <Divider type=\"vertical\" />\n        <Typography.Text strong={true} style={{ width: 100 }} ellipsis={{ tooltip: column.name }}>\n          {column.name}\n        </Typography.Text>\n        <Divider type=\"vertical\" />\n        <Select value={column.type} className=\"ml-4\">\n          <Select.Option value=\"auto\">auto</Select.Option>\n          <Select.Option value=\"string\">string</Select.Option>\n          <Select.Option value=\"number\">number</Select.Option>\n        </Select>\n      </div>\n    </List.Item>;\n\n    items.push(item);\n  }\n\n  return <div className={props.show ? \"\" : \"hide\"}>\n    <List\n      bordered={true}>\n      {items}\n    </List>\n    <Button\n      type=\"primary\" className=\"mt-8\" onClick={() => schema!.save()}\n      disabled={!schema.hasChanged}\n    >\n      Save\n    </Button>\n  </div>\n};\n\nexport default inject('store')(observer(TableSchemaComponent));","import React from 'react';\nimport {\n  withRouter,\n  RouteComponentProps\n} from \"react-router-dom\";\n\nimport { Table, Button, TablePaginationConfig, Checkbox, Menu, Dropdown, Typography, Divider } from 'antd';\nimport { DownOutlined } from '@ant-design/icons';\nimport axios from 'axios';\nimport memoizeOne from 'memoize-one';\nimport TableSchema from \"./TableSchema\";\nimport { inject, observer } from \"mobx-react\";\nimport { Store } from \"./Store\";\nimport { toJS } from 'mobx';\n\ninterface Props extends RouteComponentProps<{ tableName: string }> {\n  store?: Store\n}\n\ninterface State {\n  records: { [id: string]: string }[],\n  antdColumns: any[],\n  loading: boolean,\n  showDeleted: boolean,\n  descending: boolean,\n  total: number;\n  pageSize: number;\n  pageNo: number;\n  selectedRows: string[],\n  showSchema: boolean,\n}\n\n@inject('store')\n@observer\nclass ExpTable extends React.Component<Props, State> {\n  public state: State = {\n    records: [],\n    antdColumns: [],\n    loading: true,\n    showDeleted: false,\n    showSchema: false,\n    descending: true,\n    total: 0,\n    pageNo: 1,\n    pageSize: 10,\n    selectedRows: []\n  }\n\n  get tableName() {\n    return this.props.match.params.tableName;\n  }\n\n  componentDidMount = () => {\n    this.updateData(this.tableName, this.state.showDeleted, this.state.descending, this.state.pageSize, this.state.pageNo);\n  }\n\n  componentDidUpdate = () => {\n    this.updateData(this.tableName, this.state.showDeleted, this.state.descending, this.state.pageSize, this.state.pageNo);\n  }\n\n  reload = () => {\n    this.updateData(\n      this.tableName, this.state.showDeleted, this.state.descending,\n      this.state.pageSize, this.state.pageNo, Date.now());\n  }\n\n  deleteRecords = (recordIds: string[], is_permanent?: boolean) => {\n    this.setState({ loading: true });\n    axios.post(`/api/v1/runs/delete`, { run_ids: recordIds, is_permanent })\n      .then(this.reload);\n  }\n\n  onSelectRows = (selectedRowKeys: any[]) => {\n    this.setState({ selectedRows: selectedRowKeys });\n  }\n\n  restoreSelectedRows = () => {\n    this.setState({ loading: true });\n    axios.post(`/api/v1/runs/restore`, { run_ids: this.state.selectedRows })\n      .then(this.reload);\n  }\n\n  updatePagination = (pagination: TablePaginationConfig) => {\n    this.setState({ pageNo: pagination.current!, pageSize: pagination.pageSize! });\n  }\n\n  public render() {\n    let store = this.props.store!;\n    let schema = store.schemas[this.tableName];\n    let antdColumns = [];\n    if (schema !== undefined) {\n      for (let antdCol of this.state.antdColumns) {\n        let col = schema.columns[antdCol.dataIndex];\n        if (col === undefined || col.visibility !== false) {\n          antdColumns.push(antdCol);\n        }\n      }\n    } else {\n      antdColumns = this.state.antdColumns;\n    }\n\n    return <React.Fragment>\n      <div className=\"mt-8 mb-8\">\n        <Typography.Text strong={true} keyboard={true}>\n          SEARCH\n        </Typography.Text>\n        <Checkbox\n          className=\"ml-12\"\n          onChange={(e) => this.setState({ showDeleted: e.target.checked })}\n          checked={this.state.showDeleted}>Show deleted runs</Checkbox>\n        <Checkbox\n          onChange={(e) => this.setState({ descending: e.target.checked })}\n          checked={this.state.descending}>Sort Descending</Checkbox>\n      </div>\n      <div className=\"mt-8 mb-8\">\n        <Typography.Text strong={true} type=\"secondary\">\n          ACTIONS\n        </Typography.Text>\n        <Button className=\"ml-16\" size=\"small\"\n          onClick={() => this.setState({ showSchema: !this.state.showSchema })}>\n          {this.state.showSchema ? \"Hide settings\" : \"Show settings\"}\n        </Button>\n        <Button className=\"ml-4\" size=\"small\"\n          onClick={this.reload}>\n          Reload\n        </Button>\n        <Button className=\"ml-4\" type=\"primary\" size=\"small\"\n          onClick={() => this.restoreSelectedRows()}\n          disabled={this.state.selectedRows.length == 0}>\n          Restore\n        </Button>\n        <Button className=\"ml-4\" type=\"primary\" danger={true} size=\"small\"\n          onClick={() => this.deleteRecords(this.state.selectedRows, true)}\n          disabled={this.state.selectedRows.length == 0}>\n          Delete Permanently\n        </Button>\n        <Button className=\"ml-4\" danger={true} size=\"small\"\n          onClick={() => this.deleteRecords(this.state.selectedRows)}\n          disabled={this.state.selectedRows.length == 0}>\n          Delete\n        </Button>\n        {this.state.selectedRows.length > 0 ?\n          <Typography.Text strong={true} type=\"danger\" className=\"ml-4\">\n            {this.state.selectedRows.length} rows selected\n          </Typography.Text>\n          : null\n        }\n        <div className=\"mt-8 mb-8\">\n          <TableSchema show={this.state.showSchema} tableName={this.tableName} />\n        </div>\n      </div>\n      <Table\n        size=\"small\"\n        dataSource={this.state.records.slice(0, this.state.pageSize)}\n        rowKey={\"id\"}\n        pagination={{\n          position: [\"topLeft\", \"bottomLeft\"],\n          total: this.state.total,\n          current: this.state.pageNo,\n          pageSize: this.state.pageSize,\n          pageSizeOptions: [\"5\", \"10\", \"20\", \"50\", \"100\", \"10000\"],\n          showSizeChanger: true,\n          showTotal: (total: number) => `Total ${total} items`,\n        }}\n        columns={antdColumns}\n        loading={this.state.loading}\n        onChange={this.updatePagination}\n        scroll={{ x: 'max-content', scrollToFirstRowOnChange: true }}\n        rowSelection={{\n          onChange: this.onSelectRows,\n        }}\n      />\n    </React.Fragment>;\n  }\n\n  updateData = memoizeOne(async (tableName: string, showDeleted: boolean, descending: boolean, pageSize: number, pageNo: number, key?: string | number) => {\n    this.setState({ loading: true });\n    // query data from the server\n    let schemaResp = await axios.get(\"/api/v1/tables\", {\n      params: {\n        table: tableName\n      }\n    });\n    let runsResp = await axios.get('/api/v1/runs', {\n      params: {\n        table: tableName,\n        limit: pageSize,\n        offset: (pageNo - 1) * pageSize,\n        include_deleted: showDeleted ? \"true\" : \"false\",\n        order: descending ? \"desc\" : \"asc\"\n      }\n    });\n    let total = runsResp.data.total;\n    let records = runsResp.data.records;\n    // create list of columns dynamically from the records\n    let columns: any = {};\n    for (let record of records) {\n      for (let cname of Object.keys(record)) {\n        if (columns[cname] === undefined) {\n          columns[cname] = {\n            title: cname.toUpperCase(),\n            dataIndex: cname,\n            key: cname,\n            render: (value: any, record: any) => {\n              if (typeof value === \"number\") {\n                return parseFloat(value.toFixed(4));\n              }\n              return value;\n            }\n          };\n        }\n      }\n    }\n    columns = Object.values(columns);\n    if (columns.length > 0) {\n      columns.push({\n        title: 'ACTIONS',\n        key: '__action_58172__',\n        render: (text: string, record: any) => {\n          return <React.Fragment>\n            <Button type=\"primary\" danger={true} onClick={() => this.deleteRecords([record.id])}>Delete</Button>\n            {this.state.showDeleted && record.deleted ? <Button type=\"primary\" className=\"ml-4\">Restore</Button> : null}\n          </React.Fragment>\n        }\n      });\n    }\n    this.setState({\n      loading: false,\n      records,\n      antdColumns: columns,\n      // columnVisibilities: schemaResp.data.column_visibilities,\n      total,\n      selectedRows: []\n    });\n  });\n}\n\nexport default withRouter(ExpTable);\n","import './App.css';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport ExpTable from \"./ExpTable\";\n\nexport default function App() {\n  return <div>\n    <Router>\n      <div>\n        <Switch>\n          <Route path=\"/exps/:tableName\">\n            <ExpTable />\n          </Route>\n          <Route path=\"/\">\n            <span style={{ fontSize: \"2em\" }}>The server is live</span>\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  </div>\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { action, observable, makeAutoObservable, makeObservable, flow, computed } from \"mobx\";\nimport axios from 'axios';\n\nexport class ColumnSchema {\n  @observable name: string;\n  @observable count: string;\n  @observable visibility: boolean;\n  @observable type: \"auto\" | \"string\" | \"number\";\n  @observable format: string[];\n  @observable hasChanged: boolean;\n\n  constructor(\n    name: string,\n    count: string,\n    visibility: boolean,\n    type: \"auto\" | \"string\" | \"number\",\n    format: string[],\n  ) {\n    makeObservable(this);\n    this.name = name;\n    this.count = count;\n    this.visibility = visibility;\n    this.type = type;\n    this.format = format;\n    this.hasChanged = false;\n  }\n\n  @action\n  public setVisibility(visibility: boolean) {\n    this.visibility = visibility;\n    this.hasChanged = true;\n  }\n}\n\nexport class TableSchema {\n  @observable name: string;\n  @observable version: number;\n  @observable columns: { [id: string]: ColumnSchema };\n\n\n  constructor(name: string, version: number, columns: { [id: string]: ColumnSchema }) {\n    makeObservable(this);\n    this.name = name;\n    this.version = version;\n    this.columns = columns;\n  }\n\n  save = flow(function* (this: TableSchema) {\n    yield axios.post(`/api/v1/tables/${this.name}`, { columns: this.columns });\n    for (let col of Object.values(this.columns)) {\n      col.hasChanged = false;\n    }\n  });\n\n  @computed get hasChanged() {\n    return Object.values(this.columns).some((col) => col.hasChanged);\n  }\n}\n\n\nexport class Store {\n  @observable schemas: any = {};\n  @observable version: number = 0.0;\n\n  constructor() {\n    makeObservable(this);\n  }\n\n  downloadSchema = flow(function* (this: Store, name: string) {\n    let resp = yield axios.get(`/api/v1/tables/${name}`);\n    let columns: any = {};\n    for (const [name, col] of Object.entries<any>(resp.data.columns)) {\n      columns[name] = new ColumnSchema(name, col.count, col.visibility, col.type, col.format);\n    }\n    this.setSchema(new TableSchema(\n      name,\n      resp.data.version,\n      columns\n    ));\n  });\n\n  @action\n  public setSchema(schema: TableSchema) {\n    this.schemas[schema.name] = schema;\n  }\n}\n\nexport type MobxProviderProps = { store: Store }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from \"mobx-react\";\nimport { Store } from \"./Store\";\n\nconst store = new Store();\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
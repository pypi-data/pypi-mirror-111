Metadata-Version: 2.1
Name: pip-rewind
Version: 0.1.0
Summary: Install python modules from pypi from a previous date in history
Home-page: https://github.com/Amar1729/pip-rewind
License: MIT
Keywords: packaging,dependency
Author: Amar Paul
Author-email: amar.paul16@gmail.com
Requires-Python: >=3.7,<4.0
Classifier: Environment :: Console
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Topic :: Software Development :: Build Tools
Requires-Dist: python-dateutil (>=2.8.1,<3.0.0)
Requires-Dist: pytz (>=2021.1,<2022.0)
Requires-Dist: result (>=0.6.0,<0.7.0)
Requires-Dist: rss-parser (>=0.2.3,<0.3.0)
Requires-Dist: tzlocal (>=2.1,<3.0)
Project-URL: Repository, https://github.com/Amar1729/pip-rewind
Description-Content-Type: text/markdown

# pip-rewind

`pip-rewind` is a command-line tool that can rewind pypi modules (given as command-line arguments or read from a requirements.txt file) to a previous date in time.

## Usage

```
$ pip-rewind --date "09/01/2020" requests
```

Or give it a requirements file:

```
$ pip-rewind --date "07/01/2019" -r requirements.txt
```

Currently, this package only parses a simple subset of valid requirements lines:

```
modulename
modulename<=5.0.0
modulename==4.0.0
```

Any line that describes a pypi dependency named `modulename`, possibly with a version identifier after, is valid - this tool simply cares about `modulename` since the version will be rewound anyway. Other lines (such as git dependencies) are ignored.

## Motivation

Starting to work on old projects that don't have **all** their dependencies listed and version-constrained can be difficult (especially when some of those dependencies interact with specific versions of OS packages). The simple existence of a line specifying `redis` in a requirements.txt file without its version can lead to possible breakage when dealing with month- or year-old software.

## LICENSE

MIT


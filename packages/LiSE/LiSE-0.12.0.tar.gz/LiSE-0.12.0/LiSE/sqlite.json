{
    "avatar_rulebook_count": "SELECT count(?) AS count_1 \nFROM avatar_rulebook",
    "avatar_rulebook_del": "DELETE FROM avatar_rulebook WHERE avatar_rulebook.character = ? AND avatar_rulebook.branch = ? AND avatar_rulebook.turn = ? AND avatar_rulebook.tick = ?",
    "avatar_rulebook_del_time": "DELETE FROM avatar_rulebook WHERE avatar_rulebook.branch = ? AND avatar_rulebook.turn = ? AND avatar_rulebook.tick = ?",
    "avatar_rulebook_dump": "SELECT avatar_rulebook.character, avatar_rulebook.branch, avatar_rulebook.turn, avatar_rulebook.tick, avatar_rulebook.rulebook \nFROM avatar_rulebook ORDER BY avatar_rulebook.branch, avatar_rulebook.turn, avatar_rulebook.tick",
    "avatar_rulebook_insert": "INSERT INTO avatar_rulebook (character, branch, turn, tick, rulebook) VALUES (?, ?, ?, ?, ?)",
    "avatar_rules_handled_count": "SELECT count(?) AS count_1 \nFROM avatar_rules_handled",
    "avatar_rules_handled_del": "DELETE FROM avatar_rules_handled WHERE avatar_rules_handled.character = ? AND avatar_rules_handled.rulebook = ? AND avatar_rules_handled.rule = ? AND avatar_rules_handled.graph = ? AND avatar_rules_handled.avatar = ? AND avatar_rules_handled.branch = ? AND avatar_rules_handled.turn = ?",
    "avatar_rules_handled_dump": "SELECT avatar_rules_handled.character, avatar_rules_handled.rulebook, avatar_rules_handled.rule, avatar_rules_handled.graph, avatar_rules_handled.avatar, avatar_rules_handled.branch, avatar_rules_handled.turn, avatar_rules_handled.tick \nFROM avatar_rules_handled ORDER BY avatar_rules_handled.character, avatar_rules_handled.rulebook, avatar_rules_handled.rule, avatar_rules_handled.graph, avatar_rules_handled.avatar, avatar_rules_handled.branch, avatar_rules_handled.turn",
    "avatar_rules_handled_insert": "INSERT INTO avatar_rules_handled (character, rulebook, rule, graph, avatar, branch, turn, tick) VALUES (?, ?, ?, ?, ?, ?, ?, ?)",
    "avatars_count": "SELECT count(?) AS count_1 \nFROM avatars",
    "avatars_del": "DELETE FROM avatars WHERE avatars.character_graph = ? AND avatars.avatar_graph = ? AND avatars.avatar_node = ? AND avatars.branch = ? AND avatars.turn = ? AND avatars.tick = ?",
    "avatars_del_time": "DELETE FROM avatars WHERE avatars.branch = ? AND avatars.turn = ? AND avatars.tick = ?",
    "avatars_dump": "SELECT avatars.character_graph, avatars.avatar_graph, avatars.avatar_node, avatars.branch, avatars.turn, avatars.tick, avatars.is_avatar \nFROM avatars ORDER BY avatars.branch, avatars.turn, avatars.tick",
    "avatars_insert": "INSERT INTO avatars (character_graph, avatar_graph, avatar_node, branch, turn, tick, is_avatar) VALUES (?, ?, ?, ?, ?, ?, ?)",
    "branch_children": "SELECT branches.branch \nFROM branches \nWHERE branches.parent = ?",
    "branches_count": "SELECT count(?) AS count_1 \nFROM branches",
    "branches_del": "DELETE FROM branches WHERE branches.branch = ?",
    "branches_dump": "SELECT branches.branch, branches.parent, branches.parent_turn, branches.parent_tick, branches.end_turn, branches.end_tick \nFROM branches ORDER BY branches.branch",
    "branches_insert": "INSERT INTO branches (branch, parent, parent_turn, parent_tick, end_turn, end_tick) VALUES (?, ?, ?, ?, ?, ?)",
    "character_place_rulebook_count": "SELECT count(?) AS count_1 \nFROM character_place_rulebook",
    "character_place_rulebook_del": "DELETE FROM character_place_rulebook WHERE character_place_rulebook.character = ? AND character_place_rulebook.branch = ? AND character_place_rulebook.turn = ? AND character_place_rulebook.tick = ?",
    "character_place_rulebook_del_time": "DELETE FROM character_place_rulebook WHERE character_place_rulebook.branch = ? AND character_place_rulebook.turn = ? AND character_place_rulebook.tick = ?",
    "character_place_rulebook_dump": "SELECT character_place_rulebook.character, character_place_rulebook.branch, character_place_rulebook.turn, character_place_rulebook.tick, character_place_rulebook.rulebook \nFROM character_place_rulebook ORDER BY character_place_rulebook.branch, character_place_rulebook.turn, character_place_rulebook.tick",
    "character_place_rulebook_insert": "INSERT INTO character_place_rulebook (character, branch, turn, tick, rulebook) VALUES (?, ?, ?, ?, ?)",
    "character_place_rules_handled_count": "SELECT count(?) AS count_1 \nFROM character_place_rules_handled",
    "character_place_rules_handled_del": "DELETE FROM character_place_rules_handled WHERE character_place_rules_handled.character = ? AND character_place_rules_handled.rulebook = ? AND character_place_rules_handled.rule = ? AND character_place_rules_handled.place = ? AND character_place_rules_handled.branch = ? AND character_place_rules_handled.turn = ?",
    "character_place_rules_handled_dump": "SELECT character_place_rules_handled.character, character_place_rules_handled.rulebook, character_place_rules_handled.rule, character_place_rules_handled.place, character_place_rules_handled.branch, character_place_rules_handled.turn, character_place_rules_handled.tick \nFROM character_place_rules_handled ORDER BY character_place_rules_handled.character, character_place_rules_handled.rulebook, character_place_rules_handled.rule, character_place_rules_handled.place, character_place_rules_handled.branch, character_place_rules_handled.turn",
    "character_place_rules_handled_insert": "INSERT INTO character_place_rules_handled (character, rulebook, rule, place, branch, turn, tick) VALUES (?, ?, ?, ?, ?, ?, ?)",
    "character_portal_rulebook_count": "SELECT count(?) AS count_1 \nFROM character_portal_rulebook",
    "character_portal_rulebook_del": "DELETE FROM character_portal_rulebook WHERE character_portal_rulebook.character = ? AND character_portal_rulebook.branch = ? AND character_portal_rulebook.turn = ? AND character_portal_rulebook.tick = ?",
    "character_portal_rulebook_del_time": "DELETE FROM character_portal_rulebook WHERE character_portal_rulebook.branch = ? AND character_portal_rulebook.turn = ? AND character_portal_rulebook.tick = ?",
    "character_portal_rulebook_dump": "SELECT character_portal_rulebook.character, character_portal_rulebook.branch, character_portal_rulebook.turn, character_portal_rulebook.tick, character_portal_rulebook.rulebook \nFROM character_portal_rulebook ORDER BY character_portal_rulebook.branch, character_portal_rulebook.turn, character_portal_rulebook.tick",
    "character_portal_rulebook_insert": "INSERT INTO character_portal_rulebook (character, branch, turn, tick, rulebook) VALUES (?, ?, ?, ?, ?)",
    "character_portal_rules_handled_count": "SELECT count(?) AS count_1 \nFROM character_portal_rules_handled",
    "character_portal_rules_handled_del": "DELETE FROM character_portal_rules_handled WHERE character_portal_rules_handled.character = ? AND character_portal_rules_handled.rulebook = ? AND character_portal_rules_handled.rule = ? AND character_portal_rules_handled.orig = ? AND character_portal_rules_handled.dest = ? AND character_portal_rules_handled.branch = ? AND character_portal_rules_handled.turn = ?",
    "character_portal_rules_handled_dump": "SELECT character_portal_rules_handled.character, character_portal_rules_handled.rulebook, character_portal_rules_handled.rule, character_portal_rules_handled.orig, character_portal_rules_handled.dest, character_portal_rules_handled.branch, character_portal_rules_handled.turn, character_portal_rules_handled.tick \nFROM character_portal_rules_handled ORDER BY character_portal_rules_handled.character, character_portal_rules_handled.rulebook, character_portal_rules_handled.rule, character_portal_rules_handled.orig, character_portal_rules_handled.dest, character_portal_rules_handled.branch, character_portal_rules_handled.turn",
    "character_portal_rules_handled_insert": "INSERT INTO character_portal_rules_handled (character, rulebook, rule, orig, dest, branch, turn, tick) VALUES (?, ?, ?, ?, ?, ?, ?, ?)",
    "character_rulebook_count": "SELECT count(?) AS count_1 \nFROM character_rulebook",
    "character_rulebook_del": "DELETE FROM character_rulebook WHERE character_rulebook.character = ? AND character_rulebook.branch = ? AND character_rulebook.turn = ? AND character_rulebook.tick = ?",
    "character_rulebook_del_time": "DELETE FROM character_rulebook WHERE character_rulebook.branch = ? AND character_rulebook.turn = ? AND character_rulebook.tick = ?",
    "character_rulebook_dump": "SELECT character_rulebook.character, character_rulebook.branch, character_rulebook.turn, character_rulebook.tick, character_rulebook.rulebook \nFROM character_rulebook ORDER BY character_rulebook.branch, character_rulebook.turn, character_rulebook.tick",
    "character_rulebook_insert": "INSERT INTO character_rulebook (character, branch, turn, tick, rulebook) VALUES (?, ?, ?, ?, ?)",
    "character_rules_handled_count": "SELECT count(?) AS count_1 \nFROM character_rules_handled",
    "character_rules_handled_del": "DELETE FROM character_rules_handled WHERE character_rules_handled.character = ? AND character_rules_handled.rulebook = ? AND character_rules_handled.rule = ? AND character_rules_handled.branch = ? AND character_rules_handled.turn = ?",
    "character_rules_handled_dump": "SELECT character_rules_handled.character, character_rules_handled.rulebook, character_rules_handled.rule, character_rules_handled.branch, character_rules_handled.turn, character_rules_handled.tick \nFROM character_rules_handled ORDER BY character_rules_handled.character, character_rules_handled.rulebook, character_rules_handled.rule, character_rules_handled.branch, character_rules_handled.turn",
    "character_rules_handled_insert": "INSERT INTO character_rules_handled (character, rulebook, rule, branch, turn, tick) VALUES (?, ?, ?, ?, ?, ?)",
    "character_thing_rulebook_count": "SELECT count(?) AS count_1 \nFROM character_thing_rulebook",
    "character_thing_rulebook_del": "DELETE FROM character_thing_rulebook WHERE character_thing_rulebook.character = ? AND character_thing_rulebook.branch = ? AND character_thing_rulebook.turn = ? AND character_thing_rulebook.tick = ?",
    "character_thing_rulebook_del_time": "DELETE FROM character_thing_rulebook WHERE character_thing_rulebook.branch = ? AND character_thing_rulebook.turn = ? AND character_thing_rulebook.tick = ?",
    "character_thing_rulebook_dump": "SELECT character_thing_rulebook.character, character_thing_rulebook.branch, character_thing_rulebook.turn, character_thing_rulebook.tick, character_thing_rulebook.rulebook \nFROM character_thing_rulebook ORDER BY character_thing_rulebook.branch, character_thing_rulebook.turn, character_thing_rulebook.tick",
    "character_thing_rulebook_insert": "INSERT INTO character_thing_rulebook (character, branch, turn, tick, rulebook) VALUES (?, ?, ?, ?, ?)",
    "character_thing_rules_handled_count": "SELECT count(?) AS count_1 \nFROM character_thing_rules_handled",
    "character_thing_rules_handled_del": "DELETE FROM character_thing_rules_handled WHERE character_thing_rules_handled.character = ? AND character_thing_rules_handled.rulebook = ? AND character_thing_rules_handled.rule = ? AND character_thing_rules_handled.thing = ? AND character_thing_rules_handled.branch = ? AND character_thing_rules_handled.turn = ?",
    "character_thing_rules_handled_dump": "SELECT character_thing_rules_handled.character, character_thing_rules_handled.rulebook, character_thing_rules_handled.rule, character_thing_rules_handled.thing, character_thing_rules_handled.branch, character_thing_rules_handled.turn, character_thing_rules_handled.tick \nFROM character_thing_rules_handled ORDER BY character_thing_rules_handled.character, character_thing_rules_handled.rulebook, character_thing_rules_handled.rule, character_thing_rules_handled.thing, character_thing_rules_handled.branch, character_thing_rules_handled.turn",
    "character_thing_rules_handled_insert": "INSERT INTO character_thing_rules_handled (character, rulebook, rule, thing, branch, turn, tick) VALUES (?, ?, ?, ?, ?, ?, ?)",
    "create_avatar_rulebook": "\nCREATE TABLE avatar_rulebook (\n\tcharacter TEXT NOT NULL, \n\tbranch TEXT NOT NULL, \n\tturn INTEGER NOT NULL, \n\ttick INTEGER NOT NULL, \n\trulebook TEXT NOT NULL, \n\tPRIMARY KEY (character, branch, turn, tick), \n\tFOREIGN KEY(character) REFERENCES graphs (graph), \n\tFOREIGN KEY(rulebook) REFERENCES rulebooks (rulebook)\n)\n WITHOUT ROWID\n\n",
    "create_avatar_rules_handled": "\nCREATE TABLE avatar_rules_handled (\n\tcharacter TEXT NOT NULL, \n\trulebook TEXT NOT NULL, \n\trule TEXT NOT NULL, \n\tgraph TEXT NOT NULL, \n\tavatar TEXT NOT NULL, \n\tbranch TEXT NOT NULL, \n\tturn INTEGER NOT NULL, \n\ttick INTEGER NOT NULL, \n\tPRIMARY KEY (character, rulebook, rule, graph, avatar, branch, turn), \n\tFOREIGN KEY(character, rulebook) REFERENCES avatar_rulebook (character, rulebook)\n)\n WITHOUT ROWID\n\n",
    "create_avatars": "\nCREATE TABLE avatars (\n\tcharacter_graph TEXT NOT NULL, \n\tavatar_graph TEXT NOT NULL, \n\tavatar_node TEXT NOT NULL, \n\tbranch TEXT NOT NULL, \n\tturn INTEGER NOT NULL, \n\ttick INTEGER NOT NULL, \n\tis_avatar BOOLEAN NOT NULL, \n\tPRIMARY KEY (character_graph, avatar_graph, avatar_node, branch, turn, tick), \n\tFOREIGN KEY(character_graph) REFERENCES graphs (graph), \n\tFOREIGN KEY(avatar_graph, avatar_node) REFERENCES nodes (graph, node)\n)\n WITHOUT ROWID\n\n",
    "create_branches": "\nCREATE TABLE branches (\n\tbranch TEXT NOT NULL, \n\tparent TEXT, \n\tparent_turn INTEGER NOT NULL, \n\tparent_tick INTEGER NOT NULL, \n\tend_turn INTEGER NOT NULL, \n\tend_tick INTEGER NOT NULL, \n\tPRIMARY KEY (branch), \n\tCHECK (branch<>parent), \n\tFOREIGN KEY(branch) REFERENCES branches (parent)\n)\n WITHOUT ROWID\n\n",
    "create_character_place_rulebook": "\nCREATE TABLE character_place_rulebook (\n\tcharacter TEXT NOT NULL, \n\tbranch TEXT NOT NULL, \n\tturn INTEGER NOT NULL, \n\ttick INTEGER NOT NULL, \n\trulebook TEXT NOT NULL, \n\tPRIMARY KEY (character, branch, turn, tick), \n\tFOREIGN KEY(character) REFERENCES graphs (graph), \n\tFOREIGN KEY(rulebook) REFERENCES rulebooks (rulebook)\n)\n WITHOUT ROWID\n\n",
    "create_character_place_rules_handled": "\nCREATE TABLE character_place_rules_handled (\n\tcharacter TEXT NOT NULL, \n\trulebook TEXT NOT NULL, \n\trule TEXT NOT NULL, \n\tplace TEXT NOT NULL, \n\tbranch TEXT NOT NULL, \n\tturn INTEGER NOT NULL, \n\ttick INTEGER NOT NULL, \n\tPRIMARY KEY (character, rulebook, rule, place, branch, turn), \n\tFOREIGN KEY(character, rulebook) REFERENCES character_place_rulebook (character, rulebook), \n\tFOREIGN KEY(character, place) REFERENCES nodes (graph, node)\n)\n WITHOUT ROWID\n\n",
    "create_character_portal_rulebook": "\nCREATE TABLE character_portal_rulebook (\n\tcharacter TEXT NOT NULL, \n\tbranch TEXT NOT NULL, \n\tturn INTEGER NOT NULL, \n\ttick INTEGER NOT NULL, \n\trulebook TEXT NOT NULL, \n\tPRIMARY KEY (character, branch, turn, tick), \n\tFOREIGN KEY(character) REFERENCES graphs (graph), \n\tFOREIGN KEY(rulebook) REFERENCES rulebooks (rulebook)\n)\n WITHOUT ROWID\n\n",
    "create_character_portal_rules_handled": "\nCREATE TABLE character_portal_rules_handled (\n\tcharacter TEXT NOT NULL, \n\trulebook TEXT NOT NULL, \n\trule TEXT NOT NULL, \n\torig TEXT NOT NULL, \n\tdest TEXT NOT NULL, \n\tbranch TEXT NOT NULL, \n\tturn INTEGER NOT NULL, \n\ttick INTEGER NOT NULL, \n\tPRIMARY KEY (character, rulebook, rule, orig, dest, branch, turn), \n\tFOREIGN KEY(character, rulebook) REFERENCES character_portal_rulebook (character, rulebook), \n\tFOREIGN KEY(character, orig, dest) REFERENCES edges (graph, orig, dest)\n)\n WITHOUT ROWID\n\n",
    "create_character_rulebook": "\nCREATE TABLE character_rulebook (\n\tcharacter TEXT NOT NULL, \n\tbranch TEXT NOT NULL, \n\tturn INTEGER NOT NULL, \n\ttick INTEGER NOT NULL, \n\trulebook TEXT NOT NULL, \n\tPRIMARY KEY (character, branch, turn, tick), \n\tFOREIGN KEY(character) REFERENCES graphs (graph), \n\tFOREIGN KEY(rulebook) REFERENCES rulebooks (rulebook)\n)\n WITHOUT ROWID\n\n",
    "create_character_rules_handled": "\nCREATE TABLE character_rules_handled (\n\tcharacter TEXT NOT NULL, \n\trulebook TEXT NOT NULL, \n\trule TEXT NOT NULL, \n\tbranch TEXT NOT NULL, \n\tturn INTEGER NOT NULL, \n\ttick INTEGER NOT NULL, \n\tPRIMARY KEY (character, rulebook, rule, branch, turn), \n\tFOREIGN KEY(character, rulebook) REFERENCES character_rulebook (character, rulebook)\n)\n WITHOUT ROWID\n\n",
    "create_character_thing_rulebook": "\nCREATE TABLE character_thing_rulebook (\n\tcharacter TEXT NOT NULL, \n\tbranch TEXT NOT NULL, \n\tturn INTEGER NOT NULL, \n\ttick INTEGER NOT NULL, \n\trulebook TEXT NOT NULL, \n\tPRIMARY KEY (character, branch, turn, tick), \n\tFOREIGN KEY(character) REFERENCES graphs (graph), \n\tFOREIGN KEY(rulebook) REFERENCES rulebooks (rulebook)\n)\n WITHOUT ROWID\n\n",
    "create_character_thing_rules_handled": "\nCREATE TABLE character_thing_rules_handled (\n\tcharacter TEXT NOT NULL, \n\trulebook TEXT NOT NULL, \n\trule TEXT NOT NULL, \n\tthing TEXT NOT NULL, \n\tbranch TEXT NOT NULL, \n\tturn INTEGER NOT NULL, \n\ttick INTEGER NOT NULL, \n\tPRIMARY KEY (character, rulebook, rule, thing, branch, turn), \n\tFOREIGN KEY(character, rulebook) REFERENCES character_thing_rulebook (character, rulebook), \n\tFOREIGN KEY(character, thing) REFERENCES things (character, thing)\n)\n WITHOUT ROWID\n\n",
    "create_edge_val": "\nCREATE TABLE edge_val (\n\tgraph TEXT NOT NULL, \n\torig TEXT NOT NULL, \n\tdest TEXT NOT NULL, \n\tidx INTEGER NOT NULL, \n\t\"key\" TEXT NOT NULL, \n\tbranch TEXT NOT NULL, \n\tturn INTEGER NOT NULL, \n\ttick INTEGER NOT NULL, \n\tvalue TEXT, \n\tPRIMARY KEY (graph, orig, dest, idx, \"key\", branch, turn, tick), \n\tFOREIGN KEY(graph, orig, dest, idx) REFERENCES edges (graph, orig, dest, idx), \n\tFOREIGN KEY(branch) REFERENCES branches (branch)\n)\n WITHOUT ROWID\n\n",
    "create_edges": "\nCREATE TABLE edges (\n\tgraph TEXT NOT NULL, \n\torig TEXT NOT NULL, \n\tdest TEXT NOT NULL, \n\tidx INTEGER NOT NULL, \n\tbranch TEXT NOT NULL, \n\tturn INTEGER NOT NULL, \n\ttick INTEGER NOT NULL, \n\textant BOOLEAN NOT NULL, \n\tPRIMARY KEY (graph, orig, dest, idx, branch, turn, tick), \n\tFOREIGN KEY(graph, orig) REFERENCES nodes (graph, node), \n\tFOREIGN KEY(graph, dest) REFERENCES nodes (graph, node), \n\tFOREIGN KEY(graph) REFERENCES graphs (graph), \n\tFOREIGN KEY(branch) REFERENCES branches (branch)\n)\n WITHOUT ROWID\n\n",
    "create_global": "\nCREATE TABLE global (\n\t\"key\" TEXT NOT NULL, \n\tvalue TEXT, \n\tPRIMARY KEY (\"key\")\n)\n WITHOUT ROWID\n\n",
    "create_graph_val": "\nCREATE TABLE graph_val (\n\tgraph TEXT NOT NULL, \n\t\"key\" TEXT NOT NULL, \n\tbranch TEXT NOT NULL, \n\tturn INTEGER NOT NULL, \n\ttick INTEGER NOT NULL, \n\tvalue TEXT, \n\tPRIMARY KEY (graph, \"key\", branch, turn, tick), \n\tFOREIGN KEY(graph) REFERENCES graphs (graph), \n\tFOREIGN KEY(branch) REFERENCES branches (branch)\n)\n WITHOUT ROWID\n\n",
    "create_graphs": "\nCREATE TABLE graphs (\n\tgraph TEXT NOT NULL, \n\ttype TEXT NOT NULL, \n\tPRIMARY KEY (graph), \n\tCHECK (type IN ('Graph', 'DiGraph', 'MultiGraph', 'MultiDiGraph'))\n)\n WITHOUT ROWID\n\n",
    "create_keyframes": "\nCREATE TABLE keyframes (\n\tgraph TEXT NOT NULL, \n\tbranch TEXT NOT NULL, \n\tturn INTEGER NOT NULL, \n\ttick INTEGER NOT NULL, \n\tnodes TEXT NOT NULL, \n\tedges TEXT NOT NULL, \n\tgraph_val TEXT NOT NULL, \n\tPRIMARY KEY (graph, branch, turn, tick), \n\tFOREIGN KEY(graph) REFERENCES graphs (graph), \n\tFOREIGN KEY(branch) REFERENCES branches (branch)\n)\n WITHOUT ROWID\n\n",
    "create_node_rulebook": "\nCREATE TABLE node_rulebook (\n\tcharacter TEXT NOT NULL, \n\tnode TEXT NOT NULL, \n\tbranch TEXT NOT NULL, \n\tturn INTEGER NOT NULL, \n\ttick INTEGER NOT NULL, \n\trulebook TEXT NOT NULL, \n\tPRIMARY KEY (character, node, branch, turn, tick), \n\tFOREIGN KEY(character, node) REFERENCES nodes (graph, node)\n)\n WITHOUT ROWID\n\n",
    "create_node_rules_handled": "\nCREATE TABLE node_rules_handled (\n\tcharacter TEXT NOT NULL, \n\tnode TEXT NOT NULL, \n\trulebook TEXT NOT NULL, \n\trule TEXT NOT NULL, \n\tbranch TEXT NOT NULL, \n\tturn INTEGER NOT NULL, \n\ttick INTEGER NOT NULL, \n\tPRIMARY KEY (character, node, rulebook, rule, branch, turn), \n\tFOREIGN KEY(character, node) REFERENCES nodes (graph, node)\n)\n WITHOUT ROWID\n\n",
    "create_node_val": "\nCREATE TABLE node_val (\n\tgraph TEXT NOT NULL, \n\tnode TEXT NOT NULL, \n\t\"key\" TEXT NOT NULL, \n\tbranch TEXT NOT NULL, \n\tturn INTEGER NOT NULL, \n\ttick INTEGER NOT NULL, \n\tvalue TEXT, \n\tPRIMARY KEY (graph, node, \"key\", branch, turn, tick), \n\tFOREIGN KEY(graph, node) REFERENCES nodes (graph, node), \n\tFOREIGN KEY(branch) REFERENCES branches (branch)\n)\n WITHOUT ROWID\n\n",
    "create_nodes": "\nCREATE TABLE nodes (\n\tgraph TEXT NOT NULL, \n\tnode TEXT NOT NULL, \n\tbranch TEXT NOT NULL, \n\tturn INTEGER NOT NULL, \n\ttick INTEGER NOT NULL, \n\textant BOOLEAN NOT NULL, \n\tPRIMARY KEY (graph, node, branch, turn, tick), \n\tFOREIGN KEY(graph) REFERENCES graphs (graph), \n\tFOREIGN KEY(branch) REFERENCES branches (branch)\n)\n WITHOUT ROWID\n\n",
    "create_plan_ticks": "\nCREATE TABLE plan_ticks (\n\tplan_id INTEGER NOT NULL, \n\tturn INTEGER NOT NULL, \n\ttick INTEGER NOT NULL, \n\tPRIMARY KEY (plan_id, turn, tick), \n\tFOREIGN KEY(plan_id) REFERENCES plans (id)\n)\n WITHOUT ROWID\n\n",
    "create_plans": "\nCREATE TABLE plans (\n\tid INTEGER NOT NULL, \n\tbranch TEXT NOT NULL, \n\tturn INTEGER NOT NULL, \n\ttick INTEGER NOT NULL, \n\tPRIMARY KEY (id)\n)\n WITHOUT ROWID\n\n",
    "create_portal_rulebook": "\nCREATE TABLE portal_rulebook (\n\tcharacter TEXT NOT NULL, \n\torig TEXT NOT NULL, \n\tdest TEXT NOT NULL, \n\tbranch TEXT NOT NULL, \n\tturn INTEGER NOT NULL, \n\ttick INTEGER NOT NULL, \n\trulebook TEXT NOT NULL, \n\tPRIMARY KEY (character, orig, dest, branch, turn, tick), \n\tFOREIGN KEY(character, orig, dest) REFERENCES edges (graph, orig, dest)\n)\n WITHOUT ROWID\n\n",
    "create_portal_rules_handled": "\nCREATE TABLE portal_rules_handled (\n\tcharacter TEXT NOT NULL, \n\torig TEXT NOT NULL, \n\tdest TEXT NOT NULL, \n\trulebook TEXT NOT NULL, \n\trule TEXT NOT NULL, \n\tbranch TEXT NOT NULL, \n\tturn INTEGER NOT NULL, \n\ttick INTEGER NOT NULL, \n\tPRIMARY KEY (character, orig, dest, rulebook, rule, branch, turn), \n\tFOREIGN KEY(character, orig, dest) REFERENCES edges (graph, orig, dest)\n)\n WITHOUT ROWID\n\n",
    "create_rule_actions": "\nCREATE TABLE rule_actions (\n\trule TEXT NOT NULL, \n\tbranch TEXT NOT NULL, \n\tturn INTEGER NOT NULL, \n\ttick INTEGER NOT NULL, \n\tactions TEXT NOT NULL, \n\tPRIMARY KEY (rule, branch, turn, tick), \n\tFOREIGN KEY(rule) REFERENCES rules (rule)\n)\n WITHOUT ROWID\n\n",
    "create_rule_prereqs": "\nCREATE TABLE rule_prereqs (\n\trule TEXT NOT NULL, \n\tbranch TEXT NOT NULL, \n\tturn INTEGER NOT NULL, \n\ttick INTEGER NOT NULL, \n\tprereqs TEXT NOT NULL, \n\tPRIMARY KEY (rule, branch, turn, tick), \n\tFOREIGN KEY(rule) REFERENCES rules (rule)\n)\n WITHOUT ROWID\n\n",
    "create_rule_triggers": "\nCREATE TABLE rule_triggers (\n\trule TEXT NOT NULL, \n\tbranch TEXT NOT NULL, \n\tturn INTEGER NOT NULL, \n\ttick INTEGER NOT NULL, \n\ttriggers TEXT NOT NULL, \n\tPRIMARY KEY (rule, branch, turn, tick), \n\tFOREIGN KEY(rule) REFERENCES rules (rule)\n)\n WITHOUT ROWID\n\n",
    "create_rulebooks": "\nCREATE TABLE rulebooks (\n\trulebook TEXT NOT NULL, \n\tbranch TEXT NOT NULL, \n\tturn INTEGER NOT NULL, \n\ttick INTEGER NOT NULL, \n\trules TEXT NOT NULL, \n\tPRIMARY KEY (rulebook, branch, turn, tick)\n)\n WITHOUT ROWID\n\n",
    "create_rules": "\nCREATE TABLE rules (\n\trule TEXT NOT NULL, \n\tPRIMARY KEY (rule)\n)\n WITHOUT ROWID\n\n",
    "create_things": "\nCREATE TABLE things (\n\tcharacter TEXT NOT NULL, \n\tthing TEXT NOT NULL, \n\tbranch TEXT NOT NULL, \n\tturn INTEGER NOT NULL, \n\ttick INTEGER NOT NULL, \n\tlocation TEXT NOT NULL, \n\tPRIMARY KEY (character, thing, branch, turn, tick), \n\tFOREIGN KEY(character, thing) REFERENCES nodes (graph, node), \n\tFOREIGN KEY(character, location) REFERENCES nodes (graph, node)\n)\n WITHOUT ROWID\n\n",
    "create_turns": "\nCREATE TABLE turns (\n\tbranch TEXT NOT NULL, \n\tturn INTEGER NOT NULL, \n\tend_tick INTEGER NOT NULL, \n\tplan_end_tick INTEGER NOT NULL, \n\tPRIMARY KEY (branch, turn)\n)\n WITHOUT ROWID\n\n",
    "create_turns_completed": "\nCREATE TABLE turns_completed (\n\tbranch TEXT NOT NULL, \n\tturn INTEGER NOT NULL, \n\tPRIMARY KEY (branch)\n)\n WITHOUT ROWID\n\n",
    "create_universals": "\nCREATE TABLE universals (\n\t\"key\" TEXT NOT NULL, \n\tbranch TEXT NOT NULL, \n\tturn INTEGER NOT NULL, \n\ttick INTEGER NOT NULL, \n\tvalue TEXT NOT NULL, \n\tPRIMARY KEY (\"key\", branch, turn, tick)\n)\n WITHOUT ROWID\n\n",
    "del_avatar_rules_handled_turn": "DELETE FROM avatar_rules_handled WHERE avatar_rules_handled.branch = ? AND avatar_rules_handled.turn = ?",
    "del_avatars_after": "DELETE FROM avatars WHERE avatars.character_graph = ? AND avatars.avatar_graph = ? AND avatars.avatar_node = ? AND avatars.branch = ? AND (avatars.turn > ? OR avatars.turn = ? AND avatars.tick >= ?)",
    "del_char_avatars": "DELETE FROM avatars WHERE avatars.character_graph = ?",
    "del_char_things": "DELETE FROM things WHERE things.character = ?",
    "del_character_place_rules_handled_turn": "DELETE FROM character_place_rules_handled WHERE character_place_rules_handled.branch = ? AND character_place_rules_handled.turn = ?",
    "del_character_portal_rules_handled_turn": "DELETE FROM character_portal_rules_handled WHERE character_portal_rules_handled.branch = ? AND character_portal_rules_handled.turn = ?",
    "del_character_rules_handled_turn": "DELETE FROM character_rules_handled WHERE character_rules_handled.branch = ? AND character_rules_handled.turn = ?",
    "del_character_thing_rules_handled_turn": "DELETE FROM character_thing_rules_handled WHERE character_thing_rules_handled.branch = ? AND character_thing_rules_handled.turn = ?",
    "del_edge_val_after": "DELETE FROM edge_val WHERE edge_val.graph = ? AND edge_val.orig = ? AND edge_val.dest = ? AND edge_val.idx = ? AND edge_val.\"key\" = ? AND edge_val.branch = ? AND (edge_val.turn > ? OR edge_val.turn = ? AND edge_val.tick >= ?)",
    "del_edge_val_graph": "DELETE FROM edge_val WHERE edge_val.graph = ?",
    "del_edges_after": "DELETE FROM edges WHERE edges.graph = ? AND edges.orig = ? AND edges.dest = ? AND edges.idx = ? AND edges.branch = ? AND (edges.turn > ? OR edges.turn = ? AND edges.tick >= ?)",
    "del_edges_graph": "DELETE FROM edges WHERE edges.graph = ?",
    "del_graph": "DELETE FROM graphs WHERE graphs.graph = ?",
    "del_graph_val_after": "DELETE FROM graph_val WHERE graph_val.graph = ? AND graph_val.\"key\" = ? AND graph_val.branch = ? AND (graph_val.turn > ? OR graph_val.turn = ? AND graph_val.tick >= ?)",
    "del_node_rules_handled_turn": "DELETE FROM node_rules_handled WHERE node_rules_handled.branch = ? AND node_rules_handled.turn = ?",
    "del_node_val_after": "DELETE FROM node_val WHERE node_val.graph = ? AND node_val.node = ? AND node_val.\"key\" = ? AND node_val.branch = ? AND (node_val.turn > ? OR node_val.turn = ? AND node_val.tick >= ?)",
    "del_node_val_graph": "DELETE FROM node_val WHERE node_val.graph = ?",
    "del_nodes_after": "DELETE FROM nodes WHERE nodes.graph = ? AND nodes.node = ? AND nodes.branch = ? AND (nodes.turn > ? OR nodes.turn = ? AND nodes.tick >= ?)",
    "del_nodes_graph": "DELETE FROM nodes WHERE nodes.graph = ?",
    "del_portal_rules_handled_turn": "DELETE FROM portal_rules_handled WHERE portal_rules_handled.branch = ? AND portal_rules_handled.turn = ?",
    "del_things_after": "DELETE FROM things WHERE things.character = ? AND things.thing = ? AND things.branch = ? AND (things.turn > ? OR things.turn = ? AND things.tick >= ?)",
    "edge_val_count": "SELECT count(?) AS count_1 \nFROM edge_val",
    "edge_val_del": "DELETE FROM edge_val WHERE edge_val.graph = ? AND edge_val.orig = ? AND edge_val.dest = ? AND edge_val.idx = ? AND edge_val.\"key\" = ? AND edge_val.branch = ? AND edge_val.turn = ? AND edge_val.tick = ?",
    "edge_val_del_time": "DELETE FROM edge_val WHERE edge_val.branch = ? AND edge_val.turn = ? AND edge_val.tick = ?",
    "edge_val_dump": "SELECT edge_val.graph, edge_val.orig, edge_val.dest, edge_val.idx, edge_val.\"key\", edge_val.branch, edge_val.turn, edge_val.tick, edge_val.value \nFROM edge_val ORDER BY edge_val.branch, edge_val.turn, edge_val.tick",
    "edge_val_insert": "INSERT INTO edge_val (graph, orig, dest, idx, \"key\", branch, turn, tick, value) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)",
    "edges_count": "SELECT count(?) AS count_1 \nFROM edges",
    "edges_del": "DELETE FROM edges WHERE edges.graph = ? AND edges.orig = ? AND edges.dest = ? AND edges.idx = ? AND edges.branch = ? AND edges.turn = ? AND edges.tick = ?",
    "edges_del_time": "DELETE FROM edges WHERE edges.branch = ? AND edges.turn = ? AND edges.tick = ?",
    "edges_dump": "SELECT edges.graph, edges.orig, edges.dest, edges.idx, edges.branch, edges.turn, edges.tick, edges.extant \nFROM edges ORDER BY edges.branch, edges.turn, edges.tick",
    "edges_insert": "INSERT INTO edges (graph, orig, dest, idx, branch, turn, tick, extant) VALUES (?, ?, ?, ?, ?, ?, ?, ?)",
    "get_keyframe": "SELECT keyframes.nodes, keyframes.edges, keyframes.graph_val \nFROM keyframes \nWHERE keyframes.graph = ? AND keyframes.branch = ? AND keyframes.turn = ? AND keyframes.tick = ?",
    "global_count": "SELECT count(?) AS count_1 \nFROM global",
    "global_del": "DELETE FROM global WHERE global.\"key\" = ?",
    "global_delete": "DELETE FROM global WHERE global.\"key\" = ?",
    "global_dump": "SELECT global.\"key\", global.value \nFROM global ORDER BY global.\"key\"",
    "global_get": "SELECT global.value \nFROM global \nWHERE global.\"key\" = ?",
    "global_insert": "INSERT INTO global (\"key\", value) VALUES (?, ?)",
    "global_update": "UPDATE global SET value=? WHERE global.\"key\" = ?",
    "graph_type": "SELECT graphs.type \nFROM graphs \nWHERE graphs.graph = ?",
    "graph_val_count": "SELECT count(?) AS count_1 \nFROM graph_val",
    "graph_val_del": "DELETE FROM graph_val WHERE graph_val.graph = ? AND graph_val.\"key\" = ? AND graph_val.branch = ? AND graph_val.turn = ? AND graph_val.tick = ?",
    "graph_val_del_time": "DELETE FROM graph_val WHERE graph_val.branch = ? AND graph_val.turn = ? AND graph_val.tick = ?",
    "graph_val_dump": "SELECT graph_val.graph, graph_val.\"key\", graph_val.branch, graph_val.turn, graph_val.tick, graph_val.value \nFROM graph_val ORDER BY graph_val.branch, graph_val.turn, graph_val.tick",
    "graph_val_insert": "INSERT INTO graph_val (graph, \"key\", branch, turn, tick, value) VALUES (?, ?, ?, ?, ?, ?)",
    "graphs_count": "SELECT count(?) AS count_1 \nFROM graphs",
    "graphs_del": "DELETE FROM graphs WHERE graphs.graph = ?",
    "graphs_dump": "SELECT graphs.graph, graphs.type \nFROM graphs ORDER BY graphs.graph",
    "graphs_insert": "INSERT INTO graphs (graph, type) VALUES (?, ?)",
    "graphs_named": "SELECT count(*) AS count_1 \nFROM graphs \nWHERE graphs.graph = ?",
    "graphs_types": "SELECT graphs.graph, graphs.type \nFROM graphs",
    "keyframes_count": "SELECT count(?) AS count_1 \nFROM keyframes",
    "keyframes_del": "DELETE FROM keyframes WHERE keyframes.graph = ? AND keyframes.branch = ? AND keyframes.turn = ? AND keyframes.tick = ?",
    "keyframes_del_time": "DELETE FROM keyframes WHERE keyframes.branch = ? AND keyframes.turn = ? AND keyframes.tick = ?",
    "keyframes_dump": "SELECT keyframes.graph, keyframes.branch, keyframes.turn, keyframes.tick, keyframes.nodes, keyframes.edges, keyframes.graph_val \nFROM keyframes ORDER BY keyframes.branch, keyframes.turn, keyframes.tick",
    "keyframes_insert": "INSERT INTO keyframes (graph, branch, turn, tick, nodes, edges, graph_val) VALUES (?, ?, ?, ?, ?, ?, ?)",
    "keyframes_list": "SELECT keyframes.graph, keyframes.branch, keyframes.turn, keyframes.tick \nFROM keyframes",
    "load_edge_val_tick_to_end": "SELECT edge_val.orig, edge_val.dest, edge_val.idx, edge_val.\"key\", edge_val.turn, edge_val.tick, edge_val.value \nFROM edge_val \nWHERE edge_val.graph = ? AND edge_val.branch = ? AND (edge_val.turn > ? OR edge_val.turn = ? AND edge_val.tick >= ?)",
    "load_edge_val_tick_to_tick": "SELECT edge_val.orig, edge_val.dest, edge_val.idx, edge_val.\"key\", edge_val.turn, edge_val.tick, edge_val.value \nFROM edge_val \nWHERE edge_val.graph = ? AND edge_val.branch = ? AND (edge_val.turn > ? OR edge_val.turn = ? AND edge_val.tick >= ?) AND (edge_val.turn < ? OR edge_val.turn = ? AND edge_val.tick <= ?)",
    "load_edges_tick_to_end": "SELECT edges.orig, edges.dest, edges.idx, edges.turn, edges.tick, edges.extant \nFROM edges \nWHERE edges.graph = ? AND edges.branch = ? AND (edges.turn > ? OR edges.turn = ? AND edges.tick >= ?)",
    "load_edges_tick_to_tick": "SELECT edges.orig, edges.dest, edges.idx, edges.turn, edges.tick, edges.extant \nFROM edges \nWHERE edges.graph = ? AND edges.branch = ? AND (edges.turn > ? OR edges.turn = ? AND edges.tick >= ?) AND (edges.turn < ? OR edges.turn = ? AND edges.tick <= ?)",
    "load_graph_val_tick_to_end": "SELECT graph_val.\"key\", graph_val.turn, graph_val.tick, graph_val.value \nFROM graph_val \nWHERE graph_val.graph = ? AND graph_val.branch = ? AND (graph_val.turn > ? OR graph_val.turn = ? AND graph_val.tick >= ?)",
    "load_graph_val_tick_to_tick": "SELECT graph_val.\"key\", graph_val.turn, graph_val.tick, graph_val.value \nFROM graph_val \nWHERE graph_val.graph = ? AND graph_val.branch = ? AND (graph_val.turn > ? OR graph_val.turn = ? AND graph_val.tick >= ?) AND (graph_val.turn < ? OR graph_val.turn = ? AND graph_val.tick <= ?)",
    "load_node_val_tick_to_end": "SELECT node_val.node, node_val.\"key\", node_val.turn, node_val.tick, node_val.value \nFROM node_val \nWHERE node_val.graph = ? AND node_val.branch = ? AND (node_val.turn > ? OR node_val.turn = ? AND node_val.tick >= ?)",
    "load_node_val_tick_to_tick": "SELECT node_val.node, node_val.\"key\", node_val.turn, node_val.tick, node_val.value \nFROM node_val \nWHERE node_val.graph = ? AND node_val.branch = ? AND (node_val.turn > ? OR node_val.turn = ? AND node_val.tick >= ?) AND (node_val.turn < ? OR node_val.turn = ? AND node_val.tick <= ?)",
    "load_nodes_tick_to_end": "SELECT nodes.node, nodes.turn, nodes.tick, nodes.extant \nFROM nodes \nWHERE nodes.graph = ? AND nodes.branch = ? AND (nodes.turn > ? OR nodes.turn = ? AND nodes.tick >= ?)",
    "load_nodes_tick_to_tick": "SELECT nodes.node, nodes.turn, nodes.tick, nodes.extant \nFROM nodes \nWHERE nodes.graph = ? AND nodes.branch = ? AND (nodes.turn > ? OR nodes.turn = ? AND nodes.tick >= ?) AND (nodes.turn < ? OR nodes.turn = ? AND nodes.tick <= ?)",
    "load_things_tick_to_end": "SELECT things.thing, things.turn, things.tick, things.location \nFROM things \nWHERE things.character = ? AND things.branch = ? AND (things.turn > ? OR things.turn = ? AND things.tick >= ?)",
    "load_things_tick_to_tick": "SELECT things.thing, things.turn, things.tick, things.location \nFROM things \nWHERE things.character = ? AND things.branch = ? AND (things.turn > ? OR things.turn = ? AND things.tick >= ?) AND (things.turn < ? OR things.turn = ? AND things.tick <= ?)",
    "node_rulebook_count": "SELECT count(?) AS count_1 \nFROM node_rulebook",
    "node_rulebook_del": "DELETE FROM node_rulebook WHERE node_rulebook.character = ? AND node_rulebook.node = ? AND node_rulebook.branch = ? AND node_rulebook.turn = ? AND node_rulebook.tick = ?",
    "node_rulebook_del_time": "DELETE FROM node_rulebook WHERE node_rulebook.branch = ? AND node_rulebook.turn = ? AND node_rulebook.tick = ?",
    "node_rulebook_dump": "SELECT node_rulebook.character, node_rulebook.node, node_rulebook.branch, node_rulebook.turn, node_rulebook.tick, node_rulebook.rulebook \nFROM node_rulebook ORDER BY node_rulebook.branch, node_rulebook.turn, node_rulebook.tick",
    "node_rulebook_insert": "INSERT INTO node_rulebook (character, node, branch, turn, tick, rulebook) VALUES (?, ?, ?, ?, ?, ?)",
    "node_rules_handled_count": "SELECT count(?) AS count_1 \nFROM node_rules_handled",
    "node_rules_handled_del": "DELETE FROM node_rules_handled WHERE node_rules_handled.character = ? AND node_rules_handled.node = ? AND node_rules_handled.rulebook = ? AND node_rules_handled.rule = ? AND node_rules_handled.branch = ? AND node_rules_handled.turn = ?",
    "node_rules_handled_dump": "SELECT node_rules_handled.character, node_rules_handled.node, node_rules_handled.rulebook, node_rules_handled.rule, node_rules_handled.branch, node_rules_handled.turn, node_rules_handled.tick \nFROM node_rules_handled ORDER BY node_rules_handled.character, node_rules_handled.node, node_rules_handled.rulebook, node_rules_handled.rule, node_rules_handled.branch, node_rules_handled.turn",
    "node_rules_handled_insert": "INSERT INTO node_rules_handled (character, node, rulebook, rule, branch, turn, tick) VALUES (?, ?, ?, ?, ?, ?, ?)",
    "node_val_count": "SELECT count(?) AS count_1 \nFROM node_val",
    "node_val_del": "DELETE FROM node_val WHERE node_val.graph = ? AND node_val.node = ? AND node_val.\"key\" = ? AND node_val.branch = ? AND node_val.turn = ? AND node_val.tick = ?",
    "node_val_del_time": "DELETE FROM node_val WHERE node_val.branch = ? AND node_val.turn = ? AND node_val.tick = ?",
    "node_val_dump": "SELECT node_val.graph, node_val.node, node_val.\"key\", node_val.branch, node_val.turn, node_val.tick, node_val.value \nFROM node_val ORDER BY node_val.branch, node_val.turn, node_val.tick",
    "node_val_insert": "INSERT INTO node_val (graph, node, \"key\", branch, turn, tick, value) VALUES (?, ?, ?, ?, ?, ?, ?)",
    "nodes_count": "SELECT count(?) AS count_1 \nFROM nodes",
    "nodes_del": "DELETE FROM nodes WHERE nodes.graph = ? AND nodes.node = ? AND nodes.branch = ? AND nodes.turn = ? AND nodes.tick = ?",
    "nodes_del_time": "DELETE FROM nodes WHERE nodes.branch = ? AND nodes.turn = ? AND nodes.tick = ?",
    "nodes_dump": "SELECT nodes.graph, nodes.node, nodes.branch, nodes.turn, nodes.tick, nodes.extant \nFROM nodes ORDER BY nodes.branch, nodes.turn, nodes.tick",
    "nodes_insert": "INSERT INTO nodes (graph, node, branch, turn, tick, extant) VALUES (?, ?, ?, ?, ?, ?)",
    "plan_ticks_count": "SELECT count(?) AS count_1 \nFROM plan_ticks",
    "plan_ticks_del": "DELETE FROM plan_ticks WHERE plan_ticks.plan_id = ? AND plan_ticks.turn = ? AND plan_ticks.tick = ?",
    "plan_ticks_dump": "SELECT plan_ticks.plan_id, plan_ticks.turn, plan_ticks.tick \nFROM plan_ticks ORDER BY plan_ticks.plan_id, plan_ticks.turn, plan_ticks.tick",
    "plan_ticks_insert": "INSERT INTO plan_ticks (plan_id, turn, tick) VALUES (?, ?, ?)",
    "plans_count": "SELECT count(?) AS count_1 \nFROM plans",
    "plans_del": "DELETE FROM plans WHERE plans.id = ?",
    "plans_dump": "SELECT plans.id, plans.branch, plans.turn, plans.tick \nFROM plans ORDER BY plans.id",
    "plans_insert": "INSERT INTO plans (id, branch, turn, tick) VALUES (?, ?, ?, ?)",
    "portal_rulebook_count": "SELECT count(?) AS count_1 \nFROM portal_rulebook",
    "portal_rulebook_del": "DELETE FROM portal_rulebook WHERE portal_rulebook.character = ? AND portal_rulebook.orig = ? AND portal_rulebook.dest = ? AND portal_rulebook.branch = ? AND portal_rulebook.turn = ? AND portal_rulebook.tick = ?",
    "portal_rulebook_del_time": "DELETE FROM portal_rulebook WHERE portal_rulebook.branch = ? AND portal_rulebook.turn = ? AND portal_rulebook.tick = ?",
    "portal_rulebook_dump": "SELECT portal_rulebook.character, portal_rulebook.orig, portal_rulebook.dest, portal_rulebook.branch, portal_rulebook.turn, portal_rulebook.tick, portal_rulebook.rulebook \nFROM portal_rulebook ORDER BY portal_rulebook.branch, portal_rulebook.turn, portal_rulebook.tick",
    "portal_rulebook_insert": "INSERT INTO portal_rulebook (character, orig, dest, branch, turn, tick, rulebook) VALUES (?, ?, ?, ?, ?, ?, ?)",
    "portal_rules_handled_count": "SELECT count(?) AS count_1 \nFROM portal_rules_handled",
    "portal_rules_handled_del": "DELETE FROM portal_rules_handled WHERE portal_rules_handled.character = ? AND portal_rules_handled.orig = ? AND portal_rules_handled.dest = ? AND portal_rules_handled.rulebook = ? AND portal_rules_handled.rule = ? AND portal_rules_handled.branch = ? AND portal_rules_handled.turn = ?",
    "portal_rules_handled_dump": "SELECT portal_rules_handled.character, portal_rules_handled.orig, portal_rules_handled.dest, portal_rules_handled.rulebook, portal_rules_handled.rule, portal_rules_handled.branch, portal_rules_handled.turn, portal_rules_handled.tick \nFROM portal_rules_handled ORDER BY portal_rules_handled.character, portal_rules_handled.orig, portal_rules_handled.dest, portal_rules_handled.rulebook, portal_rules_handled.rule, portal_rules_handled.branch, portal_rules_handled.turn",
    "portal_rules_handled_insert": "INSERT INTO portal_rules_handled (character, orig, dest, rulebook, rule, branch, turn, tick) VALUES (?, ?, ?, ?, ?, ?, ?, ?)",
    "rule_actions_count": "SELECT count(?) AS count_1 \nFROM rule_actions",
    "rule_actions_del": "DELETE FROM rule_actions WHERE rule_actions.rule = ? AND rule_actions.branch = ? AND rule_actions.turn = ? AND rule_actions.tick = ?",
    "rule_actions_del_time": "DELETE FROM rule_actions WHERE rule_actions.branch = ? AND rule_actions.turn = ? AND rule_actions.tick = ?",
    "rule_actions_dump": "SELECT rule_actions.rule, rule_actions.branch, rule_actions.turn, rule_actions.tick, rule_actions.actions \nFROM rule_actions ORDER BY rule_actions.branch, rule_actions.turn, rule_actions.tick",
    "rule_actions_insert": "INSERT INTO rule_actions (rule, branch, turn, tick, actions) VALUES (?, ?, ?, ?, ?)",
    "rule_prereqs_count": "SELECT count(?) AS count_1 \nFROM rule_prereqs",
    "rule_prereqs_del": "DELETE FROM rule_prereqs WHERE rule_prereqs.rule = ? AND rule_prereqs.branch = ? AND rule_prereqs.turn = ? AND rule_prereqs.tick = ?",
    "rule_prereqs_del_time": "DELETE FROM rule_prereqs WHERE rule_prereqs.branch = ? AND rule_prereqs.turn = ? AND rule_prereqs.tick = ?",
    "rule_prereqs_dump": "SELECT rule_prereqs.rule, rule_prereqs.branch, rule_prereqs.turn, rule_prereqs.tick, rule_prereqs.prereqs \nFROM rule_prereqs ORDER BY rule_prereqs.branch, rule_prereqs.turn, rule_prereqs.tick",
    "rule_prereqs_insert": "INSERT INTO rule_prereqs (rule, branch, turn, tick, prereqs) VALUES (?, ?, ?, ?, ?)",
    "rule_triggers_count": "SELECT count(?) AS count_1 \nFROM rule_triggers",
    "rule_triggers_del": "DELETE FROM rule_triggers WHERE rule_triggers.rule = ? AND rule_triggers.branch = ? AND rule_triggers.turn = ? AND rule_triggers.tick = ?",
    "rule_triggers_del_time": "DELETE FROM rule_triggers WHERE rule_triggers.branch = ? AND rule_triggers.turn = ? AND rule_triggers.tick = ?",
    "rule_triggers_dump": "SELECT rule_triggers.rule, rule_triggers.branch, rule_triggers.turn, rule_triggers.tick, rule_triggers.triggers \nFROM rule_triggers ORDER BY rule_triggers.branch, rule_triggers.turn, rule_triggers.tick",
    "rule_triggers_insert": "INSERT INTO rule_triggers (rule, branch, turn, tick, triggers) VALUES (?, ?, ?, ?, ?)",
    "rulebooks_count": "SELECT count(?) AS count_1 \nFROM rulebooks",
    "rulebooks_del": "DELETE FROM rulebooks WHERE rulebooks.rulebook = ? AND rulebooks.branch = ? AND rulebooks.turn = ? AND rulebooks.tick = ?",
    "rulebooks_del_time": "DELETE FROM rulebooks WHERE rulebooks.branch = ? AND rulebooks.turn = ? AND rulebooks.tick = ?",
    "rulebooks_dump": "SELECT rulebooks.rulebook, rulebooks.branch, rulebooks.turn, rulebooks.tick, rulebooks.rules \nFROM rulebooks ORDER BY rulebooks.branch, rulebooks.turn, rulebooks.tick",
    "rulebooks_insert": "INSERT INTO rulebooks (rulebook, branch, turn, tick, rules) VALUES (?, ?, ?, ?, ?)",
    "rulebooks_update": "UPDATE rulebooks SET rules=? WHERE rulebooks.rulebook = ? AND rulebooks.branch = ? AND rulebooks.turn = ? AND rulebooks.tick = ?",
    "rules_count": "SELECT count(?) AS count_1 \nFROM rules",
    "rules_del": "DELETE FROM rules WHERE rules.rule = ?",
    "rules_dump": "SELECT rules.rule \nFROM rules ORDER BY rules.rule",
    "rules_insert": "INSERT INTO rules (rule) VALUES (?)",
    "things_count": "SELECT count(?) AS count_1 \nFROM things",
    "things_del": "DELETE FROM things WHERE things.character = ? AND things.thing = ? AND things.branch = ? AND things.turn = ? AND things.tick = ?",
    "things_del_time": "DELETE FROM things WHERE things.branch = ? AND things.turn = ? AND things.tick = ?",
    "things_dump": "SELECT things.character, things.thing, things.branch, things.turn, things.tick, things.location \nFROM things ORDER BY things.branch, things.turn, things.tick",
    "things_insert": "INSERT INTO things (character, thing, branch, turn, tick, location) VALUES (?, ?, ?, ?, ?, ?)",
    "turns_completed_count": "SELECT count(?) AS count_1 \nFROM turns_completed",
    "turns_completed_del": "DELETE FROM turns_completed WHERE turns_completed.branch = ?",
    "turns_completed_dump": "SELECT turns_completed.branch, turns_completed.turn \nFROM turns_completed ORDER BY turns_completed.branch",
    "turns_completed_insert": "INSERT INTO turns_completed (branch, turn) VALUES (?, ?)",
    "turns_completed_update": "UPDATE turns_completed SET turn=? WHERE turns_completed.branch = ?",
    "turns_count": "SELECT count(?) AS count_1 \nFROM turns",
    "turns_del": "DELETE FROM turns WHERE turns.branch = ? AND turns.turn = ?",
    "turns_dump": "SELECT turns.branch, turns.turn, turns.end_tick, turns.plan_end_tick \nFROM turns ORDER BY turns.branch, turns.turn",
    "turns_insert": "INSERT INTO turns (branch, turn, end_tick, plan_end_tick) VALUES (?, ?, ?, ?)",
    "universals_count": "SELECT count(?) AS count_1 \nFROM universals",
    "universals_del": "DELETE FROM universals WHERE universals.\"key\" = ? AND universals.branch = ? AND universals.turn = ? AND universals.tick = ?",
    "universals_del_time": "DELETE FROM universals WHERE universals.branch = ? AND universals.turn = ? AND universals.tick = ?",
    "universals_dump": "SELECT universals.\"key\", universals.branch, universals.turn, universals.tick, universals.value \nFROM universals ORDER BY universals.branch, universals.turn, universals.tick",
    "universals_insert": "INSERT INTO universals (\"key\", branch, turn, tick, value) VALUES (?, ?, ?, ?, ?)",
    "update_branches": "UPDATE branches SET parent=?, parent_turn=?, parent_tick=?, end_turn=?, end_tick=? WHERE branches.branch = ?",
    "update_turns": "UPDATE turns SET end_tick=?, plan_end_tick=? WHERE turns.branch = ? AND turns.turn = ?"
}

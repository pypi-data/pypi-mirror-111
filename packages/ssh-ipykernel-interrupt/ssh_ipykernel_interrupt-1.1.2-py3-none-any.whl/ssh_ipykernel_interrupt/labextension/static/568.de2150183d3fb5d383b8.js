(self.webpackChunkinterrupt_ssh_ipykernel=self.webpackChunkinterrupt_ssh_ipykernel||[]).push([[568],{568:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>p});var o,s=t(129),r=t(120),i=t(331),c=t(66),a=t(751),l=t(669),u=t(730);class h{set kernel_id(e){this._kernel_id=e}set kernel_name(e){this._kernel_name=e}createNew(e,n){return this._button=new r.ToolbarButton({className:"interrupt remote kernel",icon:l.runningIcon,onClick:()=>{console.info("InterruptButtonExtension: Interrupt clicked (kernel: "+this._kernel_name+")"),"SSH"===this._kernel_name.substring(0,3)?o.interrupt({id:this._kernel_id}):(0,r.showErrorMessage)("Error interrupting remote kernel","This is not a remote ssh_ipykernel")},tooltip:"Interrupt the remote kernel"}),e.toolbar.insertItem(7,"remoteInterrupt",this._button),new s.DisposableDelegate((()=>{this._button.dispose()}))}}!function(e){const n=c.ServerConnection.makeSettings();e.interrupt=async function({id:e}){const t=await async function(e,t){console.info("Ssh-ipykernel: InterruptRequest - Requesting interrupt for id",t);var o=i.URLExt.join(n.baseUrl,"interrupt");return o=o+"?id="+t,c.ServerConnection.makeRequest(o,{},n)}(0,e);if(t.ok){var o=await t.json();0==o.code?console.info("Ssh-ipykernel: InterruptRequest = Success"):console.error("Ssh-ipykernel: InterruptRequest = Error",o)}else console.error("Ssh-ipykernel: Interrupt response = Error",t)}}(o||(o={}));class k{constructor(e,n,t){this._extension=e,this._notebookTracker=n,t.restored.then((e=>{this._notebookTracker.forEach((e=>{e.isVisible&&(console.debug("Ssh-ipykernel: select open notebook"),this.update(1,e.sessionContext))})),this._notebookTracker.currentChanged.connect(((e,n)=>{console.debug("Ssh-ipykernel: selected notebook changed"),this.update(2)})),t.currentChanged.connect(((e,n)=>{const{oldValue:t,newValue:o}=n;t&&t.sessionContext.connectionStatusChanged.disconnect(this.onConnectionStatusChange),o&&o.sessionContext.connectionStatusChanged.connect(this.onConnectionStatusChange,this)}))}))}onConnectionStatusChange(e,n){console.debug("Ssh-ipykernel: kernel state changed "+n),"disconnected"==n?this.cleanup():"connected"==n&&this.update(3)}cleanup(){console.info("Ssh-ipykernel: cleanup"),this._extension.kernel_id="",this._extension.kernel_name=""}update(e,n=null){n||(n=this._notebookTracker.currentWidget.sessionContext),n.ready.then((()=>{if(n.session){var t=n.session.kernel.id,o=n.kernelDisplayName,s=n.session.path;console.info("Ssh-ipykernel: update('"+e+"'): '"+o+"', '"+t+"', '"+s+"'"),this._extension.kernel_id=t,this._extension.kernel_name=o}else this.cleanup()})).catch((e=>{console.error("Ssh-ipykernel: update error ",e),this.cleanup()}))}}const p={id:"interrupt-ipykernel-extension",requires:[a.INotebookTracker,u.ILabShell],autoStart:!0,activate:function(e,n,t){let o=new h;e.docRegistry.addWidgetExtension("Notebook",o),new k(o,n,t),console.log("ssh_ipykernel interrupt extension actived")}}}}]);
Metadata-Version: 2.1
Name: openide
Version: 0.0.1
Summary: Python implementation of openide/Netbeans Platform concepts
Home-page: https://github.com/AxelVoitier/openide
Author: Axel Voitier
Author-email: axel.voitier@gmail.com
License: MPLv2
Platform: UNKNOWN
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)
Classifier: Programming Language :: Python :: 3
Classifier: Topic :: Desktop Environment
Classifier: Topic :: Software Development :: User Interfaces
Classifier: Topic :: Text Editors :: Integrated Development Environments (IDE)
Requires-Python: ~=3.7
Description-Content-Type: text/markdown
Requires-Dist: PySide2
Requires-Dist: PyYaml
Requires-Dist: lookups
Requires-Dist: observable
Requires-Dist: qtpy
Provides-Extra: dev
Requires-Dist: check-manifest ; extra == 'dev'
Requires-Dist: flake8 ; extra == 'dev'
Requires-Dist: mypy ; extra == 'dev'
Requires-Dist: pytest ; extra == 'dev'
Requires-Dist: pytest-cov ; extra == 'dev'
Requires-Dist: pytest-html ; extra == 'dev'

# OpenIDE
Python implementation of openide/Netbeans Platform concepts

In a Very protozoic form right now. Checkout the nbm-selection-01 tutorial to grasp how to use the framework.

Individual Contributors
=======================

A list of people who have contributed to OpenIDE in order of their first
contribution.

Format: ```Name-or-Well-known-alias <email@domain.tld> (url)```

* Axel Voitier <axel.voitier@gmail.com>

Please, add yourself when you contribute!

CHANGELOG
=========

0.0.1 - 30 June 2021
--------------------

- Initial dump of code
- Working Netbeans Selection Tutorial part 1
- A setuptools egg-info hook to generate openide.yaml file from
decorated classes in our and clients modules
- An egg-info lookup instance loader
- A global context (ie. focus aware) lookup
- The main lookup of the application (loaded by Lookup.get_default())
- Some ability to decorate a class as a service, with singleton
auto-loading from default/main lookup
- Basic setup of an application, with a very basic life-cycle
- Minimal implementation of TopComponent:
  - registration
  - open action
  - component lookup
  - activation
  - show/hide events
  - preferred ID
  - icon
  - and few other properties
- A context (ie. focus) tracker, in charge of updating the global
context lookup
- A main window implementation, connecting all those parts to form an
application following which top components are declared in the local
installation. Does handle:
  - locations of top components in the main
window
  - basic docking
  - loads up declared actions in menus
  - loads up top
components declared as open at startup
  - track focus and update the
context tracker
  - handle opening, closing and activation of top
components



#!/usr/bin/env python3
# This file is placed in the Public Domain.

import os
import pwd
import shutil
import sys
import termios

from bot.clt import Client
from bot.krn import Kernel, kcmd, root
from bot.obj import cdir, cfg
from bot.ver import __version__

import bot.all

all = "adm,cms,fnd,irc,krn,log,rss,tdo,ver"
name = "botd"
resume = {}

class CLI(Client):

    def __init__(self):
        super().__init__()
        self.initialize(kcmd)

    def raw(self, txt):
        print(txt)

def daemon():
    pid = os.fork()
    if pid != 0:
        termreset()
        os._exit(0)
    os.setsid()
    os.umask(0)
    si = open("/dev/null", 'r')
    so = open("/dev/null", 'a+')
    se = open("/dev/null", 'a+')
    os.dup2(si.fileno(), sys.stdin.fileno())
    os.dup2(so.fileno(), sys.stdout.fileno())
    os.dup2(se.fileno(), sys.stderr.fileno())

def privileges(name):
    if os.getuid() != 0:
        return
    try:
        pwn = pwd.getpwnam(name)
    except KeyError:
        return
    os.setgroups([])
    os.setgid(pwn.pw_gid)
    os.setuid(pwn.pw_uid)
    old_umask = os.umask(0o22)
    return True

def termsetup(fd):
    return termios.tcgetattr(fd)

def termreset():
    if "old" in resume:
        try:
            termios.tcsetattr(resume["fd"], termios.TCSADRAIN, resume["old"])
        except termios.error:
            pass

def termsave():
    try:
        resume["fd"] = sys.stdin.fileno()
        resume["old"] = termsetup(sys.stdin.fileno())
        atexit.register(termreset)
    except termios.error:
        pass

def main():
    cfg.wd = "/var/lib/%s/" % name
    k = Kernel()
    k.parse()
    k.boot(name, __version__)
    k.regs(all)
    if k.cfg.txt:
        c = CLI()
        e = c.event(k.cfg.otxt)
        kcmd(c, e)
        e.wait()
        return
    if k.opts("d"):
        daemon()
    k.init(all)
    k.wait()

if __name__ == "__main__":
    main()

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_basic.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_auto_examples_plot_basic.py:


======================
Basic Usage of powspec
======================


.. code-block:: python3

    import matplotlib.pyplot as plt
    # sphinx_gallery_thumbnail_path = '_static/demo.png'
    import astropy.units as u
    from astropy.convolution import Gaussian2DKernel
    from astropy.visualization import quantity_support

    import numpy as np
    from powspec.powspec import power_spectral_density
    from powspec.utils.generator import gen_pkfield, gen_psffield


    quantity_support()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <astropy.visualization.units.quantity_support.<locals>.MplQuantityConverter object at 0x7f87c01fa9a0>



Create fake Gaussian field images
---------------------------------

Create a list of fake images with different P(k)



.. code-block:: python3



    res = 1 * u.arcmin
    alphas = [-1, -2, -3]
    images = []
    for alpha in alphas:
        images.append(
            gen_pkfield(npix=1024, alpha=alpha, fknee=0.1 / u.arcmin, res=res) * u.MJy
        )








Compute P(k)
------------

Compute power spectra of each images



.. code-block:: python3


    powspecs = []
    for image in images:
        powspec, k = power_spectral_density(image, res=res)
        powspecs.append(powspec)


    k_mid = np.mean(u.Quantity([k[1:], k[:-1]]), axis=0)








Plots
-----


.. code-block:: python3


    fig = plt.figure()
    gs = fig.add_gridspec(ncols=2, nrows=len(alphas))
    ax_pk = fig.add_subplot(gs[:, 0])

    for i, (image, powspec, alpha) in enumerate(zip(images, powspecs, alphas)):

        ax_pk.loglog(k_mid.to(u.arcmin ** -1), powspec.to(u.MJy ** 2 / u.arcmin ** 2), label=alpha)
        ax = fig.add_subplot(gs[i, 1])
        ax.imshow(image.value, origin="lower")

    plt.show()




.. image:: /auto_examples/images/sphx_glr_plot_basic_001.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/abeelen/Projects/CONCERTO/powspec/examples/plot_basic.py:65: UserWarning: Matplotlib is currently using agg, which is a non-GUI backend, so cannot show the figure.
      plt.show()




Create PSF field image
----------------------

Create a fake catalog of sources


.. code-block:: python3


    n_pix = 1024
    n_sources = 1024*5
    positions = np.random.uniform(0, n_pix, size=(2, n_sources))
    fluxes = np.random.uniform(1, 10, n_sources)
    sigma = 10 # pixels

    image = gen_psffield(positions, fluxes, n_pix, kernel=Gaussian2DKernel(sigma), factor=4) * u.Jy / u.beam








Compute P(k)
------------

Compute power spectra of each images



.. code-block:: python3

    powspec, k = power_spectral_density(image, res=res, range='tight', bins='auto')

    k_mid = np.mean(u.Quantity([k[1:], k[:-1]]), axis=0)








Plots
-----


.. code-block:: python3


    fig, axes = plt.subplots(ncols=2)
    axes[0].imshow(image.value, origin='lower')
    axes[1].loglog(k_mid, powspec)

    def gaussian_pk(k, sigma):
        return np.exp(- (np.pi * k)**2 * (2 * sigma**2) * 2 )

    axes[1].plot(k_mid, gaussian_pk(k_mid, sigma * res) * powspec.max())
    axes[1].set_ylim(np.min(powspec), np.max(powspec))

    fig.show()



.. image:: /auto_examples/images/sphx_glr_plot_basic_002.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/abeelen/Projects/CONCERTO/powspec/examples/plot_basic.py:105: UserWarning: Matplotlib is currently using agg, which is a non-GUI backend, so cannot show the figure.
      fig.show()





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  12.191 seconds)


.. _sphx_glr_download_auto_examples_plot_basic.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_basic.py <plot_basic.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_basic.ipynb <plot_basic.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

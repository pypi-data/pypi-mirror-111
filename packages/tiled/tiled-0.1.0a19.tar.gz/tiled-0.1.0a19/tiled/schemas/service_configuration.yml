# This schema (a jsonschema in YAML format) is used
# for validating configuration.
#
# This schema is also used by our documentation system to build the
# service configuration reference section based on the description fields. See
# doc/source/conf.py for that logic!
#
# We look to document everything we have default values for in values.yaml, but
# we don't look to enforce the perfect validation logic within this file.
#
# ref: https://json-schema.org/learn/getting-started-step-by-step.html
#
$schema": http://json-schema.org/draft-07/schema#
type: object
additionalProperties: false
required:
  - catalogs
properties:
  catalogs:
    description: |
      This section contains a *list* of one or more items,
      each describing a Catalog to be served.
    type: array
    items:
      type: object
      required:
        - catalog
        - path
      additionalProperties: false
      properties:
        catalog:
          type: string
          description: |
            Type of catalog to serve. This may be:

            - The string `files`, a shorthand for serving a directory of files.
            - An import path to a Catalog *instance*.
            - An import path to a callable (function or type) that returns a
              Catalog. For these, the `args:` parameter below must be used as well.

            In an import path, packages/modules are separated by dots,
            and the object itself it separated by a colon.

            Examples:

                # Catalog instances
                tiled.examples.generated_minimal:catalog
                tiled examples.generated:demo
                my_python_module:my_catalog_instance

                # Callables that return Catalog instances
                tiled.catalogs.files:Catalog.from_directory
                my_python_module:CustomCatalog

        path:
          type: string
          description: |
            URL subpath for to serve this Catalog on.
            A good default choice is `"/"` if you are serving
            one Catalog.
        args:
          type: [object, "null"]
          additionalProperties: true
          description: |
            If `catalog:` is set to `files` or some callable that returns a
            Catalog, this parameter must be included. It may contain named
            arguments to pass to the callable. It may be empty or `null` if the
            callable requires no arguments.

            Example:

            ```yaml
            - path: "/"
              catalog: tiled.catalogs.files:Catalog.from_directory
              args:
                directory: "path/to/files"
            ```

  authentication:
    type: [object, "null"]
    additionalProperties: false
    properties:
      authenticator:
        type: string
        description: |
          Type of Authenticator to use.
          
          These are typically from the tiled.authenticators module,
          though user-defined ones may be used as well.

          This is given as an import path. In an import path, packages/modules
          are separated by dots, and the object itself it separated by a colon.

          Example:

          ```yaml
          authenticator: tiled.examples.DummyAuthenticator
          ```
      args:
        type: [object, "null"]
        description: |
          Named arguments to pass to Authenticator. If there are none,
          `args` may be omitted or empty.
    
          Example:

          ```yaml
          authenticator: tiled.examples.PAMAuthenticator
          args:
            service: "custom_service"
          ```
      secret_keys:
        type: array
        items:
          type: string
        description: |
          Secret keys used to sign secure tokens.

          When generating a secret, is important to produce a difficult-to-guess
          random number, and make it different each time you start up a server.
          Two equally good ways to generate a secure secret...

          With ``openssl``:

              openssl rand -hex 32

          With ``python``:

              python -c "import secrets; print(secrets.token_hex(32))"

      allow_anonymous_access:
        type: boolean
        description: |
          If true, allow unauthenticated, public access to any entries
          that are not specifically controlled with an access policy.

          Default is false.
      
      single_user_api_key:
        type: string
        description: |
          Secret API key used in single-user deployments.

          When generating a secret, is important to produce a difficult-to-guess
          random number, and make it different each time you start up a server.
          Two equally good ways to generate a secure secret...

          With ``openssl``:

              openssl rand -hex 32

          With ``python``:

              python -c "import secrets; print(secrets.token_hex(32))"
            
      access_token_max_age:  
        type: number
        description: |
          This controls how often fresh access token have to be
          re-issued. The process is transparent to the user and just affects performance.
          An *access* token cannot be revoked, so its lifetime should be short. The
          default is 900 seconds (15 minutes).
          
          Units are **seconds**.
      refresh_token_max_age:
        type: number
        description: |
          Time after which inactive sessions
          (sessions that have not refreshed tokens) will time out.
          Default is

          Units are **seconds**.
      session_max_age: 
        type: [number, "null"]
        description: |
          Even *active* sessions are timed out after this
          limit, and the user is required to resubmit credentials. By default,
          this is unset and active session are never shut down.
    description:
      This section describes whether and how to authenticate users.
  allow_origins:
    type: array
    items:
      type: string
    description: |
        This list of domains enables web apps served from other domains to make
        requests to the tiled serve.

        Example:

        ```yaml
        allow_origins:
          - https://chart-studio.plotly.com
        ```

        Read more about Cross-Origin Resource Sharing (CORS)
        from Mozilla's web developer documentation.

        https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS
  uvicorn:
    type: object
    properties:
      host:
        type: string
        description: |
          Bind socket to this host. Use `--host 0.0.0.0` to make the application
          available on your local network. IPv6 addresses are supported, for
          for example --host `'::'`. Default `'127.0.0.1'`.
      port:
        type: integer
        description: Bind to a socket with this port. Default `8000`.
      workers:
        type: integer
        description: |
          Use multiple worker processes. Defaults to the `$WEB_CONCURRENCY`
          environment variable if available, or `1`.
      root_path:
        type: string
        description: |
          Configure the application with a root_path when it is behind a proxy
          serving it on some path prefix.
      ssl_keyfile:
        type: string
        description: SSL key file
      ssl_certfile:
        type: string
        description: SSL certificate file
      ssl_keyfile_password:
        type: string
        description: SSL keyfile password
      ssl_version:
        type: integer
        description: SSL version to use (see stdlib ssl module's). Default 2.
      ssl_cert_reqs:
        type: integer
        description: Whether client certificate is required (see stdlib ssl module's). Default 0.
      ssl_ca_certs:
        type: string
        description: CA certificates file
      ssl_ciphers:
        type: string
        description: Ciphers to use (see stdlib ssl module's). Default TLSv1.

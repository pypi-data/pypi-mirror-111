#!/usr/bin/env python3
# This file is placed in the Public Domain.

"EVRM"

import os, sys
sys.path.insert(0, os.getcwd())
sys.path.insert(0, "lib")

import atexit
import ob
import os
import sys
import termios

ob.wd = os.path.expanduser("~/.evrm")

from ob import Handler, Kernel

k = Kernel()
k.cfg.p = "evrm"
k.cfg.m = ""
resume = {}

def init(k):
    c = Console()
    ob.launch(c.start)
    return

class CLI(Handler):

    def error(self, e):
        print(e.exc)
        raise ob.Restart

    def handle(self, e):
        k.put(e)
        e.wait()

    def raw(self, txt):
        print(txt)

class Console(ob.CLI):

    def error(self, e):
        print(e.exc)
        raise Restart

    def handle(self, e):
        k.put(e)
        e.wait()

    def poll(self):
        return input("> ")

    def raw(self, txt):
        print(txt)

def termsetup(fd):
    return termios.tcgetattr(fd)

def termreset():
    if "old" in resume:
        try:
            termios.tcsetattr(resume["fd"], termios.TCSADRAIN, resume["old"])
        except termios.error:
            pass

def termsave():
    try:
        resume["fd"] = sys.stdin.fileno()
        resume["old"] = termsetup(sys.stdin.fileno())
        atexit.register(termreset)
    except termios.error:
        pass

def wrap(func):
    termsave()
    try:
        func()
    except KeyboardInterrupt:
        pass
    finally:
        termreset()

def main():
    k.start()
    if k.cfg.txt:
       cli = CLI()
       return k.cmd(cli, k.cfg.otxt)
    if k.cfg.m:
       csl = Console()
       csl.start()
       k.wait()

wrap(main)

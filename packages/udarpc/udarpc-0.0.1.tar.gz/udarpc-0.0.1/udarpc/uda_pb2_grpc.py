# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import uda_pb2 as uda__pb2


class ExperimentStub(object):
    """实验数据（诊断数据）接口
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Signal = channel.unary_unary(
                '/uda.Experiment/Signal',
                request_serializer=uda__pb2.SignalRequest.SerializeToString,
                response_deserializer=uda__pb2.SignalResponse.FromString,
                )
        self.SignalByTime = channel.unary_unary(
                '/uda.Experiment/SignalByTime',
                request_serializer=uda__pb2.SignalByTimeRequest.SerializeToString,
                response_deserializer=uda__pb2.SignalByTimeResponse.FromString,
                )


class ExperimentServicer(object):
    """实验数据（诊断数据）接口
    """

    def Signal(self, request, context):
        """获取诊断数据信号
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SignalByTime(self, request, context):
        """根据起止时间获取诊断信号
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ExperimentServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Signal': grpc.unary_unary_rpc_method_handler(
                    servicer.Signal,
                    request_deserializer=uda__pb2.SignalRequest.FromString,
                    response_serializer=uda__pb2.SignalResponse.SerializeToString,
            ),
            'SignalByTime': grpc.unary_unary_rpc_method_handler(
                    servicer.SignalByTime,
                    request_deserializer=uda__pb2.SignalByTimeRequest.FromString,
                    response_serializer=uda__pb2.SignalByTimeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'uda.Experiment', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Experiment(object):
    """实验数据（诊断数据）接口
    """

    @staticmethod
    def Signal(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/uda.Experiment/Signal',
            uda__pb2.SignalRequest.SerializeToString,
            uda__pb2.SignalResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SignalByTime(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/uda.Experiment/SignalByTime',
            uda__pb2.SignalByTimeRequest.SerializeToString,
            uda__pb2.SignalByTimeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class MetaStub(object):
    """检索数据(元数据)接口
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SignalList = channel.unary_unary(
                '/uda.Meta/SignalList',
                request_serializer=uda__pb2.SignalListRequest.SerializeToString,
                response_deserializer=uda__pb2.SignalListResponse.FromString,
                )
        self.SingalMeta = channel.unary_unary(
                '/uda.Meta/SingalMeta',
                request_serializer=uda__pb2.SignalMetaRequest.SerializeToString,
                response_deserializer=uda__pb2.SignalMetaResponse.FromString,
                )


class MetaServicer(object):
    """检索数据(元数据)接口
    """

    def SignalList(self, request, context):
        """获取诊断信号列表
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SingalMeta(self, request, context):
        """获取诊断数据元数据
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MetaServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SignalList': grpc.unary_unary_rpc_method_handler(
                    servicer.SignalList,
                    request_deserializer=uda__pb2.SignalListRequest.FromString,
                    response_serializer=uda__pb2.SignalListResponse.SerializeToString,
            ),
            'SingalMeta': grpc.unary_unary_rpc_method_handler(
                    servicer.SingalMeta,
                    request_deserializer=uda__pb2.SignalMetaRequest.FromString,
                    response_serializer=uda__pb2.SignalMetaResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'uda.Meta', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Meta(object):
    """检索数据(元数据)接口
    """

    @staticmethod
    def SignalList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/uda.Meta/SignalList',
            uda__pb2.SignalListRequest.SerializeToString,
            uda__pb2.SignalListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SingalMeta(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/uda.Meta/SingalMeta',
            uda__pb2.SignalMetaRequest.SerializeToString,
            uda__pb2.SignalMetaResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ProjectStub(object):
    """工程数据接口
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SignalMonitor = channel.unary_unary(
                '/uda.Project/SignalMonitor',
                request_serializer=uda__pb2.Empty.SerializeToString,
                response_deserializer=uda__pb2.SignalMonitorResponse.FromString,
                )
        self.SignalMonitorByTime = channel.unary_unary(
                '/uda.Project/SignalMonitorByTime',
                request_serializer=uda__pb2.SignalMonitorByTimeRequest.SerializeToString,
                response_deserializer=uda__pb2.SignalMonitorByTimeResponse.FromString,
                )
        self.SignalMonitorStruct = channel.unary_unary(
                '/uda.Project/SignalMonitorStruct',
                request_serializer=uda__pb2.Empty.SerializeToString,
                response_deserializer=uda__pb2.SignalMonitorStructResponse.FromString,
                )


class ProjectServicer(object):
    """工程数据接口
    """

    def SignalMonitor(self, request, context):
        """获取当前的工程数据
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SignalMonitorByTime(self, request, context):
        """按照时间段获取工程数据
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SignalMonitorStruct(self, request, context):
        """获取工程监控数据存储结构
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ProjectServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SignalMonitor': grpc.unary_unary_rpc_method_handler(
                    servicer.SignalMonitor,
                    request_deserializer=uda__pb2.Empty.FromString,
                    response_serializer=uda__pb2.SignalMonitorResponse.SerializeToString,
            ),
            'SignalMonitorByTime': grpc.unary_unary_rpc_method_handler(
                    servicer.SignalMonitorByTime,
                    request_deserializer=uda__pb2.SignalMonitorByTimeRequest.FromString,
                    response_serializer=uda__pb2.SignalMonitorByTimeResponse.SerializeToString,
            ),
            'SignalMonitorStruct': grpc.unary_unary_rpc_method_handler(
                    servicer.SignalMonitorStruct,
                    request_deserializer=uda__pb2.Empty.FromString,
                    response_serializer=uda__pb2.SignalMonitorStructResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'uda.Project', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Project(object):
    """工程数据接口
    """

    @staticmethod
    def SignalMonitor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/uda.Project/SignalMonitor',
            uda__pb2.Empty.SerializeToString,
            uda__pb2.SignalMonitorResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SignalMonitorByTime(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/uda.Project/SignalMonitorByTime',
            uda__pb2.SignalMonitorByTimeRequest.SerializeToString,
            uda__pb2.SignalMonitorByTimeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SignalMonitorStruct(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/uda.Project/SignalMonitorStruct',
            uda__pb2.Empty.SerializeToString,
            uda__pb2.SignalMonitorStructResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class UserStub(object):
    """用户接口
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Login = channel.unary_unary(
                '/uda.User/Login',
                request_serializer=uda__pb2.LoginRequest.SerializeToString,
                response_deserializer=uda__pb2.LoginResponse.FromString,
                )


class UserServicer(object):
    """用户接口
    """

    def Login(self, request, context):
        """用户登录
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UserServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Login': grpc.unary_unary_rpc_method_handler(
                    servicer.Login,
                    request_deserializer=uda__pb2.LoginRequest.FromString,
                    response_serializer=uda__pb2.LoginResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'uda.User', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class User(object):
    """用户接口
    """

    @staticmethod
    def Login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/uda.User/Login',
            uda__pb2.LoginRequest.SerializeToString,
            uda__pb2.LoginResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

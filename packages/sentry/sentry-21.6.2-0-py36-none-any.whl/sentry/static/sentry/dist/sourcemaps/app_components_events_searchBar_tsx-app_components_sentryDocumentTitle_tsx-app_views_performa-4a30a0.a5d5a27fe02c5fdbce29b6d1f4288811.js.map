{"version":3,"sources":["webpack:///./app/components/events/searchBar.tsx","webpack:///./app/components/sentryDocumentTitle.tsx","webpack:///./app/utils/measurements/measurements.tsx","webpack:///./app/utils/performance/vitals/vitalsCardsDiscoverQuery.tsx","webpack:///./app/utils/withTags.tsx","webpack:///./app/components/sparklines/index.tsx","webpack:///./app/views/performance/vitalDetail/colorBar.tsx","webpack:///./app/views/performance/vitalDetail/vitalPercents.tsx","webpack:///./app/views/performance/landing/vitalsCards.tsx"],"names":["SEARCH_SPECIAL_CHARS_REGEXP","RegExp","NEGATION_OPERATOR","SEARCH_WILDCARD","SearchBar","memoize","tag","query","endpointParams","props","api","organization","projectIds","projectIdStrings","map","String","isAggregateField","key","isMeasurement","Promise","resolve","fetchTagValues","slug","then","results","flatten","filter","name","defined","Error","replace","this","getEventFieldValues","cache","clear","prevProps","isEqual","measurements","fields","tags","omitTags","functionTags","Object","fromEntries","item","keys","FIELD_TAGS","includes","field","isEquation","fieldTags","features","assign","omit","TRACING_FIELDS","combined","has","values","predefined","getTagList","css","hasRecentSearches","savedSearchType","SavedSearchType","onGetTagValues","supportedTags","prepareQuery","excludeEnvironment","dropdownClassName","React","withApi","withTags","SentryDocumentTitle","title","orgSlug","projectSlug","children","docTitle","MEASUREMENTS","entries","WEB_VITAL_DETAILS","Measurements","getRequestPayload","eventView","vitals","apiPayload","getEventsAPIPayload","location","vital","pick","PERFORMANCE_URL_PARAM","VitalsCardsDiscoverQuery","route","tableData","rest","vitalsData","WrappedComponent","WithTags","TagStore","setState","undefined","unsubscribe","state","getDisplayName","SparklinesWithCustomPropTypes","Sparklines","PropTypes","data","limit","width","height","svgWidth","svgHeight","preserveAspectRatio","margin","style","min","max","onMouseMove","ColorBar","VitalBar","fractions","colorStops","percent","colorStop","BarStatus","color","p","theme","gray100","f","join","space","getVitalStateText","vitalState","VitalState","Array","isArray","t","tct","threshold","webVitalPoor","webVitalMeh","VitalPercents","VitalSet","percents","pct","VitalStatus","vitalStateIcons","showVitalPercentNames","formatPercentage","fontSizeMedium","FrontendCards","projects","frontendOnly","getDefaultDisplayFieldForPlatform","LandingDisplayField","WebVital","isLoading","VitalsContainer","target","vitalDetailRouteWithQuery","generateQueryStringObject","vitalName","projectID","decodeList","project","value","getP75","chart","VitalBarContainer","to","vitalAbbreviations","VitalCard","vitalMap","tooltip","description","minHeight","_BackendCards","baseEventView","functionNames","functions","fn","getBackendFunction","withColumns","globalSelection","getGlobalSelection","start","datetime","getUtcToLocalDateObject","end","referrer","isSummaryLoading","period","environment","environments","team","interval","getInterval","includePrevious","yAxis","getFields","partial","series","reduce","allSeries","oneSeries","seriesName","i","backendCardDetails","formatter","alias","getAggregateAlias","rawValue","SparklineChart","horizontal","isNotInteractive","BackendCards","lineColor","SparklineContainer","SparklinesLine","stroke","fill","strokeWidth","breakpoints","showBar","showStates","showDurationDetail","emptyState","EmptyVitalBar","small","counts","poor","meh","good","total","forEach","c","countKey","poorPercent","mehPercent","goodPercent","p75","vitalStateColors","getColorStopsFromPercents","BarDetail","EmptyStateWarning","StyledCard","interactive","OverflowEllipsis","size","position","CardContent","CardValue","Card","textColor","toFixed","overflowEllipsis"],"mappings":"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","file":"chunks/app_components_events_searchBar_tsx-app_components_sentryDocumentTitle_tsx-app_views_performa-4a30a0.xxxxxxxxxxxxxxxxxxxx.js","sourcesContent":["import * as React from 'react';\nimport {ClassNames} from '@emotion/react';\nimport assign from 'lodash/assign';\nimport flatten from 'lodash/flatten';\nimport isEqual from 'lodash/isEqual';\nimport memoize from 'lodash/memoize';\nimport omit from 'lodash/omit';\n\nimport {fetchTagValues} from 'app/actionCreators/tags';\nimport {Client} from 'app/api';\nimport SmartSearchBar from 'app/components/smartSearchBar';\nimport {NEGATION_OPERATOR, SEARCH_WILDCARD} from 'app/constants';\nimport {Organization, SavedSearchType, TagCollection} from 'app/types';\nimport {defined} from 'app/utils';\nimport {\n  Field,\n  FIELD_TAGS,\n  isAggregateField,\n  isEquation,\n  isMeasurement,\n  TRACING_FIELDS,\n} from 'app/utils/discover/fields';\nimport Measurements from 'app/utils/measurements/measurements';\nimport withApi from 'app/utils/withApi';\nimport withTags from 'app/utils/withTags';\n\nconst SEARCH_SPECIAL_CHARS_REGEXP = new RegExp(\n  `^${NEGATION_OPERATOR}|\\\\${SEARCH_WILDCARD}`,\n  'g'\n);\n\ntype SearchBarProps = Omit<React.ComponentProps<typeof SmartSearchBar>, 'tags'> & {\n  api: Client;\n  organization: Organization;\n  tags: TagCollection;\n  omitTags?: string[];\n  projectIds?: number[] | Readonly<number[]>;\n  fields?: Readonly<Field[]>;\n};\n\nclass SearchBar extends React.PureComponent<SearchBarProps> {\n  componentDidMount() {\n    // Clear memoized data on mount to make tests more consistent.\n    this.getEventFieldValues.cache.clear?.();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (!isEqual(this.props.projectIds, prevProps.projectIds)) {\n      // Clear memoized data when projects change.\n      this.getEventFieldValues.cache.clear?.();\n    }\n  }\n\n  /**\n   * Returns array of tag values that substring match `query`; invokes `callback`\n   * with data when ready\n   */\n  getEventFieldValues = memoize(\n    (tag, query, endpointParams): Promise<string[]> => {\n      const {api, organization, projectIds} = this.props;\n      const projectIdStrings = (projectIds as Readonly<number>[])?.map(String);\n\n      if (isAggregateField(tag.key) || isMeasurement(tag.key)) {\n        // We can't really auto suggest values for aggregate fields\n        // or measurements, so we simply don't\n        return Promise.resolve([]);\n      }\n\n      return fetchTagValues(\n        api,\n        organization.slug,\n        tag.key,\n        query,\n        projectIdStrings,\n        endpointParams,\n\n        // allows searching for tags on transactions as well\n        true\n      ).then(\n        results =>\n          flatten(results.filter(({name}) => defined(name)).map(({name}) => name)),\n        () => {\n          throw new Error('Unable to fetch event field values');\n        }\n      );\n    },\n    ({key}, query) => `${key}-${query}`\n  );\n\n  /**\n   * Prepare query string (e.g. strip special characters like negation operator)\n   */\n  prepareQuery = query => query.replace(SEARCH_SPECIAL_CHARS_REGEXP, '');\n\n  getTagList(\n    measurements: Parameters<\n      React.ComponentProps<typeof Measurements>['children']\n    >[0]['measurements']\n  ) {\n    const {fields, organization, tags, omitTags} = this.props;\n\n    const functionTags = fields\n      ? Object.fromEntries(\n          fields\n            .filter(\n              item =>\n                !Object.keys(FIELD_TAGS).includes(item.field) && !isEquation(item.field)\n            )\n            .map(item => [item.field, {key: item.field, name: item.field}])\n        )\n      : {};\n\n    const fieldTags = organization.features.includes('performance-view')\n      ? Object.assign({}, measurements, FIELD_TAGS, functionTags)\n      : omit(FIELD_TAGS, TRACING_FIELDS);\n\n    const combined = assign({}, tags, fieldTags);\n    combined.has = {\n      key: 'has',\n      name: 'Has property',\n      values: Object.keys(combined),\n      predefined: true,\n    };\n\n    return omit(combined, omitTags ?? []);\n  }\n\n  render() {\n    return (\n      <Measurements>\n        {({measurements}) => {\n          const tags = this.getTagList(measurements);\n          return (\n            <ClassNames>\n              {({css}) => (\n                <SmartSearchBar\n                  {...this.props}\n                  hasRecentSearches\n                  savedSearchType={SavedSearchType.EVENT}\n                  onGetTagValues={this.getEventFieldValues}\n                  supportedTags={tags}\n                  prepareQuery={this.prepareQuery}\n                  excludeEnvironment\n                  dropdownClassName={css`\n                    max-height: 300px;\n                    overflow-y: auto;\n                  `}\n                />\n              )}\n            </ClassNames>\n          );\n        }}\n      </Measurements>\n    );\n  }\n}\n\nexport default withApi(withTags(SearchBar));\n","import * as React from 'react';\nimport DocumentTitle from 'react-document-title';\n\ntype Props = {\n  // Main page title\n  title: string;\n  orgSlug?: string;\n  projectSlug?: string;\n  children?: React.ReactNode;\n};\n\nfunction SentryDocumentTitle({title, orgSlug, projectSlug, children}: Props) {\n  function getDocTitle() {\n    if (!orgSlug && !projectSlug) {\n      return title;\n    }\n\n    if (orgSlug && projectSlug) {\n      return `${title} - ${orgSlug} - ${projectSlug}`;\n    }\n\n    if (orgSlug) {\n      return `${title} - ${orgSlug}`;\n    }\n\n    return `${title} - ${projectSlug}`;\n  }\n\n  const docTitle = getDocTitle();\n\n  return (\n    <DocumentTitle title={`${docTitle} - Sentry`}>\n      {children as React.ReactChild}\n    </DocumentTitle>\n  );\n}\n\nexport default SentryDocumentTitle;\n","import * as React from 'react';\n\nimport {WEB_VITAL_DETAILS} from 'app/utils/performance/vitals/constants';\n\ntype Measurement = {\n  name: string;\n  key: string;\n};\n\ntype MeasurementCollection = Record<string, Measurement>;\n\nconst MEASUREMENTS: MeasurementCollection = Object.fromEntries(\n  Object.entries(WEB_VITAL_DETAILS).map(([key, value]) => {\n    const newValue: Measurement = {\n      name: value.name,\n      key,\n    };\n    return [key, newValue];\n  })\n);\n\ntype ChildrenProps = {\n  measurements: MeasurementCollection;\n};\n\ntype Props = {\n  children: (props: ChildrenProps) => React.ReactNode;\n};\n\nfunction Measurements(props: Props) {\n  return (\n    <React.Fragment>\n      {props.children({\n        measurements: MEASUREMENTS,\n      })}\n    </React.Fragment>\n  );\n}\n\nexport default Measurements;\n","import * as React from 'react';\nimport pick from 'lodash/pick';\n\nimport {MetaType} from 'app/utils/discover/eventView';\nimport {WebVital} from 'app/utils/discover/fields';\nimport GenericDiscoverQuery, {\n  DiscoverQueryProps,\n  GenericChildrenProps,\n} from 'app/utils/discover/genericDiscoverQuery';\nimport {PERFORMANCE_URL_PARAM} from 'app/utils/performance/constants';\nimport withApi from 'app/utils/withApi';\n\nexport type TableDataRow = {\n  id: string;\n  [key: string]: React.ReactText;\n};\n\nexport type TableData = {\n  data: Array<TableDataRow>;\n  meta?: MetaType;\n};\n\nexport type VitalData = {\n  poor: number;\n  meh: number;\n  good: number;\n  total: number;\n  p75: number | null;\n};\n\nexport type VitalsData = Record<string, VitalData>;\n\ntype VitalsProps = {\n  vitals: WebVital[];\n};\n\ntype RequestProps = DiscoverQueryProps & VitalsProps;\n\ntype ChildrenProps = Omit<GenericChildrenProps<VitalsProps>, 'tableData'> & {\n  vitalsData: VitalsData | null;\n};\n\ntype Props = RequestProps & {\n  children: (props: ChildrenProps) => React.ReactNode;\n};\n\nfunction getRequestPayload(props: RequestProps) {\n  const {eventView, vitals} = props;\n  const apiPayload = eventView?.getEventsAPIPayload(props.location);\n  return {\n    vital: vitals,\n    ...pick(apiPayload, ['query', ...Object.values(PERFORMANCE_URL_PARAM)]),\n  };\n}\n\nfunction VitalsCardsDiscoverQuery(props: Props) {\n  return (\n    <GenericDiscoverQuery<VitalsData, VitalsProps>\n      getRequestPayload={getRequestPayload}\n      route=\"events-vitals\"\n      {...props}\n    >\n      {({tableData, ...rest}) => {\n        return props.children({vitalsData: tableData, ...rest});\n      }}\n    </GenericDiscoverQuery>\n  );\n}\n\nexport default withApi(VitalsCardsDiscoverQuery);\n","import * as React from 'react';\n\nimport TagStore from 'app/stores/tagStore';\nimport {TagCollection} from 'app/types';\nimport getDisplayName from 'app/utils/getDisplayName';\n\ntype InjectedTagsProps = {\n  tags: TagCollection;\n};\n\ntype State = {\n  tags: TagCollection;\n};\n\n/**\n * HOC for getting *only* tags from the TagStore.\n */\nfunction withTags<P extends InjectedTagsProps>(WrappedComponent: React.ComponentType<P>) {\n  class WithTags extends React.Component<Omit<P, keyof InjectedTagsProps>, State> {\n    static displayName = `withTags(${getDisplayName(WrappedComponent)})`;\n\n    state: State = {\n      tags: TagStore.getAllTags(),\n    };\n\n    componentWillUnmount() {\n      this.unsubscribe();\n    }\n    unsubscribe = TagStore.listen(\n      (tags: TagCollection) => this.setState({tags}),\n      undefined\n    );\n\n    render() {\n      const {tags, ...props} = this.props as P;\n      return <WrappedComponent {...({tags: tags ?? this.state.tags, ...props} as P)} />;\n    }\n  }\n\n  return WithTags;\n}\n\nexport default withTags;\n","import {Sparklines} from 'react-sparklines';\nimport PropTypes from 'prop-types';\n\n/**\n * This is required because:\n *\n * - React.Suspense only works with default exports\n * - typescript complains that the library's `propTypes` does not\n * have `children defined.\n * - typescript also won't let us access `Sparklines.propTypes`\n */\nexport default class SparklinesWithCustomPropTypes extends Sparklines {\n  static propTypes = {\n    children: PropTypes.node,\n    data: PropTypes.array,\n    limit: PropTypes.number,\n    width: PropTypes.number,\n    height: PropTypes.number,\n    svgWidth: PropTypes.number,\n    svgHeight: PropTypes.number,\n    preserveAspectRatio: PropTypes.string,\n    margin: PropTypes.number,\n    style: PropTypes.object,\n    min: PropTypes.number,\n    max: PropTypes.number,\n    onMouseMove: PropTypes.func,\n  };\n}\n","import styled from '@emotion/styled';\n\nimport space from 'app/styles/space';\nimport {Color} from 'app/utils/theme';\n\ntype ColorStop = {\n  percent: number;\n  color: Color;\n};\n\ntype Props = {\n  colorStops: ColorStop[];\n};\n\nconst ColorBar = (props: Props) => {\n  return (\n    <VitalBar fractions={props.colorStops.map(({percent}) => percent)}>\n      {props.colorStops.map(colorStop => {\n        return <BarStatus color={colorStop.color} key={colorStop.color} />;\n      })}\n    </VitalBar>\n  );\n};\n\ntype VitalBarProps = {\n  fractions: number[];\n};\n\nconst VitalBar = styled('div')<VitalBarProps>`\n  height: 16px;\n  width: 100%;\n  overflow: hidden;\n  position: relative;\n  background: ${p => p.theme.gray100};\n  display: grid;\n  grid-template-columns: ${p => p.fractions.map(f => `${f}fr`).join(' ')};\n  margin-bottom: ${space(1)};\n  border-radius: 2px;\n`;\n\ntype ColorProps = {\n  color: Color;\n};\n\nconst BarStatus = styled('div')<ColorProps>`\n  background-color: ${p => p.theme[p.color]};\n`;\n\nexport default ColorBar;\n","import styled from '@emotion/styled';\n\nimport Tooltip from 'app/components/tooltip';\nimport {t, tct} from 'app/locale';\nimport space from 'app/styles/space';\nimport {WebVital} from 'app/utils/discover/fields';\nimport {formatPercentage} from 'app/utils/formatters';\n\nimport {VitalState, vitalStateIcons, webVitalMeh, webVitalPoor} from './utils';\n\ntype Percent = {\n  vitalState: VitalState;\n  percent: number;\n};\n\ntype Props = {\n  vital: WebVital | WebVital[];\n  percents: Percent[];\n  showVitalPercentNames?: boolean;\n};\n\nfunction getVitalStateText(vital, vitalState) {\n  switch (vitalState) {\n    case VitalState.POOR:\n      return Array.isArray(vital)\n        ? t('Poor')\n        : tct('Poor: >[threshold]ms', {threshold: webVitalPoor[vital]});\n    case VitalState.MEH:\n      return Array.isArray(vital)\n        ? t('Meh')\n        : tct('Meh: >[threshold]ms', {threshold: webVitalMeh[vital]});\n    case VitalState.GOOD:\n      return Array.isArray(vital)\n        ? t('Good')\n        : tct('Good: <[threshold]ms', {threshold: webVitalMeh[vital]});\n    default:\n      return null;\n  }\n}\n\nexport default function VitalPercents(props: Props) {\n  return (\n    <VitalSet>\n      {props.percents.map(pct => {\n        return (\n          <Tooltip\n            key={pct.vitalState}\n            title={getVitalStateText(props.vital, pct.vitalState)}\n          >\n            <VitalStatus>\n              {vitalStateIcons[pct.vitalState]}\n              <span>\n                {props.showVitalPercentNames && t(`${pct.vitalState}`)}{' '}\n                {formatPercentage(pct.percent, 0)}\n              </span>\n            </VitalStatus>\n          </Tooltip>\n        );\n      })}\n    </VitalSet>\n  );\n}\n\nconst VitalSet = styled('div')`\n  display: inline-grid;\n  grid-auto-flow: column;\n  gap: ${space(2)};\n`;\n\nconst VitalStatus = styled('div')`\n  display: flex;\n  align-items: center;\n  gap: ${space(0.5)};\n  font-size: ${p => p.theme.fontSizeMedium};\n`;\n","import * as React from 'react';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\n\nimport {Client} from 'app/api';\nimport Card from 'app/components/card';\nimport EventsRequest from 'app/components/charts/eventsRequest';\nimport {HeaderTitle} from 'app/components/charts/styles';\nimport {getInterval} from 'app/components/charts/utils';\nimport EmptyStateWarning from 'app/components/emptyStateWarning';\nimport Link from 'app/components/links/link';\nimport Placeholder from 'app/components/placeholder';\nimport QuestionTooltip from 'app/components/questionTooltip';\nimport Sparklines from 'app/components/sparklines';\nimport SparklinesLine from 'app/components/sparklines/line';\nimport {t} from 'app/locale';\nimport overflowEllipsis from 'app/styles/overflowEllipsis';\nimport space from 'app/styles/space';\nimport {Organization, Project} from 'app/types';\nimport {getUtcToLocalDateObject} from 'app/utils/dates';\nimport DiscoverQuery from 'app/utils/discover/discoverQuery';\nimport EventView from 'app/utils/discover/eventView';\nimport {getAggregateAlias, WebVital} from 'app/utils/discover/fields';\nimport {WEB_VITAL_DETAILS} from 'app/utils/performance/vitals/constants';\nimport VitalsCardsDiscoverQuery, {\n  VitalData,\n  VitalsData,\n} from 'app/utils/performance/vitals/vitalsCardsDiscoverQuery';\nimport {decodeList} from 'app/utils/queryString';\nimport theme from 'app/utils/theme';\nimport withApi from 'app/utils/withApi';\n\nimport ColorBar from '../vitalDetail/colorBar';\nimport {\n  vitalAbbreviations,\n  vitalDetailRouteWithQuery,\n  vitalMap,\n  VitalState,\n  vitalStateColors,\n} from '../vitalDetail/utils';\nimport VitalPercents from '../vitalDetail/vitalPercents';\n\nimport {\n  backendCardDetails,\n  getBackendFunction,\n  getDefaultDisplayFieldForPlatform,\n  LandingDisplayField,\n} from './utils';\n\ntype FrontendCardsProps = {\n  eventView: EventView;\n  location: Location;\n  organization: Organization;\n  projects: Project[];\n  frontendOnly?: boolean;\n};\n\nexport function FrontendCards(props: FrontendCardsProps) {\n  const {eventView, location, organization, projects, frontendOnly = false} = props;\n\n  if (frontendOnly) {\n    const defaultDisplay = getDefaultDisplayFieldForPlatform(projects, eventView);\n    const isFrontend = defaultDisplay === LandingDisplayField.FRONTEND_PAGELOAD;\n\n    if (!isFrontend) {\n      return null;\n    }\n  }\n\n  const vitals = [WebVital.FCP, WebVital.LCP, WebVital.FID, WebVital.CLS];\n\n  return (\n    <VitalsCardsDiscoverQuery\n      eventView={eventView}\n      location={location}\n      orgSlug={organization.slug}\n      vitals={vitals}\n    >\n      {({isLoading, vitalsData}) => {\n        return (\n          <VitalsContainer>\n            {vitals.map(vital => {\n              const target = vitalDetailRouteWithQuery({\n                orgSlug: organization.slug,\n                query: eventView.generateQueryStringObject(),\n                vitalName: vital,\n                projectID: decodeList(location.query.project),\n              });\n\n              const value = isLoading\n                ? '\\u2014'\n                : getP75(vitalsData?.[vital] ?? null, vital);\n              const chart = (\n                <VitalBarContainer>\n                  <VitalBar isLoading={isLoading} vital={vital} data={vitalsData} />\n                </VitalBarContainer>\n              );\n\n              return (\n                <Link\n                  key={vital}\n                  to={target}\n                  data-test-id={`vitals-linked-card-${vitalAbbreviations[vital]}`}\n                >\n                  <VitalCard\n                    title={vitalMap[vital] ?? ''}\n                    tooltip={WEB_VITAL_DETAILS[vital].description ?? ''}\n                    value={isLoading ? '\\u2014' : value}\n                    chart={chart}\n                    minHeight={150}\n                  />\n                </Link>\n              );\n            })}\n          </VitalsContainer>\n        );\n      }}\n    </VitalsCardsDiscoverQuery>\n  );\n}\n\nconst VitalBarContainer = styled('div')`\n  margin-top: ${space(1.5)};\n`;\n\ntype BackendCardsProps = {\n  api: Client;\n  eventView: EventView;\n  location: Location;\n  organization: Organization;\n};\n\nfunction _BackendCards(props: BackendCardsProps) {\n  const {api, eventView: baseEventView, location, organization} = props;\n  const functionNames = [\n    'p75' as const,\n    'tpm' as const,\n    'failure_rate' as const,\n    'apdex' as const,\n  ];\n  const functions = functionNames.map(fn => getBackendFunction(fn, organization));\n  const eventView = baseEventView.withColumns(functions);\n\n  // construct request parameters for fetching chart data\n  const globalSelection = eventView.getGlobalSelection();\n  const start = globalSelection.datetime.start\n    ? getUtcToLocalDateObject(globalSelection.datetime.start)\n    : undefined;\n  const end = globalSelection.datetime.end\n    ? getUtcToLocalDateObject(globalSelection.datetime.end)\n    : undefined;\n  const apiPayload = eventView.getEventsAPIPayload(location);\n\n  return (\n    <DiscoverQuery\n      location={location}\n      eventView={eventView}\n      orgSlug={organization.slug}\n      limit={1}\n      referrer=\"api.performance.vitals-cards\"\n    >\n      {({isLoading: isSummaryLoading, tableData}) => (\n        <EventsRequest\n          api={api}\n          organization={organization}\n          period={globalSelection.datetime.period}\n          project={globalSelection.projects}\n          environment={globalSelection.environments}\n          team={apiPayload.team}\n          start={start}\n          end={end}\n          interval={getInterval({\n            start: start || null,\n            end: end || null,\n            period: globalSelection.datetime.period,\n          })}\n          query={apiPayload.query}\n          includePrevious={false}\n          yAxis={eventView.getFields()}\n          partial\n        >\n          {({results}) => {\n            const series = results?.reduce((allSeries, oneSeries) => {\n              allSeries[oneSeries.seriesName] = oneSeries.data.map(item => item.value);\n              return allSeries;\n            }, {});\n            const fields = eventView\n              .getFields()\n              .map((fn, i) => [functionNames[i], fn, series?.[fn]]);\n\n            return (\n              <VitalsContainer>\n                {fields.map(([name, fn, data]) => {\n                  const {title, tooltip, formatter} =\n                    backendCardDetails(organization)[name];\n                  const alias = getAggregateAlias(fn);\n                  const rawValue = tableData?.data?.[0]?.[alias];\n                  const value =\n                    isSummaryLoading || rawValue === undefined\n                      ? '\\u2014'\n                      : formatter(rawValue);\n                  const chart = <SparklineChart data={data} />;\n                  return (\n                    <VitalCard\n                      key={name}\n                      title={title}\n                      tooltip={tooltip}\n                      value={value}\n                      chart={chart}\n                      horizontal\n                      minHeight={96}\n                      isNotInteractive\n                    />\n                  );\n                })}\n              </VitalsContainer>\n            );\n          }}\n        </EventsRequest>\n      )}\n    </DiscoverQuery>\n  );\n}\n\nexport const BackendCards = withApi(_BackendCards);\n\ntype SparklineChartProps = {\n  data: number[];\n};\n\nfunction SparklineChart(props: SparklineChartProps) {\n  const {data} = props;\n  const width = 150;\n  const height = 24;\n  const lineColor = theme.charts.getColorPalette(1)[0];\n  return (\n    <SparklineContainer data-test-id=\"sparkline\" width={width} height={height}>\n      <Sparklines data={data} width={width} height={height}>\n        <SparklinesLine style={{stroke: lineColor, fill: 'none', strokeWidth: 3}} />\n      </Sparklines>\n    </SparklineContainer>\n  );\n}\n\ntype SparklineContainerProps = {\n  width: number;\n  height: number;\n};\n\nconst SparklineContainer = styled('div')<SparklineContainerProps>`\n  flex-grow: 4;\n  max-height: ${p => p.height}px;\n  max-width: ${p => p.width}px;\n  margin: ${space(1)} ${space(0)} ${space(0.5)} ${space(3)};\n`;\n\nconst VitalsContainer = styled('div')`\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-column-gap: ${space(2)};\n\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    grid-template-columns: repeat(2, 1fr);\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints[2]}) {\n    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  }\n`;\n\ntype VitalBarProps = {\n  isLoading: boolean;\n  data: VitalsData | null;\n  vital: WebVital | WebVital[];\n  value?: string;\n  showBar?: boolean;\n  showStates?: boolean;\n  showDurationDetail?: boolean;\n  showVitalPercentNames?: boolean;\n};\n\nexport function VitalBar(props: VitalBarProps) {\n  const {\n    isLoading,\n    data,\n    vital,\n    value,\n    showBar = true,\n    showStates = false,\n    showDurationDetail = false,\n    showVitalPercentNames = false,\n  } = props;\n\n  if (isLoading) {\n    return showStates ? <Placeholder height=\"48px\" /> : null;\n  }\n\n  const emptyState = showStates ? (\n    <EmptyVitalBar small>{t('No vitals found')}</EmptyVitalBar>\n  ) : null;\n\n  if (!data) {\n    return emptyState;\n  }\n\n  const counts: Pick<VitalData, 'poor' | 'meh' | 'good' | 'total'> = {\n    poor: 0,\n    meh: 0,\n    good: 0,\n    total: 0,\n  };\n  const vitals = Array.isArray(vital) ? vital : [vital];\n  vitals.forEach(vitalName => {\n    const c = data?.[vitalName] ?? {};\n    Object.keys(counts).forEach(countKey => (counts[countKey] += c[countKey]));\n  });\n\n  if (!counts.total) {\n    return emptyState;\n  }\n\n  const p75: React.ReactNode = Array.isArray(vital)\n    ? null\n    : value ?? getP75(data?.[vital] ?? null, vital);\n  const percents = getPercentsFromCounts(counts);\n  const colorStops = getColorStopsFromPercents(percents);\n\n  return (\n    <React.Fragment>\n      {showBar && <ColorBar colorStops={colorStops} />}\n      <BarDetail>\n        {showDurationDetail && p75 && (\n          <div data-test-id=\"vital-bar-p75\">\n            {t('The p75 for all transactions is ')}\n            <strong>{p75}</strong>\n          </div>\n        )}\n        <VitalPercents\n          vital={vital}\n          percents={percents}\n          showVitalPercentNames={showVitalPercentNames}\n        />\n      </BarDetail>\n    </React.Fragment>\n  );\n}\n\nconst EmptyVitalBar = styled(EmptyStateWarning)`\n  height: 48px;\n  padding: ${space(1.5)} 15%;\n`;\n\ntype VitalCardProps = {\n  title: string;\n  tooltip: string;\n  value: string;\n  chart: React.ReactNode;\n  minHeight?: number;\n  horizontal?: boolean;\n  isNotInteractive?: boolean;\n};\n\nfunction VitalCard(props: VitalCardProps) {\n  const {chart, minHeight, horizontal, title, tooltip, value, isNotInteractive} = props;\n  return (\n    <StyledCard interactive={!isNotInteractive} minHeight={minHeight}>\n      <HeaderTitle>\n        <OverflowEllipsis>{t(title)}</OverflowEllipsis>\n        <QuestionTooltip size=\"sm\" position=\"top\" title={tooltip} />\n      </HeaderTitle>\n      <CardContent horizontal={horizontal}>\n        <CardValue>{value}</CardValue>\n        {chart}\n      </CardContent>\n    </StyledCard>\n  );\n}\n\nconst CardContent = styled('div')<{horizontal?: boolean}>`\n  width: 100%;\n  display: flex;\n  flex-direction: ${p => (p.horizontal ? 'row' : 'column')};\n  justify-content: space-between;\n`;\n\nconst StyledCard = styled(Card)<{minHeight?: number}>`\n  color: ${p => p.theme.textColor};\n  padding: ${space(2)} ${space(3)};\n  align-items: flex-start;\n  margin-bottom: ${space(2)};\n  ${p => p.minHeight && `min-height: ${p.minHeight}px`};\n`;\n\nfunction getP75(data: VitalData | null, vitalName: WebVital): string {\n  const p75 = data?.p75 ?? null;\n  if (p75 === null) {\n    return '\\u2014';\n  } else {\n    return vitalName === WebVital.CLS ? p75.toFixed(2) : `${p75.toFixed(0)}ms`;\n  }\n}\n\ntype Percent = {\n  vitalState: VitalState;\n  percent: number;\n};\n\nfunction getPercentsFromCounts({poor, meh, good, total}) {\n  const poorPercent = poor / total;\n  const mehPercent = meh / total;\n  const goodPercent = good / total;\n\n  const percents: Percent[] = [\n    {\n      vitalState: VitalState.GOOD,\n      percent: goodPercent,\n    },\n    {\n      vitalState: VitalState.MEH,\n      percent: mehPercent,\n    },\n    {\n      vitalState: VitalState.POOR,\n      percent: poorPercent,\n    },\n  ];\n\n  return percents;\n}\n\nfunction getColorStopsFromPercents(percents: Percent[]) {\n  return percents.map(({percent, vitalState}) => ({\n    percent,\n    color: vitalStateColors[vitalState],\n  }));\n}\n\nconst BarDetail = styled('div')`\n  font-size: ${p => p.theme.fontSizeMedium};\n\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    display: flex;\n    justify-content: space-between;\n  }\n`;\n\nconst CardValue = styled('div')`\n  font-size: 32px;\n  margin-top: ${space(1)};\n`;\n\nconst OverflowEllipsis = styled('div')`\n  ${overflowEllipsis};\n`;\n"],"sourceRoot":""}
{"version":3,"sources":["webpack://@quetz-frontend/app/../../packages/application-extension/lib/index.js","webpack://@quetz-frontend/app/../../packages/application-extension/lib/paths.js","webpack://@quetz-frontend/app/../../packages/application-extension/lib/router.js","webpack://@quetz-frontend/app/../../packages/application-extension/lib/sessions.js","webpack://@quetz-frontend/app/../../packages/application-extension/lib/translator.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAgC;AACE;AACI;AACI;AAC1C,aAAa,yCAAK,EAAE,2CAAM,EAAE,+CAAQ,EAAE,mDAAU;AAChD,iEAAe,GAAG,EAAC;AACnB,iC;;;;;;;;;;;;;;;;;;ACN2D;AACpD;AACP;AACA;AACA,CAAC,gCAAgC;AACjC;AACA;AACA;AACO;AACP;AACA;AACA,cAAc,2EAAsB;AACpC;AACA;AACA,KAAK;AACL;AACA,iC;;;;;;;;;;;;;;;;;;AChB4E;AACrE;AACP;AACA;AACA,CAAC,gCAAgC;AAC1B;AACP;AACA;AACA,eAAe,2EAAsB;AACrC,cAAc,4DAAO;AACrB;AACA,eAAe,WAAW;AAC1B,2BAA2B,2DAAM,EAAE,sBAAsB;AACzD;AACA;AACA,0CAA0C,oBAAoB;AAC9D;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA,kC;;;;;;;;;;;;;;;;ACjCO;AACP;AACA;AACA,CAAC,gCAAgC;AACjC;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA,oC;;;;;;;;;;;;;;;;;;AChC0E;AACnE;AACP;AACA;AACA,CAAC,gCAAgC;AACjC;AACA;AACA;AACO;AACP;AACA;AACA,cAAc,gEAAW;AACzB;AACA,uCAAuC,uEAAkB;AACzD;AACA,KAAK;AACL;AACA,sC","file":"packages_application-extension_lib_index_js.bundle.js","sourcesContent":["import { paths } from './paths';\nimport { router } from './router';\nimport { sessions } from './sessions';\nimport { translator } from './translator';\nconst ros = [paths, router, sessions, translator];\nexport default ros;\n//# sourceMappingURL=index.js.map","import { JupyterFrontEnd, } from '@jupyterlab/application';\nexport var CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.plugin = '@quetz-frontend/application-extension:paths';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * The default paths.\n */\nexport const paths = {\n    id: CommandIDs.plugin,\n    autoStart: true,\n    provides: JupyterFrontEnd.IPaths,\n    activate: (app) => {\n        return app.paths;\n    },\n};\n//# sourceMappingURL=paths.js.map","import { JupyterFrontEnd, Router, IRouter, } from '@jupyterlab/application';\nexport var CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.plugin = '@quetz-frontend/application-extension:router';\n})(CommandIDs || (CommandIDs = {}));\nexport const router = {\n    id: CommandIDs.plugin,\n    autoStart: true,\n    requires: [JupyterFrontEnd.IPaths],\n    provides: IRouter,\n    activate: (app, paths) => {\n        const { commands } = app;\n        const router = new Router({ base: '/', commands });\n        void app.started.then(() => {\n            if (router.current.path === router.base) {\n                router.navigate('/home', { skipRouting: true });\n            }\n            void router.route();\n            // Route all pop state events.\n            window.addEventListener('popstate', () => {\n                void router.route();\n            });\n            router.routed.connect((router, loc) => {\n                if (loc.path === router.base) {\n                    router.navigate('/home');\n                }\n            });\n            //@ts-ignore\n            window.router = router;\n        });\n        return router;\n    },\n};\n//# sourceMappingURL=router.js.map","export var CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.plugin = '@quetz-frontend/application-extension:sessions';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * A plugin to stop the kernels, sessions and terminals polling\n */\nexport const sessions = {\n    id: CommandIDs.plugin,\n    autoStart: true,\n    activate: (app) => {\n        var _a, _b;\n        (_a = app.serviceManager.sessions) === null || _a === void 0 ? void 0 : _a.ready.then((value) => {\n            var _a;\n            // stop polling the kernel sessions\n            (_a = app.serviceManager.sessions['_kernelManager']['_pollModels']) === null || _a === void 0 ? void 0 : _a.stop();\n            // stop polling the sessions\n            void app.serviceManager.sessions['_pollModels'].stop();\n        });\n        (_b = app.serviceManager.kernelspecs) === null || _b === void 0 ? void 0 : _b.ready.then((value) => {\n            // stop polling the kernelspecs\n            void app.serviceManager.kernelspecs.dispose();\n        });\n        /*\n        app.serviceManager.terminals?.ready.then( value => {\n          console.debug(\"Stopping terminals:\");\n          // stop polling the terminals\n          void app.serviceManager.terminals['_pollModels'].stop();\n        });\n        */\n    },\n};\n//# sourceMappingURL=sessions.js.map","import { ITranslator, TranslationManager } from '@jupyterlab/translation';\nexport var CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.plugin = '@quetz-frontend/application-extension:translator';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * A simplified Translator\n */\nexport const translator = {\n    id: CommandIDs.plugin,\n    autoStart: true,\n    provides: ITranslator,\n    activate: (app) => {\n        const translationManager = new TranslationManager();\n        return translationManager;\n    },\n};\n//# sourceMappingURL=translator.js.map"],"sourceRoot":""}
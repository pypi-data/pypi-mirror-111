{"version":3,"sources":["webpack://@quetz-frontend/app/../../packages/user-extension/lib/api-key.js","webpack://@quetz-frontend/app/../../packages/user-extension/lib/apiKeyDialog.js","webpack://@quetz-frontend/app/../../packages/user-extension/lib/index.js","webpack://@quetz-frontend/app/../../packages/user-extension/lib/tab-channels.js","webpack://@quetz-frontend/app/../../packages/user-extension/lib/tab-packages.js","webpack://@quetz-frontend/app/../../packages/user-extension/lib/tab-profile.js"],"names":[],"mappings":"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A;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,6CAAM,2BAA2B,8DAAqB;AAChF;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,0EAAoB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,yBAAyB,+EAA6B;AACtD,oBAAoB,8DAAW;AAC/B,QAAQ,8EAA4B,QAAQ;AAC5C;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,gCAAgC,8DAAW,iCAAiC,eAAe;AAC3F,uCAAuC,8EAA4B,gBAAgB;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,8DAAW,iCAAiC,eAAe;AAC3F,sCAAsC,8EAA4B,gBAAgB;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,0EAAoB;AAClD;AACA,SAAS;AACT;AACA;AACA;AACA,oBAAoB,gDAAmB,SAAS,+BAA+B;AAC/E,gBAAgB,gDAAmB,WAAW,8BAA8B;AAC5E,gBAAgB,gDAAmB,WAAW,4KAA4K;AAC1N,gBAAgB,gDAAmB,cAAc,iBAAiB,sCAAsC,gDAAmB,YAAY,8BAA8B;AACrK;AACA;AACA,oBAAoB,gDAAmB,SAAS,+BAA+B;AAC/E,gBAAgB,gDAAmB,WAAW,8BAA8B;AAC5E,gBAAgB,gDAAmB,WAAW,kOAAkO;AAChR,gBAAgB,gDAAmB,cAAc,iBAAiB,4CAA4C,gDAAmB,YAAY,4BAA4B;AACzK;AACA;AACA,oBAAoB,gDAAmB,SAAS,+BAA+B;AAC/E,gBAAgB,gDAAmB,WA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","file":"packages_user-extension_lib_index_js.bundle.js","sourcesContent":["import { Dialog, showDialog } from '@jupyterlab/apputils';\nimport { ServerConnection } from '@jupyterlab/services';\nimport { URLExt } from '@jupyterlab/coreutils';\nimport { InlineLoader, API_STATUSES, copyToClipboard, } from '@quetz-frontend/apputils';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrash, faCopy } from '@fortawesome/free-solid-svg-icons';\nimport * as React from 'react';\nimport { RequestAPIKeyDialog, APIKeyDialog } from './apiKeyDialog';\nclass UserAPIKey extends React.PureComponent {\n    constructor(props) {\n        super(props);\n        this._requestApiKey = async () => {\n            const body = new RequestAPIKeyDialog();\n            const value = await showDialog({ title: 'Keys', body });\n            if (value.button.accept) {\n                const data = body.info;\n                if (!data.user && data.key.roles.length === 0) {\n                    showDialog({\n                        title: 'Format error',\n                        body: 'Add roles',\n                        buttons: [Dialog.okButton()],\n                    });\n                    return;\n                }\n                const settings = ServerConnection.makeSettings();\n                const url = URLExt.join(settings.baseUrl, '/api/api-keys');\n                const request = {\n                    method: 'POST',\n                    redirect: 'follow',\n                    body: JSON.stringify(data.key),\n                    headers: { 'Content-Type': 'application/json' },\n                };\n                const resp = await ServerConnection.makeRequest(url, request, settings);\n                const response = await resp.json();\n                if (response.detail) {\n                    return console.error(response.detail);\n                }\n                const apiKeys = [...this.state.apiKeys, response];\n                this.setState({ apiKeys });\n            }\n        };\n        this._showRoles = async (roles) => {\n            const body = new APIKeyDialog(roles);\n            showDialog({\n                title: 'Roles',\n                body,\n                buttons: [Dialog.okButton()],\n            });\n        };\n        this._removeAPIKey = async (key) => {\n            const body = (React.createElement(\"label\", null,\n                \"Do you want to delete the API key:\",\n                ' ',\n                React.createElement(\"label\", { className: \"qs-Label-Caption\" }, key),\n                \".\"));\n            const value = await showDialog({\n                title: 'Delete API key',\n                body,\n            });\n            if (value.button.accept) {\n                const settings = ServerConnection.makeSettings();\n                const url = URLExt.join(settings.baseUrl, '/api/api-keys', key);\n                const request = {\n                    method: 'DELETE',\n                    redirect: 'follow',\n                };\n                const resp = await ServerConnection.makeRequest(url, request, settings);\n                if (!resp.ok) {\n                    return console.error(resp.statusText);\n                }\n                const apiKeys = this.state.apiKeys.filter((api) => api.key !== key);\n                this.setState({ apiKeys });\n            }\n        };\n        this.state = {\n            apiKeys: [],\n            apiStatus: API_STATUSES.PENDING,\n        };\n    }\n    async componentDidMount() {\n        const settings = ServerConnection.makeSettings();\n        const url = URLExt.join(settings.baseUrl, '/api/api-keys');\n        const resp = await ServerConnection.makeRequest(url, {}, settings);\n        const data = await resp.json();\n        if (data.detail) {\n            return console.error(data.detail);\n        }\n        this.setState({\n            apiKeys: data,\n            apiStatus: API_STATUSES.SUCCESS,\n        });\n    }\n    render() {\n        const { apiStatus, apiKeys } = this.state;\n        const renderUserKey = () => {\n            return apiKeys.map((item) => {\n                if (item.roles === null) {\n                    return (React.createElement(\"tr\", { key: item.key },\n                        React.createElement(\"td\", null, item.key),\n                        React.createElement(\"td\", null,\n                            React.createElement(\"label\", { className: \"qs-Label-Caption\" }, item.description)),\n                        React.createElement(\"td\", null, item.time_created),\n                        React.createElement(\"td\", null, item.expire_at),\n                        React.createElement(\"td\", { onClick: () => copyToClipboard(item.key, 'API key') },\n                            React.createElement(FontAwesomeIcon, { icon: faCopy })),\n                        React.createElement(\"td\", { onClick: () => this._removeAPIKey(item.key) },\n                            React.createElement(FontAwesomeIcon, { icon: faTrash }))));\n                }\n            });\n        };\n        const renderKeys = () => {\n            return apiKeys.map((item) => {\n                if (item.roles !== null) {\n                    return (React.createElement(\"tr\", { key: item.key, className: \"qs-clickable-Row\" },\n                        React.createElement(\"td\", { onClick: () => this._showRoles(item.roles) }, item.key),\n                        React.createElement(\"td\", { onClick: () => this._showRoles(item.roles) }, item.description),\n                        React.createElement(\"td\", null, item.time_created),\n                        React.createElement(\"td\", null, item.expire_at),\n                        React.createElement(\"td\", { onClick: () => copyToClipboard(item.key, 'API key') },\n                            React.createElement(FontAwesomeIcon, { icon: faCopy })),\n                        React.createElement(\"td\", { onClick: () => this._removeAPIKey(item.key) },\n                            React.createElement(FontAwesomeIcon, { icon: faTrash }))));\n                }\n            });\n        };\n        return (React.createElement(\"div\", null,\n            React.createElement(\"div\", { className: \"padding-bottom\" },\n                React.createElement(\"button\", { className: \"btn btn-default\", onClick: this._requestApiKey }, \"Request API key\")),\n            React.createElement(\"h3\", { className: \"heading3\" }, \"API keys\"),\n            apiStatus === API_STATUSES.PENDING && (React.createElement(InlineLoader, { text: \"Fetching APIKeys\" })),\n            apiKeys.length !== 0 && (React.createElement(\"table\", { className: \"jp-table table-small\" },\n                React.createElement(\"thead\", null,\n                    React.createElement(\"tr\", null,\n                        React.createElement(\"th\", null, \"Key\"),\n                        React.createElement(\"th\", null, \"Description\"),\n                        React.createElement(\"th\", null, \"Created\"),\n                        React.createElement(\"th\", null, \"Expires\"),\n                        React.createElement(\"th\", null),\n                        React.createElement(\"th\", null))),\n                React.createElement(\"tbody\", null,\n                    renderUserKey(),\n                    renderKeys())))));\n    }\n}\nexport default UserAPIKey;\n//# sourceMappingURL=api-key.js.map","import { ServerConnection } from '@jupyterlab/services';\nimport { URLExt } from '@jupyterlab/coreutils';\nimport { ReactWidget } from '@jupyterlab/apputils';\nimport { Button } from '@jupyterlab/ui-components';\nimport { InlineLoader, API_STATUSES } from '@quetz-frontend/apputils';\nimport moment from 'moment';\nimport * as React from 'react';\n/**\n * A ReactWidget to edit the dashboard notebook metadata.\n */\nexport class RequestAPIKeyDialog extends ReactWidget {\n    /**\n     * Construct a `DashboardMetadataEditor`.\n     *\n     */\n    constructor() {\n        super();\n        /**\n         * Handler for description input changes\n         *\n         * @param event\n         */\n        this._handleDescription = (event) => {\n            this._api_key_info.description = event.target.value;\n            this.update();\n        };\n        this._handleExpire = (event) => {\n            this._api_key_info.expire_at = event.target.value;\n            this.update();\n        };\n        this._handleUserCheck = (event) => {\n            this._user_api_key = event.target.checked;\n            this.update();\n        };\n        this._handleChannel = (event) => {\n            this._role.channel = event.target.value;\n            const channel = this._channels.find((channel) => channel.name === this._role.channel);\n            if (channel) {\n                switch (channel.role) {\n                    case 'owner':\n                        this._roles = ['member', 'maintainer', 'owner'];\n                        break;\n                    case 'maintainer':\n                        this._roles = ['member', 'maintainer'];\n                        break;\n                    case 'member':\n                        this._roles = ['member'];\n                        break;\n                    default:\n                        this._roles = [];\n                        break;\n                }\n            }\n            else {\n                this._roles = [];\n            }\n            this._packages_channel = this._packages.filter((value) => value.channel_name === this._role.channel);\n            this.update();\n        };\n        this._handlePackage = (event) => {\n            this._role.package = event.target.value;\n            const pkg = this._packages.find((pkg) => pkg.name === this._role.package);\n            if (pkg) {\n                switch (pkg.role) {\n                    case 'owner':\n                        this._roles = ['member', 'maintainer', 'owner'];\n                        break;\n                    case 'maintainer':\n                        this._roles = ['member', 'maintainer'];\n                        break;\n                    case 'member':\n                        this._roles = ['member'];\n                        break;\n                }\n            }\n            this.update();\n        };\n        this._handleRole = (event) => {\n            this._role.role = event.target.value;\n            this.update();\n        };\n        /**\n         * Handler for adding role to list of roles\n         */\n        this._addRole = () => {\n            this._api_key_info.roles.push(this._role);\n            this._role = {\n                channel: '',\n                package: '',\n                role: 'member',\n            };\n            this._packages_channel = [];\n            this.update();\n        };\n        /**\n         * Handler for removing role from list of roles\n         *\n         * @param index\n         */\n        this._removeRole = (index) => {\n            this._api_key_info.roles.splice(index, 1);\n            this.update();\n        };\n        const expire_at = moment().add(1, 'months').format(moment.HTML5_FMT.DATE);\n        this._api_key_info = {\n            description: '',\n            expire_at,\n            roles: [],\n        };\n        this._username = '';\n        this._apiStatus = API_STATUSES.PENDING;\n        this._user_api_key = true;\n        this._role = {\n            channel: '',\n            package: '',\n            role: 'member',\n        };\n        this._channels = [];\n        this._packages = [];\n        this._roles = [];\n        this._packages_channel = [];\n    }\n    get info() {\n        if (this._user_api_key) {\n            return {\n                user: true,\n                key: {\n                    description: this._api_key_info.description,\n                    expire_at: this._api_key_info.expire_at,\n                    roles: [],\n                },\n            };\n        }\n        else {\n            return { user: false, key: this._api_key_info };\n        }\n    }\n    onAfterAttach(message) {\n        const settings = ServerConnection.makeSettings();\n        const url = URLExt.join(settings.baseUrl, '/api/me');\n        ServerConnection.makeRequest(url, {}, settings)\n            .then((resp) => {\n            return resp.json();\n        })\n            .then(async (data) => {\n            if (data.detail) {\n                return console.error(data.detail);\n            }\n            this._username = data.user.username;\n            const urlChannels = URLExt.join(settings.baseUrl, `/api/users/${this._username}/channels`);\n            const respChannels = await ServerConnection.makeRequest(urlChannels, {}, settings);\n            const channels = await respChannels.json();\n            if (channels.detail) {\n                console.error(channels.detail);\n                this._channels = [];\n            }\n            else {\n                this._channels = channels;\n            }\n            const urlPackages = URLExt.join(settings.baseUrl, `/api/users/${this._username}/packages`);\n            const respPackage = await ServerConnection.makeRequest(urlPackages, {}, settings);\n            const packages = await respPackage.json();\n            if (packages.detail) {\n                console.error(packages.detail);\n                this._packages = [];\n            }\n            else {\n                this._packages = packages;\n            }\n            this._apiStatus = API_STATUSES.SUCCESS;\n            this.update();\n        });\n    }\n    render() {\n        const renderChannels = () => {\n            return (React.createElement(\"div\", { className: \"qs-Form-Section\" },\n                React.createElement(\"label\", { className: \"qs-Input-Label\" }, \"Channel:\"),\n                React.createElement(\"input\", { name: \"channels\", type: \"search\", className: \"jp-mod-styled\", list: \"channels\", value: this._role.channel, onChange: this._handleChannel, placeholder: \"Select a channel\" }),\n                React.createElement(\"datalist\", { id: \"channels\" }, this._channels.map((channel, i) => (React.createElement(\"option\", { key: i, value: channel.name }, channel.name))))));\n        };\n        const renderPackages = () => {\n            return (React.createElement(\"div\", { className: \"qs-Form-Section\" },\n                React.createElement(\"label\", { className: \"qs-Input-Label\" }, \"Package\"),\n                React.createElement(\"input\", { name: \"package\", type: \"search\", className: \"jp-mod-styled\", list: \"packages\", value: this._role.package, onChange: this._handlePackage, placeholder: \"Leave blank for all packages\", disabled: this._role.channel.length === 0 }),\n                React.createElement(\"datalist\", { id: \"packages\" }, this._packages_channel.map((value, i) => (React.createElement(\"option\", { key: i, value: value.name }, value.name))))));\n        };\n        const renderRoles = () => {\n            return (React.createElement(\"div\", { className: \"qs-Form-Section\" },\n                React.createElement(\"label\", { className: \"qs-Input-Label\" }, \"Role\"),\n                React.createElement(\"select\", { name: \"role\", className: \"jp-mod-styled\", value: this._role.role, onChange: this._handleRole }, this._roles.map((role, i) => (React.createElement(\"option\", { key: i, value: role }, role))))));\n        };\n        const renderTable = () => {\n            return (React.createElement(\"div\", { className: \"qs-Form-Section\" },\n                React.createElement(\"table\", { className: \"jp-table table-small\" },\n                    React.createElement(\"thead\", null,\n                        React.createElement(\"tr\", null,\n                            React.createElement(\"th\", null, \"Channel\"),\n                            React.createElement(\"th\", null, \"Package\"),\n                            React.createElement(\"th\", null, \"Role\"))),\n                    React.createElement(\"tbody\", null, this._api_key_info.roles.map((role, i) => {\n                        return (React.createElement(\"tr\", { key: i, className: \"qs-clickable-Row\", onClick: () => this._removeRole(i) },\n                            React.createElement(\"td\", null, role.channel.length !== 0 ? role.channel : '*'),\n                            React.createElement(\"td\", null, role.package.length !== 0 ? role.package : '*'),\n                            React.createElement(\"td\", null, role.role)));\n                    })))));\n        };\n        return (React.createElement(\"form\", { className: \"jp-Input-Dialog\" },\n            React.createElement(\"div\", { className: \"qs-Form-Section\" },\n                React.createElement(\"label\", { className: \"qs-Form-Section-Label\" }, \"Description\"),\n                React.createElement(\"input\", { type: \"textarea\", name: \"description\", className: \"jp-mod-styled\", value: this._api_key_info.description, onChange: this._handleDescription })),\n            React.createElement(\"div\", { className: \"qs-Form-Section\" },\n                React.createElement(\"label\", { className: \"qs-Form-Section-Label\" }, \"Expiration date\"),\n                React.createElement(\"input\", { type: \"date\", name: \"expire_at\", className: \"jp-mod-styled\", min: moment().format(moment.HTML5_FMT.DATE), value: this._api_key_info.expire_at, onChange: this._handleExpire })),\n            React.createElement(\"div\", { className: \"qs-Form-Section-Row\" },\n                React.createElement(\"input\", { id: \"user-apiKey\", type: \"checkbox\", name: \"user-apiKey\", defaultChecked: this._user_api_key, onChange: this._handleUserCheck }),\n                React.createElement(\"label\", null,\n                    \"API key with same roles as\",\n                    ' ',\n                    React.createElement(\"label\", { className: \"qs-Label-Caption\" }, this._username))),\n            !this._user_api_key && (React.createElement(React.Fragment, null,\n                this._apiStatus === API_STATUSES.PENDING && (React.createElement(InlineLoader, { text: \"Fetching user channels and packages\" })),\n                this._channels.length !== 0 ? (React.createElement(React.Fragment, null,\n                    renderChannels(),\n                    this._role.channel.length !== 0 ? (React.createElement(React.Fragment, null,\n                        this._packages_channel.length !== 0 && renderPackages(),\n                        renderRoles(),\n                        React.createElement(\"div\", { className: \"qs-Form-Section\" },\n                            React.createElement(Button, { onClick: this._addRole, minimal: true }, \"Add role\")))) : (React.createElement(\"label\", null, \"No packages available\")))) : (React.createElement(\"label\", null, \"No channels available\")),\n                this._api_key_info.roles.length !== 0 && renderTable()))));\n    }\n}\n/**\n * A ReactWidget to render a table for APIKeys' roles.\n */\nexport class APIKeyDialog extends ReactWidget {\n    /**\n     * Construct a `APIKeyDialog`.\n     *\n     * @param roles\n     */\n    constructor(roles) {\n        super();\n        this._roles = roles;\n    }\n    render() {\n        return (React.createElement(\"table\", { className: \"jp-table table-small\" },\n            React.createElement(\"thead\", null,\n                React.createElement(\"tr\", null,\n                    React.createElement(\"th\", null, \"Channel\"),\n                    React.createElement(\"th\", null, \"Package\"),\n                    React.createElement(\"th\", null, \"Role\"))),\n            React.createElement(\"tbody\", { className: \"qs-scrollable-Table\" }, this._roles.map((role, i) => {\n                return (React.createElement(\"tr\", { key: i },\n                    React.createElement(\"td\", null, role.channel ? role.channel : '*'),\n                    React.createElement(\"td\", null, role.package ? role.package : '*'),\n                    React.createElement(\"td\", null, role.role ? role.role : '*')));\n            }))));\n    }\n}\n//# sourceMappingURL=apiKeyDialog.js.map","import { IRouter, } from '@jupyterlab/application';\nimport { DOMUtils, ReactWidget } from '@jupyterlab/apputils';\nimport { ServerConnection } from '@jupyterlab/services';\nimport { URLExt } from '@jupyterlab/coreutils';\nimport { FetchHoc, Breadcrumbs } from '@quetz-frontend/apputils';\nimport { ILogInMenu } from '@quetz-frontend/menu';\nimport { last, capitalize } from 'lodash';\nimport { BrowserRouter as Router, Route, Switch, Redirect, NavLink, } from 'react-router-dom';\nimport ReactNotification from 'react-notifications-component';\nimport * as React from 'react';\nimport UserAPIKey from './api-key';\nimport UserProfile from './tab-profile';\nimport UserPackages from './tab-packages';\nimport UserChannels from './tab-channels';\n/**\n * The command ids used by the main plugin.\n */\nexport var CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.plugin = '@quetz-frontend/user-extension:user';\n    CommandIDs.open = '@quetz-frontend/user-extension:open';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * The main menu plugin.\n */\nconst plugin = {\n    id: CommandIDs.plugin,\n    autoStart: true,\n    requires: [IRouter, ILogInMenu],\n    activate: (app, router, menu) => {\n        const { shell, commands } = app;\n        commands.addCommand(CommandIDs.open, {\n            execute: () => {\n                shell.add(new UserRouter(), 'main');\n            },\n        });\n        router.register({\n            pattern: /user.*/,\n            command: CommandIDs.open,\n        });\n        menu.addItem({\n            id: CommandIDs.open,\n            label: 'Profile',\n            icon: 'empty',\n            api: '/user',\n            loggedIn: true,\n        });\n    },\n};\nexport default plugin;\nconst getBreadcrumbText = () => {\n    const currentSection = last(window.location.pathname.split('/'));\n    if (currentSection === 'api-keys') {\n        return 'API keys';\n    }\n    return capitalize(currentSection);\n};\nclass UserRouter extends ReactWidget {\n    constructor() {\n        super();\n        this.id = DOMUtils.createDomID();\n        this.title.label = 'User main page';\n    }\n    render() {\n        const settings = ServerConnection.makeSettings();\n        const url = URLExt.join(settings.baseUrl, '/api/me');\n        const breadcrumbItems = [\n            {\n                text: 'Home',\n                href: '/',\n            },\n            {\n                text: 'User details',\n                link: '/',\n            },\n            {\n                text: getBreadcrumbText(),\n            },\n        ];\n        return (React.createElement(Router, { basename: \"/user\" },\n            React.createElement(ReactNotification, null),\n            React.createElement(\"div\", { className: \"page-contents-width-limit\" },\n                React.createElement(Breadcrumbs, { items: breadcrumbItems }),\n                React.createElement(\"h2\", { className: \"heading2\" }, \"User details\"),\n                React.createElement(\"div\", { className: \"left-right\" },\n                    React.createElement(\"div\", { className: \"leftbar\" },\n                        React.createElement(NavLink, { className: \"leftbar-item\", to: \"/profile\" }, \"Profile\"),\n                        React.createElement(NavLink, { className: \"leftbar-item\", to: \"/api-keys\" }, \"API key\"),\n                        React.createElement(NavLink, { className: \"leftbar-item\", to: \"/channels\" }, \"Channels\"),\n                        React.createElement(NavLink, { className: \"leftbar-item\", to: \"/packages\" }, \"Packages\")),\n                    React.createElement(\"div\", { className: \"right-section\" },\n                        React.createElement(FetchHoc, { url: url, loadingMessage: \"Fetching user information\", genericErrorMessage: \"Error fetching user information\" }, (userData) => (React.createElement(Switch, null,\n                            React.createElement(Route, { path: \"/profile\" },\n                                React.createElement(UserProfile, { userData: userData })),\n                            React.createElement(Route, { path: \"/api-keys\" },\n                                React.createElement(UserAPIKey, null)),\n                            React.createElement(Route, { path: \"/channels\" },\n                                React.createElement(UserChannels, { username: userData.user.username })),\n                            React.createElement(Route, { path: \"/packages\" },\n                                React.createElement(UserPackages, { username: userData.user.username })),\n                            React.createElement(Route, { path: \"/\", exact: true },\n                                React.createElement(Redirect, { to: \"/profile\" }))))))))));\n    }\n}\n//# sourceMappingURL=index.js.map","import { ServerConnection } from '@jupyterlab/services';\nimport { URLExt } from '@jupyterlab/coreutils';\nimport { PaginatedTable } from '@quetz-frontend/table';\nimport * as React from 'react';\nclass UserChannels extends React.PureComponent {\n    render() {\n        const { username } = this.props;\n        const settings = ServerConnection.makeSettings();\n        const url = URLExt.join(settings.baseUrl, '/api/paginated/users', username, '/channels');\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"h3\", { className: \"heading3\" }, \"Channels\"),\n            React.createElement(PaginatedTable, { url: url, columns: getUserChannelsTableColumns(), to: (rowData) => `/${rowData.name}` })));\n    }\n}\nexport default UserChannels;\nexport const getUserChannelsTableColumns = () => [\n    {\n        Header: 'Name',\n        accessor: 'name',\n        Cell: ({ row }) => (React.createElement(\"a\", { href: `/channels/${row.original.name}` }, row.original.name)),\n    },\n    {\n        Header: 'Role',\n        accessor: 'role',\n    },\n];\n//# sourceMappingURL=tab-channels.js.map","import { ServerConnection } from '@jupyterlab/services';\nimport { URLExt } from '@jupyterlab/coreutils';\nimport { PaginatedTable } from '@quetz-frontend/table';\nimport * as React from 'react';\nclass UserPackages extends React.PureComponent {\n    render() {\n        const { username } = this.props;\n        const settings = ServerConnection.makeSettings();\n        const url = URLExt.join(settings.baseUrl, '/api/paginated/users', username, '/packages');\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"h3\", { className: \"heading3\" }, \"Packages\"),\n            React.createElement(PaginatedTable, { url: url, columns: getUserChannelsTableColumns(), to: (rowData) => `/${rowData.name}` })));\n    }\n}\nexport default UserPackages;\nexport const getUserChannelsTableColumns = () => [\n    {\n        Header: 'Name',\n        accessor: 'name',\n        Cell: ({ row }) => (React.createElement(\"a\", { href: `/channels/${row.original.name}` }, row.original.name)),\n    },\n    {\n        Header: 'Role',\n        accessor: 'role',\n    },\n];\n//# sourceMappingURL=tab-packages.js.map","import * as React from 'react';\nclass UserProfile extends React.PureComponent {\n    render() {\n        const { userData } = this.props;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"h3\", { className: \"heading3\" }, \"Profile\"),\n            React.createElement(\"p\", { className: \"caption-inline\" }, \"Name\"),\n            React.createElement(\"p\", { className: \"paragraph\" }, userData.name),\n            React.createElement(\"p\", { className: \"caption-inline\" }, \"Username\"),\n            React.createElement(\"p\", { className: \"paragraph\" }, userData.user.username),\n            React.createElement(\"p\", { className: \"caption-inline\" }, \"Avatar\"),\n            React.createElement(\"img\", { className: \"user-avatar\", src: userData.avatar_url, alt: \"\" })));\n    }\n}\nexport default UserProfile;\n//# sourceMappingURL=tab-profile.js.map"],"sourceRoot":""}
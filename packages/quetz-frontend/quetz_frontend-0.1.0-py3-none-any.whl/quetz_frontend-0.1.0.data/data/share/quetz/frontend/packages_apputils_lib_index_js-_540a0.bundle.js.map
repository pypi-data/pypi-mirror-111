{"version":3,"sources":["webpack://@quetz-frontend/app/../../node_modules/clsx/dist/clsx.m.js","webpack://@quetz-frontend/app/../../packages/apputils/lib/breadcrumbs.js","webpack://@quetz-frontend/app/../../packages/apputils/lib/constants.js","webpack://@quetz-frontend/app/../../packages/apputils/lib/fetch-hoc.js","webpack://@quetz-frontend/app/../../packages/apputils/lib/index.js","webpack://@quetz-frontend/app/../../packages/apputils/lib/loader.js","webpack://@quetz-frontend/app/../../packages/apputils/lib/notification.js","webpack://@quetz-frontend/app/../../packages/apputils/lib/search.js","webpack://@quetz-frontend/app/../../packages/apputils/lib/utils.js"],"names":[],"mappings":"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","file":"packages_apputils_lib_index_js-_540a0.bundle.js","sourcesContent":["function toVal(mix) {\n\tvar k, y, str='';\n\n\tif (typeof mix === 'string' || typeof mix === 'number') {\n\t\tstr += mix;\n\t} else if (typeof mix === 'object') {\n\t\tif (Array.isArray(mix)) {\n\t\t\tfor (k=0; k < mix.length; k++) {\n\t\t\t\tif (mix[k]) {\n\t\t\t\t\tif (y = toVal(mix[k])) {\n\t\t\t\t\t\tstr && (str += ' ');\n\t\t\t\t\t\tstr += y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor (k in mix) {\n\t\t\t\tif (mix[k]) {\n\t\t\t\t\tstr && (str += ' ');\n\t\t\t\t\tstr += k;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn str;\n}\n\nexport default function () {\n\tvar i=0, tmp, x, str='';\n\twhile (i < arguments.length) {\n\t\tif (tmp = arguments[i++]) {\n\t\t\tif (x = toVal(tmp)) {\n\t\t\t\tstr && (str += ' ');\n\t\t\t\tstr += x\n\t\t\t}\n\t\t}\n\t}\n\treturn str;\n}\n","import { reduce, union } from 'lodash';\nimport * as React from 'react';\nconst BreadcrumbChild = ({ data }) => {\n    if (data.link) {\n        return (React.createElement(\"div\", { className: \"breadcrumb-link\", \n            //@ts-ignore\n            onClick: () => window.router.navigate(data.link) }, data.text));\n    }\n    if (data.href) {\n        return (React.createElement(\"a\", { href: data.href, className: \"breadcrumb-link\" }, data.text));\n    }\n    return data.text;\n};\nexport class Breadcrumbs extends React.PureComponent {\n    render() {\n        const { items } = this.props;\n        return (React.createElement(\"div\", { className: \"breadcrumbs\" }, reduce(items, (unionArray, item) => union(unionArray, [\n            React.createElement(\"div\", { className: \"breadcrumb-item\", key: item.text },\n                React.createElement(BreadcrumbChild, { data: item })),\n            React.createElement(\"div\", { className: \"breadcrumb-separator\", key: `${item.text}-separator` }, \"\\u2003/\\u2003\"),\n        ]), []).slice(0, -1)));\n    }\n}\n//# sourceMappingURL=breadcrumbs.js.map","export var API_STATUSES;\n(function (API_STATUSES) {\n    API_STATUSES[\"PENDING\"] = \"PENDING\";\n    API_STATUSES[\"SUCCESS\"] = \"SUCCESS\";\n    API_STATUSES[\"FAILED\"] = \"FAILED\";\n})(API_STATUSES || (API_STATUSES = {}));\nexport const KB_SIZE = 1024;\nexport const MB_SIZE = 1024 * KB_SIZE;\nexport const GB_SIZE = 1024 * MB_SIZE;\n//# sourceMappingURL=constants.js.map","import { ServerConnection } from '@jupyterlab/services';\nimport * as React from 'react';\nimport { API_STATUSES } from './constants';\nimport { InlineLoader } from './loader';\nexport class FetchHoc extends React.PureComponent {\n    constructor(props) {\n        super(props);\n        this.componentDidMount = () => {\n            this.tryFetch();\n        };\n        this.tryFetch = async () => {\n            const { url } = this.props;\n            this.setState({\n                apiStatus: API_STATUSES.PENDING,\n            });\n            const settings = ServerConnection.makeSettings();\n            const resp = await ServerConnection.makeRequest(url, {}, settings);\n            if (!resp.ok) {\n                this.setState({\n                    error: resp.statusText,\n                    apiStatus: API_STATUSES.FAILED,\n                });\n            }\n            else {\n                this.setState({\n                    data: await resp.json(),\n                    apiStatus: API_STATUSES.SUCCESS,\n                });\n            }\n        };\n        this.state = {\n            data: null,\n            apiStatus: API_STATUSES.PENDING,\n            error: '',\n        };\n    }\n    render() {\n        const { apiStatus, data, error } = this.state;\n        const { children, loadingMessage, genericErrorMessage } = this.props;\n        if (apiStatus === API_STATUSES.PENDING) {\n            return React.createElement(InlineLoader, { text: loadingMessage });\n        }\n        if (apiStatus === API_STATUSES.FAILED) {\n            return (React.createElement(\"p\", { className: \"paragraph padding\" },\n                error || genericErrorMessage || 'Error occured while fetching data',\n                \"\\u2003\",\n                React.createElement(\"button\", { className: \"btn btn-inline\", onClick: this.tryFetch }, \"Try again\")));\n        }\n        return React.createElement(React.Fragment, null, children(data));\n    }\n}\n//# sourceMappingURL=fetch-hoc.js.map","export * from './breadcrumbs';\nexport * from './constants';\nexport * from './fetch-hoc';\nexport * from './loader';\nexport * from './notification';\nexport * from './search';\nexport * from './utils';\n//# sourceMappingURL=index.js.map","import * as React from 'react';\nexport class InlineLoader extends React.PureComponent {\n    render() {\n        const { text } = this.props;\n        return (React.createElement(\"div\", { className: \"loader-wrapper padding\" },\n            React.createElement(\"div\", { className: \"loader\" }),\n            text && React.createElement(\"p\", { className: \"text loader-text\" }, text)));\n    }\n}\n//# sourceMappingURL=loader.js.map","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTimes, faCheckCircle, faTimesCircle, faInfoCircle, faExclamationCircle, } from '@fortawesome/free-solid-svg-icons';\nimport clsx from 'clsx';\nimport { store } from 'react-notifications-component';\nimport * as React from 'react';\nexport const NOTIFICATION_TYPES = {\n    SUCCESS: 'success',\n    DANGER: 'danger',\n    INFO: 'info',\n    DEFAULT: 'default',\n    WARNING: 'warning',\n};\nconst NOTIFICATION_ICONS = {\n    [NOTIFICATION_TYPES.SUCCESS]: faCheckCircle,\n    [NOTIFICATION_TYPES.DANGER]: faTimesCircle,\n    [NOTIFICATION_TYPES.INFO]: faInfoCircle,\n    [NOTIFICATION_TYPES.DEFAULT]: faInfoCircle,\n    [NOTIFICATION_TYPES.WARNING]: faExclamationCircle,\n};\nclass NotificationComponent extends React.PureComponent {\n    render() {\n        const { id, type, title, message } = this.props;\n        return (React.createElement(\"div\", { className: \"notification-item\" },\n            React.createElement(\"p\", { className: clsx('notification-icon', type) },\n                React.createElement(FontAwesomeIcon, { icon: NOTIFICATION_ICONS[type] })),\n            React.createElement(\"div\", { className: \"notification-content\" },\n                title && React.createElement(\"p\", { className: clsx('notification-title', type) }, title),\n                message && React.createElement(\"p\", { className: \"notification-message\" }, message)),\n            React.createElement(\"button\", { className: \"notification-close\" },\n                React.createElement(FontAwesomeIcon, { icon: faTimes, onClick: () => store.removeNotification(id) }))));\n    }\n}\nexport const sendNotification = ({ type = NOTIFICATION_TYPES.DEFAULT, title, message, duration, }) => {\n    const notifId = store.addNotification({\n        content: ({ id }) => (React.createElement(NotificationComponent, { id: id, title: title, type: type, message: message })),\n        insert: 'top',\n        container: 'top-right',\n        animationIn: ['animate__animated', 'animate__fadeIn'],\n        animationOut: ['animate__animated', 'animate__fadeOut'],\n        dismiss: {\n            duration,\n        },\n    });\n    // TODO: Find out why the notifiaction is not automatically disappearing\n    if (duration) {\n        setTimeout(() => {\n            store.removeNotification(notifId);\n        }, duration);\n    }\n};\n//# sourceMappingURL=notification.js.map","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\nimport * as React from 'react';\nexport class SearchBox extends React.PureComponent {\n    constructor(props) {\n        super(props);\n        this.updateInput = (e) => {\n            const { onTextUpdate } = this.props;\n            this.setState({\n                input: e.target.value,\n            });\n            if (onTextUpdate) {\n                onTextUpdate(e.target.value);\n            }\n        };\n        this.onSubmit = (e) => {\n            const { onSubmit } = this.props;\n            const { input } = this.state;\n            e.preventDefault();\n            if (onSubmit) {\n                onSubmit(input);\n            }\n        };\n        this.state = {\n            input: '',\n        };\n    }\n    render() {\n        const { input } = this.state;\n        const { onSubmit } = this.props;\n        return (React.createElement(\"form\", { onSubmit: this.onSubmit },\n            React.createElement(\"div\", { className: \"btn-group\" },\n                React.createElement(\"input\", { className: \"input search-input\", value: input, type: \"text\", onChange: this.updateInput, placeholder: \"Search\" }),\n                onSubmit && (React.createElement(\"button\", { className: \"btn btn-default\", type: \"submit\" },\n                    React.createElement(FontAwesomeIcon, { icon: faSearch }))))));\n    }\n}\n//# sourceMappingURL=search.js.map","import { round } from 'lodash';\nimport { GB_SIZE, KB_SIZE, MB_SIZE } from './constants';\nimport { NOTIFICATION_TYPES, sendNotification } from './notification';\nexport const formatPlural = (count, text) => `${count} ${text}${count > 1 ? 's' : ''}`;\nexport const formatSize = (sizeInBytes) => {\n    if (sizeInBytes > GB_SIZE) {\n        return `${round(sizeInBytes / GB_SIZE, 2)} GB`;\n    }\n    if (sizeInBytes > MB_SIZE) {\n        return `${round(sizeInBytes / MB_SIZE, 2)} MB`;\n    }\n    if (sizeInBytes > KB_SIZE) {\n        return `${round(sizeInBytes / KB_SIZE, 2)} KB`;\n    }\n    return `${sizeInBytes} bytes`;\n};\nexport const copyToClipboard = (text, textType) => {\n    navigator.clipboard\n        .writeText(text)\n        .then(() => {\n        sendNotification({\n            type: NOTIFICATION_TYPES.INFO,\n            message: `Copied ${textType && `${textType} `}to clipboard`,\n            duration: 3000,\n        });\n    })\n        .catch((e) => console.error(e));\n};\n//# sourceMappingURL=utils.js.map"],"sourceRoot":""}
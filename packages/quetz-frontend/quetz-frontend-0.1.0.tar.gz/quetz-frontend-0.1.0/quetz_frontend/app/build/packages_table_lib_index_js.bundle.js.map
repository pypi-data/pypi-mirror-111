{"version":3,"sources":["webpack://@quetz-frontend/app/../../node_modules/clsx/dist/clsx.m.js","webpack://@quetz-frontend/app/../../packages/table/lib/index.js","webpack://@quetz-frontend/app/../../packages/table/lib/list.js","webpack://@quetz-frontend/app/../../packages/table/lib/pagination.js","webpack://@quetz-frontend/app/../../packages/table/lib/table.js"],"names":[],"mappings":"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","file":"packages_table_lib_index_js.bundle.js","sourcesContent":["function toVal(mix) {\n\tvar k, y, str='';\n\n\tif (typeof mix === 'string' || typeof mix === 'number') {\n\t\tstr += mix;\n\t} else if (typeof mix === 'object') {\n\t\tif (Array.isArray(mix)) {\n\t\t\tfor (k=0; k < mix.length; k++) {\n\t\t\t\tif (mix[k]) {\n\t\t\t\t\tif (y = toVal(mix[k])) {\n\t\t\t\t\t\tstr && (str += ' ');\n\t\t\t\t\t\tstr += y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor (k in mix) {\n\t\t\t\tif (mix[k]) {\n\t\t\t\t\tstr && (str += ' ');\n\t\t\t\t\tstr += k;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn str;\n}\n\nexport default function () {\n\tvar i=0, tmp, x, str='';\n\twhile (i < arguments.length) {\n\t\tif (tmp = arguments[i++]) {\n\t\t\tif (x = toVal(tmp)) {\n\t\t\t\tstr && (str += ' ');\n\t\t\t\tstr += x\n\t\t\t}\n\t\t}\n\t}\n\treturn str;\n}\n","export * from './list';\nexport * from './pagination';\nexport * from './table';\n//# sourceMappingURL=index.js.map","import { ServerConnection } from '@jupyterlab/services';\nimport { useTable, useFlexLayout, usePagination } from 'react-table';\nimport clsx from 'clsx';\nimport * as React from 'react';\nimport { Pagination } from './pagination';\nconst headerProps = (props, { column }) => getStyles(props, column.align);\nconst cellProps = (props, { cell }) => getStyles(props, cell.column.align);\nconst getStyles = (props, align = 'left') => [\n    props,\n    {\n        style: {\n            justifyContent: align === 'right' ? 'flex-end' : 'flex-start',\n            alignItems: 'flex-start',\n            display: 'flex',\n        },\n    },\n];\nexport const List = ({ columns: userColumns, data, to, paginated, fetchData, loading, pageCount: controlledPageCount, dataSize, }) => {\n    const defaultColumn = {\n        width: 150, // width is used for both the flex-basis and flex-grow\n    };\n    const { getTableProps, headerGroups, prepareRow, \n    // Non-paginated table\n    rows, \n    // Paginated table\n    page, canPreviousPage, canNextPage, pageOptions, pageCount, gotoPage, nextPage, previousPage, setPageSize, state: { pageIndex, pageSize }, } = useTable({\n        columns: userColumns,\n        data,\n        defaultColumn,\n        initialState: { pageIndex: 0 },\n        manualPagination: paginated,\n        pageCount: controlledPageCount,\n    }, useFlexLayout, (hooks) => {\n        hooks.allColumns.push((columns) => [...columns]);\n    }, ...(paginated ? [usePagination] : []));\n    if (paginated) {\n        React.useEffect(() => {\n            fetchData({ pageIndex, pageSize });\n        }, [fetchData, pageIndex, pageSize]);\n    }\n    // Only show the \"Showing 1 to x of y results and arrows if there's more than one page\"\n    const showPaginationInformation = dataSize > pageSize;\n    const route = (path) => {\n        if (path) {\n            //@ts-ignore\n            window.router.navigate(path);\n        }\n    };\n    return (React.createElement(React.Fragment, null,\n        React.createElement(\"div\", Object.assign({}, getTableProps(), { className: \"table\" }),\n            React.createElement(\"div\", null, headerGroups.map((headerGroup, key) => (React.createElement(\"div\", Object.assign({}, headerGroup.getHeaderGroupProps({\n            // style: { paddingRight: '15px' },\n            }), { className: \"tr\", key: key }), headerGroup.headers.map((column) => (React.createElement(\"div\", Object.assign({}, column.getHeaderProps(headerProps), { className: \"th\", key: column.id }), column.render('Header')))))))),\n            React.createElement(\"div\", { className: \"tbody\" },\n                ((paginated ? page : rows) || []).map((row) => {\n                    prepareRow(row);\n                    return (React.createElement(\"div\", Object.assign({}, row.getRowProps(), { key: row.id, className: clsx('tr', 'list-row', {\n                            clickable: !!to,\n                        }), onClick: () => route(to ? to(row.original) : null) }), row.cells.map((cell) => {\n                        return (React.createElement(\"div\", Object.assign({}, cell.getCellProps(cellProps), { className: \"td\", key: cell.column.id }), cell.render('Cell')));\n                    })));\n                }),\n                React.createElement(\"div\", { className: \"tr\" }, !loading && data.length === 0 && (React.createElement(\"div\", { className: \"padding-bottom padding-top\" }, \"No data available\"))))),\n        paginated && showPaginationInformation && (React.createElement(Pagination, { pageSize: pageSize, pageCount: pageCount, gotoPage: gotoPage, canPreviousPage: canPreviousPage, previousPage: previousPage, nextPage: nextPage, canNextPage: canNextPage, pageIndex: pageIndex, pageOptions: pageOptions, setPageSize: setPageSize, loading: loading }))));\n};\nexport const PaginatedList = ({ url, columns, to, q }) => {\n    const [data, setData] = React.useState([]);\n    const [loading, setLoading] = React.useState(false);\n    const [pageCount, setPageCount] = React.useState(0);\n    const [dataSize, setDataSize] = React.useState(0);\n    const fetchIdRef = React.useRef(0);\n    const fetchData = React.useCallback(async ({ pageSize, pageIndex }) => {\n        const fetchId = ++fetchIdRef.current;\n        setLoading(true);\n        const params = JSON.stringify(Object.assign(Object.assign({}, q), { skip: pageIndex * pageSize, limit: pageSize }));\n        const settings = ServerConnection.makeSettings();\n        const resp = await ServerConnection.makeRequest(`${url}?${params}`, {}, settings);\n        const data = await resp.json();\n        if (data && fetchId === fetchIdRef.current) {\n            setData(data.result);\n            setDataSize(data.pagination.all_records_count);\n            setPageCount(Math.ceil(data.pagination.all_records_count / pageSize));\n            setLoading(false);\n        }\n    }, []);\n    return (React.createElement(List, { columns: columns, data: data, to: to, paginated: true, fetchData: fetchData, loading: loading, pageCount: pageCount, dataSize: dataSize }));\n};\n//# sourceMappingURL=list.js.map","import { InlineLoader } from '@quetz-frontend/apputils';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faAngleDoubleLeft, faAngleDoubleRight, faAngleLeft, faAngleRight, } from '@fortawesome/free-solid-svg-icons';\nimport * as React from 'react';\nexport const Pagination = ({ pageSize, pageCount, gotoPage, canPreviousPage, previousPage, nextPage, canNextPage, pageIndex, pageOptions, setPageSize, loading, }) => (React.createElement(\"div\", { className: \"jp-table-controls\" },\n    React.createElement(\"div\", { className: \"jp-table-controls-left\" },\n        React.createElement(\"div\", { className: \"btn-group\" },\n            React.createElement(\"button\", { className: \"btn btn-default\", onClick: () => gotoPage(0), disabled: !canPreviousPage },\n                React.createElement(FontAwesomeIcon, { icon: faAngleDoubleLeft })),\n            React.createElement(\"button\", { className: \"btn btn-default\", onClick: () => previousPage(), disabled: !canPreviousPage },\n                React.createElement(FontAwesomeIcon, { icon: faAngleLeft })),\n            React.createElement(\"button\", { className: \"btn btn-default\", onClick: () => nextPage(), disabled: !canNextPage },\n                React.createElement(FontAwesomeIcon, { icon: faAngleRight })),\n            React.createElement(\"button\", { className: \"btn btn-default\", onClick: () => gotoPage(pageCount - 1), disabled: !canNextPage },\n                React.createElement(FontAwesomeIcon, { icon: faAngleDoubleRight }))),\n        React.createElement(\"div\", { className: \"jp-table-controls-text\" }, loading ? (React.createElement(InlineLoader, null)) : (React.createElement(\"p\", { className: \"paragraph padding-text\" },\n            \"Page\",\n            ' ',\n            React.createElement(\"strong\", null,\n                pageIndex + 1,\n                \" of \",\n                pageOptions.length))))),\n    React.createElement(\"div\", { className: \"jp-table-controls-right jp-table-controls-text\" },\n        React.createElement(\"p\", { className: \"paragraph padding-side\" },\n            \"Go to page: \\u2003\",\n            React.createElement(\"input\", { className: \"input\", type: \"number\", value: pageIndex + 1, onChange: (e) => {\n                    const page = e.target.value ? Number(e.target.value) - 1 : 0;\n                    gotoPage(page);\n                }, style: { width: '100px' } })),\n        React.createElement(\"p\", { className: \"paragraph padding-side\" },\n            React.createElement(\"select\", { className: \"btn btn-default\", value: pageSize, onChange: (e) => {\n                    setPageSize(Number(e.target.value));\n                } }, [25, 50, 100].map((pageSize) => (React.createElement(\"option\", { key: pageSize, value: pageSize, defaultValue: \"25\" },\n                \"Show \",\n                pageSize))))))));\n//# sourceMappingURL=pagination.js.map","import { ServerConnection } from '@jupyterlab/services';\nimport { useExpanded, useTable, usePagination, useGlobalFilter, useAsyncDebounce, } from 'react-table';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { Pagination } from './pagination';\nconst recordPaginationHistory = ({ pageSize, pageIndex, query }) => {\n    const search_params = new URLSearchParams(window.location.search);\n    const prev_index = search_params.get('index');\n    const prev_size = search_params.get('size');\n    const prev_query = search_params.get('query') || '';\n    if (!prev_index && pageIndex === 0 && !query) {\n        return;\n    }\n    if (prev_index != pageIndex || prev_size != pageSize || prev_query != query) {\n        search_params.delete('size');\n        search_params.append('size', pageSize);\n        search_params.delete('index');\n        search_params.append('index', pageIndex);\n        if (query) {\n            search_params.delete('query');\n            search_params.append('query', query);\n        }\n        window.history.pushState(null, '', '?' + search_params.toString());\n    }\n};\nexport const Table = ({ columns: userColumns, data, dataSize, fetchData, renderRowSubComponent, loading, paginated, pageIndex: controlledPageIndex, pageSize: controlledPageSize, pageCount: controlledPageCount, enableSearch, query: controlledQuery, }) => {\n    const searching = React.useRef(false);\n    const { getTableProps, getTableBodyProps, headerGroups, prepareRow, \n    // Non-paginated table\n    rows, \n    // Paginated table\n    page, canPreviousPage, canNextPage, pageOptions, pageCount, gotoPage, nextPage, previousPage, setPageSize, setGlobalFilter, state: { pageIndex, pageSize, globalFilter }, } = useTable({\n        columns: userColumns,\n        data,\n        initialState: {\n            pageIndex: controlledPageIndex,\n            pageSize: controlledPageSize,\n            globalFilter: controlledQuery,\n        },\n        manualPagination: paginated,\n        autoResetPage: true,\n        pageCount: controlledPageCount,\n        manualGlobalFilter: enableSearch,\n        autoResetGlobalFilter: true,\n    }, ...(enableSearch ? [useGlobalFilter] : []), useExpanded, ...(paginated ? [usePagination] : []));\n    // Debounce our onFetchData call for 100ms\n    const fetchDataDebounced = useAsyncDebounce(fetchData, 100);\n    // When these table states change, fetch new data!\n    React.useEffect(() => {\n        if (searching.current) {\n            gotoPage(0);\n        }\n        searching.current = false;\n        fetchDataDebounced({\n            pageIndex: pageIndex,\n            pageSize: pageSize,\n            query: globalFilter,\n        });\n    }, [fetchDataDebounced, pageIndex, pageSize, globalFilter]);\n    // Only show the \"Showing 1 to x of y results and arrows if there's more than one page\"\n    const showPaginationInformation = dataSize > pageSize;\n    return (React.createElement(React.Fragment, null,\n        enableSearch && (React.createElement(\"input\", { className: \"input search-input table-search-input\", placeholder: \"Search\", type: \"text\", value: globalFilter || '', onChange: (e) => {\n                searching.current = true;\n                setGlobalFilter(e.target.value);\n            } })),\n        React.createElement(\"table\", Object.assign({}, getTableProps(), { className: \"jp-table\" }),\n            React.createElement(\"thead\", null, headerGroups.map((headerGroup, key) => (React.createElement(\"tr\", Object.assign({}, headerGroup.getHeaderGroupProps(), { key: key }), headerGroup.headers.map((column) => (React.createElement(\"th\", Object.assign({}, column.getHeaderProps(), { key: column.id }), column.render('Header')))))))),\n            React.createElement(\"tbody\", Object.assign({}, getTableBodyProps()),\n                ((paginated ? page : rows) || []).map((row) => {\n                    prepareRow(row);\n                    return (React.createElement(React.Fragment, { key: row.id },\n                        React.createElement(\"tr\", Object.assign({ key: row.id }, row.getRowProps(), { className: clsx({ expanded: row.isExpanded }) }), row.cells.map((cell) => (React.createElement(\"td\", Object.assign({}, cell.getCellProps(), { key: cell.column.id }), cell.render('Cell'))))),\n                        row.isExpanded ? (React.createElement(\"tr\", null,\n                            React.createElement(\"td\", { colSpan: 5, className: \"jp-table-expanded-contents\" }, renderRowSubComponent({ row })))) : null));\n                }),\n                React.createElement(\"tr\", null, !loading && data.length === 0 && (React.createElement(\"td\", { colSpan: 10000 }, \"No data available\"))))),\n        paginated && showPaginationInformation && (React.createElement(Pagination, { pageSize: pageSize, pageCount: pageCount, gotoPage: gotoPage, canPreviousPage: canPreviousPage, previousPage: previousPage, nextPage: nextPage, canNextPage: canNextPage, pageIndex: pageIndex, pageOptions: pageOptions, setPageSize: setPageSize, loading: loading }))));\n};\nexport const PaginatedTable = ({ url, columns, renderRowSubComponent, enableSearch, }) => {\n    // get initial state from URL params\n    const search_params = new URLSearchParams(window.location.search);\n    const initialPageIndex = parseInt(search_params.get('index') || '0');\n    const initialPageSize = parseInt(search_params.get('size') || '25');\n    const initialQuery = search_params.get('query') || '';\n    const [state, setState] = React.useState({\n        data: [],\n        dataSize: 0,\n        loading: false,\n        pageIndex: initialPageIndex,\n        pageSize: initialPageSize,\n        pageCount: 0,\n        query: initialQuery,\n    });\n    const fetchIdRef = React.useRef(0);\n    const fetchData = React.useCallback(async ({ pageSize, pageIndex, query }) => {\n        const fetchId = ++fetchIdRef.current;\n        setState(Object.assign(Object.assign({}, state), { loading: true }));\n        const params = {\n            skip: pageIndex * pageSize,\n            limit: pageSize,\n            q: query,\n        };\n        let queryString = '';\n        for (const key of Object.keys(params)) {\n            if (params[key]) {\n                if (queryString.length) {\n                    queryString += '&';\n                }\n                queryString += key + '=' + encodeURIComponent(params[key]);\n            }\n        }\n        const settings = ServerConnection.makeSettings();\n        const resp = await ServerConnection.makeRequest(`${url}?${queryString}`, {}, settings);\n        const data = await resp.json();\n        if (data && fetchId === fetchIdRef.current) {\n            recordPaginationHistory({ pageIndex, pageSize, query });\n            setState({\n                data: data.result,\n                dataSize: data.pagination.all_records_count,\n                loading: false,\n                pageIndex: pageIndex,\n                pageSize: pageSize,\n                pageCount: Math.ceil(data.pagination.all_records_count / pageSize),\n                query: query,\n            });\n        }\n    }, []);\n    return (React.createElement(Table, { columns: columns, data: state.data, dataSize: state.dataSize, fetchData: fetchData, renderRowSubComponent: renderRowSubComponent, loading: state.loading, paginated: true, pageIndex: state.pageIndex, pageSize: state.pageSize, pageCount: state.pageCount, enableSearch: enableSearch, query: state.query }));\n};\nTable.propTypes = {\n    columns: PropTypes.any,\n    data: PropTypes.any,\n    renderRowSubComponent: PropTypes.any,\n    enableSearch: PropTypes.any,\n};\n//# sourceMappingURL=table.js.map"],"sourceRoot":""}
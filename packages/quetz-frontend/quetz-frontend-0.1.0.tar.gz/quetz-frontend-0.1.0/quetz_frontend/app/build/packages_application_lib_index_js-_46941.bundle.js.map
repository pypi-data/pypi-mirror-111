{"version":3,"sources":["webpack://@quetz-frontend/app/../../packages/application/lib/app.js","webpack://@quetz-frontend/app/../../packages/application/lib/index.js","webpack://@quetz-frontend/app/../../packages/application/lib/shell.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAA2D;AACR;AACnB;AAChC;AACA;AACA;AACO,kBAAkB,oEAAe;AACxC;AACA;AACA;AACA;AACA;AACA,2BAA2B,YAAY,yCAAK,IAAI;AAChD;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,uEAAoB;AAC1C,0BAA0B,uEAAoB;AAC9C,qBAAqB,uEAAoB;AACzC,wBAAwB,uEAAoB;AAC5C,0BAA0B,uEAAoB;AAC9C,wBAAwB,uEAAoB;AAC5C,qBAAqB,uEAAoB;AACzC,8BAA8B,uEAAoB;AAClD,yBAAyB,uEAAoB;AAC7C,2BAA2B,uEAAoB;AAC/C,yBAAyB,uEAAoB;AAC7C,+BAA+B,uEAAoB;AACnD,aAAa;AACb;AACA,6BAA6B,uEAAoB;AACjD,yBAAyB,uEAAoB;AAC7C,wBAAwB,uEAAoB;AAC5C,2BAA2B,uEAAoB;AAC/C,wBAAwB,uEAAoB;AAC5C,8BAA8B,uEAAoB;AAClD,4BAA4B,uEAAoB;AAChD,4BAA4B,uEAAoB;AAChD,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,+B;;;;;;;;;;;;;;;;;;AC9FsB;AACE;AACxB,iC;;;;;;;;;;;;;;;;;;;;;;;ACF6D;AACV;AACQ;AACX;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACO,oBAAoB,mDAAM;AACjC;AACA;AACA;AACA,+BAA+B,sDAAS;AACxC;AACA,yBAAyB,kDAAK;AAC9B;AACA;AACA,QAAQ,iEAAoB;AAC5B,QAAQ,iEAAoB;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,uDAAI;AACvB;AACA,eAAe,uDAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,sDAAsD,mBAAmB,gBAAgB;AACzF,kCAAkC,8DAAO;AACzC;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,8BAA8B,kEAAO;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,eAAe;AAC7D;AACA;AACA;AACA;AACA;AACA,4BAA4B,wEAAyB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,kDAAK;AACnC,YAAY,6EAA8B;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B,0BAA0B,kEAAmB;AAC7C,YAAY,8DAAe;AAC3B;AACA;AACA;AACA;AACA,CAAC,0BAA0B;AAC3B,iC","file":"packages_application_lib_index_js-_46941.bundle.js","sourcesContent":["import { JupyterFrontEnd, } from '@jupyterlab/application';\nimport { PageConfig } from '@jupyterlab/coreutils';\nimport { Shell } from './shell';\n/**\n * App is the main application class. It is instantiated once and shared.\n */\nexport class App extends JupyterFrontEnd {\n    /**\n     * Construct a new App object.\n     *\n     * @param options The instantiation options for an application.\n     */\n    constructor(options = { shell: new Shell() }) {\n        super({\n            shell: options.shell,\n        });\n        /**\n         * The name of the application.\n         */\n        this.name = 'Quetz';\n        /**\n         * A namespace/prefix plugins may use to denote their provenance.\n         */\n        this.namespace = this.name;\n        /**\n         * The version of the application.\n         */\n        this.version = 'unknown';\n    }\n    /**\n     * The JupyterLab application paths dictionary.\n     */\n    get paths() {\n        return {\n            urls: {\n                base: PageConfig.getOption('baseUrl'),\n                notFound: PageConfig.getOption('notFoundUrl'),\n                app: PageConfig.getOption('appUrl'),\n                static: PageConfig.getOption('staticUrl'),\n                settings: PageConfig.getOption('settingsUrl'),\n                themes: PageConfig.getOption('themesUrl'),\n                doc: PageConfig.getOption('docUrl'),\n                translations: PageConfig.getOption('translationsApiUrl'),\n                hubHost: PageConfig.getOption('hubHost') || undefined,\n                hubPrefix: PageConfig.getOption('hubPrefix') || undefined,\n                hubUser: PageConfig.getOption('hubUser') || undefined,\n                hubServerName: PageConfig.getOption('hubServerName') || undefined,\n            },\n            directories: {\n                appSettings: PageConfig.getOption('appSettingsDir'),\n                schemas: PageConfig.getOption('schemasDir'),\n                static: PageConfig.getOption('staticDir'),\n                templates: PageConfig.getOption('templatesDir'),\n                themes: PageConfig.getOption('themesDir'),\n                userSettings: PageConfig.getOption('userSettingsDir'),\n                serverRoot: PageConfig.getOption('serverRoot'),\n                workspaces: PageConfig.getOption('workspacesDir'),\n            },\n        };\n    }\n    /**\n     * Register plugins from a plugin module.\n     *\n     * @param mod - The plugin module to register.\n     */\n    registerPluginModule(mod) {\n        let data = mod.default;\n        // Handle commonjs exports.\n        if (!Object.prototype.hasOwnProperty.call(mod, '__esModule')) {\n            data = mod;\n        }\n        if (!Array.isArray(data)) {\n            data = [data];\n        }\n        data.forEach((item) => {\n            try {\n                this.registerPlugin(item);\n            }\n            catch (error) {\n                console.error(error);\n            }\n        });\n    }\n    /**\n     * Register the plugins from multiple plugin modules.\n     *\n     * @param mods - The plugin modules to register.\n     */\n    registerPluginModules(mods) {\n        mods.forEach((mod) => {\n            this.registerPluginModule(mod);\n        });\n    }\n}\n//# sourceMappingURL=app.js.map","export * from './app';\nexport * from './shell';\n//# sourceMappingURL=index.js.map","import { classes, LabIcon } from '@jupyterlab/ui-components';\nimport { ArrayExt, iter } from '@lumino/algorithm';\nimport { Panel, Widget, BoxLayout } from '@lumino/widgets';\nimport { MessageLoop } from '@lumino/messaging';\n/**\n * The default rank for ranked panels.\n */\nconst DEFAULT_RANK = 900;\n/**\n * The application shell.\n */\nexport class Shell extends Widget {\n    constructor() {\n        super();\n        this.id = 'main';\n        const rootLayout = new BoxLayout();\n        this._top = new Private.PanelHandler();\n        this._main = new Panel();\n        this._top.panel.id = 'top-panel';\n        this._main.id = 'main-panel';\n        BoxLayout.setStretch(this._top.panel, 0);\n        BoxLayout.setStretch(this._main, 1);\n        // this._main.spacing = 5;\n        rootLayout.spacing = 0;\n        rootLayout.addWidget(this._top.panel);\n        rootLayout.addWidget(this._main);\n        this.layout = rootLayout;\n    }\n    activateById(id) {\n        // no-op\n    }\n    /**\n     * Add a widget to the application shell.\n     *\n     * @param widget - The widget being added.\n     * @param area - Optional region in the shell into which the widget should\n     * be added.\n     * @param options\n     */\n    add(widget, area, options) {\n        var _a;\n        const rank = (_a = options === null || options === void 0 ? void 0 : options.rank) !== null && _a !== void 0 ? _a : DEFAULT_RANK;\n        if (area === 'top') {\n            return this._top.addWidget(widget, rank);\n        }\n        if (area === 'main' || area === undefined) {\n            // if (this._main.widgets.length > 0) {\n            //   // do not add the widget if there is already one\n            //   return;\n            // }\n            this._addToMainArea(widget);\n        }\n        return;\n    }\n    /**\n     * The current widget in the shell's main area.\n     */\n    get currentWidget() {\n        // TODO: use a focus tracker to return the current widget\n        return this._main.widgets[0];\n    }\n    /**\n     * Get the top area wrapper panel\n     */\n    get top() {\n        return this._topWrapper;\n    }\n    widgets(area) {\n        if (area === 'top') {\n            return iter(this._top.panel.widgets);\n        }\n        return iter(this._main.widgets);\n    }\n    /**\n     * Add a widget to the main content area.\n     *\n     * @param widget The widget to add.\n     */\n    _addToMainArea(widget) {\n        if (!widget.id) {\n            console.error('Widgets added to the app shell must have unique id property.');\n            return;\n        }\n        const dock = this._main;\n        const { title } = widget;\n        title.dataset = Object.assign(Object.assign({}, title.dataset), { id: widget.id });\n        if (title.icon instanceof LabIcon) {\n            // bind an appropriate style to the icon\n            title.icon = title.icon.bindprops({\n                stylesheet: 'mainAreaTab',\n            });\n        }\n        else if (typeof title.icon === 'string' || !title.icon) {\n            // add some classes to help with displaying css background imgs\n            title.iconClass = classes(title.iconClass, 'jp-Icon');\n        }\n        if (dock.widgets.length) {\n            dock.widgets[0].dispose();\n        }\n        dock.addWidget(widget);\n    }\n}\nvar Private;\n(function (Private) {\n    /**\n     * A less-than comparison function for side bar rank items.\n     *\n     * @param first\n     * @param second\n     */\n    function itemCmp(first, second) {\n        return first.rank - second.rank;\n    }\n    Private.itemCmp = itemCmp;\n    /**\n     * A class which manages a panel and sorts its widgets by rank.\n     */\n    class PanelHandler {\n        constructor() {\n            /**\n             * A message hook for child add/remove messages on the main area dock panel.\n             *\n             * @param handler\n             * @param msg\n             */\n            this._panelChildHook = (handler, msg) => {\n                switch (msg.type) {\n                    case 'child-added':\n                        {\n                            const widget = msg.child;\n                            // If we already know about this widget, we're done\n                            if (this._items.find((v) => v.widget === widget)) {\n                                break;\n                            }\n                            // Otherwise, add to the end by default\n                            const rank = this._items[this._items.length - 1].rank;\n                            this._items.push({ widget, rank });\n                        }\n                        break;\n                    case 'child-removed':\n                        {\n                            const widget = msg.child;\n                            ArrayExt.removeFirstWhere(this._items, (v) => v.widget === widget);\n                        }\n                        break;\n                    default:\n                        break;\n                }\n                return true;\n            };\n            this._items = new Array();\n            this._panel = new Panel();\n            MessageLoop.installMessageHook(this._panel, this._panelChildHook);\n        }\n        /**\n         * Get the panel managed by the handler.\n         */\n        get panel() {\n            return this._panel;\n        }\n        /**\n         * Add a widget to the panel.\n         *\n         * If the widget is already added, it will be moved.\n         *\n         * @param widget\n         * @param rank\n         */\n        addWidget(widget, rank) {\n            widget.parent = null;\n            const item = { widget, rank };\n            const index = ArrayExt.upperBound(this._items, item, Private.itemCmp);\n            ArrayExt.insert(this._items, index, item);\n            this._panel.insertWidget(index, widget);\n        }\n    }\n    Private.PanelHandler = PanelHandler;\n})(Private || (Private = {}));\n//# sourceMappingURL=shell.js.map"],"sourceRoot":""}
# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 6, 0):
    raise RuntimeError("Python 3.6 or later required")


from . import _IsotropicWaveletsPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkVowIsotropicWaveletPython
else:
    import _itkVowIsotropicWaveletPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkVowIsotropicWaveletPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkVowIsotropicWaveletPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.itkIsotropicWaveletFrequencyFunctionPython
import itk.itkIsotropicFrequencyFunctionPython
import itk.itkFrequencyFunctionPython
import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkPointPython
import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.itkSpatialFunctionPython
import itk.itkFunctionBasePython
import itk.itkCovariantVectorPython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkArrayPython
import itk.itkImagePython
import itk.itkImageRegionPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkContinuousIndexPython

def itkVowIsotropicWaveletD2PD2_New():
    return itkVowIsotropicWaveletD2PD2.New()

class itkVowIsotropicWaveletD2PD2(itk.itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionD2PD2):
    r"""Proxy of C++ itkVowIsotropicWaveletD2PD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVowIsotropicWaveletPython.itkVowIsotropicWaveletD2PD2___New_orig__)
    Clone = _swig_new_instance_method(_itkVowIsotropicWaveletPython.itkVowIsotropicWaveletD2PD2_Clone)
    SetKappa = _swig_new_instance_method(_itkVowIsotropicWaveletPython.itkVowIsotropicWaveletD2PD2_SetKappa)
    GetKappa = _swig_new_instance_method(_itkVowIsotropicWaveletPython.itkVowIsotropicWaveletD2PD2_GetKappa)
    __swig_destroy__ = _itkVowIsotropicWaveletPython.delete_itkVowIsotropicWaveletD2PD2
    cast = _swig_new_static_method(_itkVowIsotropicWaveletPython.itkVowIsotropicWaveletD2PD2_cast)

    def New(*args, **kargs):
        """New() -> itkVowIsotropicWaveletD2PD2

        Create a new object of the class itkVowIsotropicWaveletD2PD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVowIsotropicWaveletD2PD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVowIsotropicWaveletD2PD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVowIsotropicWaveletD2PD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVowIsotropicWaveletD2PD2 in _itkVowIsotropicWaveletPython:
_itkVowIsotropicWaveletPython.itkVowIsotropicWaveletD2PD2_swigregister(itkVowIsotropicWaveletD2PD2)
itkVowIsotropicWaveletD2PD2___New_orig__ = _itkVowIsotropicWaveletPython.itkVowIsotropicWaveletD2PD2___New_orig__
itkVowIsotropicWaveletD2PD2_cast = _itkVowIsotropicWaveletPython.itkVowIsotropicWaveletD2PD2_cast


def itkVowIsotropicWaveletD3PD3_New():
    return itkVowIsotropicWaveletD3PD3.New()

class itkVowIsotropicWaveletD3PD3(itk.itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionD3PD3):
    r"""Proxy of C++ itkVowIsotropicWaveletD3PD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVowIsotropicWaveletPython.itkVowIsotropicWaveletD3PD3___New_orig__)
    Clone = _swig_new_instance_method(_itkVowIsotropicWaveletPython.itkVowIsotropicWaveletD3PD3_Clone)
    SetKappa = _swig_new_instance_method(_itkVowIsotropicWaveletPython.itkVowIsotropicWaveletD3PD3_SetKappa)
    GetKappa = _swig_new_instance_method(_itkVowIsotropicWaveletPython.itkVowIsotropicWaveletD3PD3_GetKappa)
    __swig_destroy__ = _itkVowIsotropicWaveletPython.delete_itkVowIsotropicWaveletD3PD3
    cast = _swig_new_static_method(_itkVowIsotropicWaveletPython.itkVowIsotropicWaveletD3PD3_cast)

    def New(*args, **kargs):
        """New() -> itkVowIsotropicWaveletD3PD3

        Create a new object of the class itkVowIsotropicWaveletD3PD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVowIsotropicWaveletD3PD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVowIsotropicWaveletD3PD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVowIsotropicWaveletD3PD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVowIsotropicWaveletD3PD3 in _itkVowIsotropicWaveletPython:
_itkVowIsotropicWaveletPython.itkVowIsotropicWaveletD3PD3_swigregister(itkVowIsotropicWaveletD3PD3)
itkVowIsotropicWaveletD3PD3___New_orig__ = _itkVowIsotropicWaveletPython.itkVowIsotropicWaveletD3PD3___New_orig__
itkVowIsotropicWaveletD3PD3_cast = _itkVowIsotropicWaveletPython.itkVowIsotropicWaveletD3PD3_cast


def itkVowIsotropicWaveletD4PD4_New():
    return itkVowIsotropicWaveletD4PD4.New()

class itkVowIsotropicWaveletD4PD4(itk.itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionD4PD4):
    r"""Proxy of C++ itkVowIsotropicWaveletD4PD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVowIsotropicWaveletPython.itkVowIsotropicWaveletD4PD4___New_orig__)
    Clone = _swig_new_instance_method(_itkVowIsotropicWaveletPython.itkVowIsotropicWaveletD4PD4_Clone)
    SetKappa = _swig_new_instance_method(_itkVowIsotropicWaveletPython.itkVowIsotropicWaveletD4PD4_SetKappa)
    GetKappa = _swig_new_instance_method(_itkVowIsotropicWaveletPython.itkVowIsotropicWaveletD4PD4_GetKappa)
    __swig_destroy__ = _itkVowIsotropicWaveletPython.delete_itkVowIsotropicWaveletD4PD4
    cast = _swig_new_static_method(_itkVowIsotropicWaveletPython.itkVowIsotropicWaveletD4PD4_cast)

    def New(*args, **kargs):
        """New() -> itkVowIsotropicWaveletD4PD4

        Create a new object of the class itkVowIsotropicWaveletD4PD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVowIsotropicWaveletD4PD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVowIsotropicWaveletD4PD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVowIsotropicWaveletD4PD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVowIsotropicWaveletD4PD4 in _itkVowIsotropicWaveletPython:
_itkVowIsotropicWaveletPython.itkVowIsotropicWaveletD4PD4_swigregister(itkVowIsotropicWaveletD4PD4)
itkVowIsotropicWaveletD4PD4___New_orig__ = _itkVowIsotropicWaveletPython.itkVowIsotropicWaveletD4PD4___New_orig__
itkVowIsotropicWaveletD4PD4_cast = _itkVowIsotropicWaveletPython.itkVowIsotropicWaveletD4PD4_cast


def itkVowIsotropicWaveletF2PD2_New():
    return itkVowIsotropicWaveletF2PD2.New()

class itkVowIsotropicWaveletF2PD2(itk.itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionF2PD2):
    r"""Proxy of C++ itkVowIsotropicWaveletF2PD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVowIsotropicWaveletPython.itkVowIsotropicWaveletF2PD2___New_orig__)
    Clone = _swig_new_instance_method(_itkVowIsotropicWaveletPython.itkVowIsotropicWaveletF2PD2_Clone)
    SetKappa = _swig_new_instance_method(_itkVowIsotropicWaveletPython.itkVowIsotropicWaveletF2PD2_SetKappa)
    GetKappa = _swig_new_instance_method(_itkVowIsotropicWaveletPython.itkVowIsotropicWaveletF2PD2_GetKappa)
    __swig_destroy__ = _itkVowIsotropicWaveletPython.delete_itkVowIsotropicWaveletF2PD2
    cast = _swig_new_static_method(_itkVowIsotropicWaveletPython.itkVowIsotropicWaveletF2PD2_cast)

    def New(*args, **kargs):
        """New() -> itkVowIsotropicWaveletF2PD2

        Create a new object of the class itkVowIsotropicWaveletF2PD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVowIsotropicWaveletF2PD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVowIsotropicWaveletF2PD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVowIsotropicWaveletF2PD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVowIsotropicWaveletF2PD2 in _itkVowIsotropicWaveletPython:
_itkVowIsotropicWaveletPython.itkVowIsotropicWaveletF2PD2_swigregister(itkVowIsotropicWaveletF2PD2)
itkVowIsotropicWaveletF2PD2___New_orig__ = _itkVowIsotropicWaveletPython.itkVowIsotropicWaveletF2PD2___New_orig__
itkVowIsotropicWaveletF2PD2_cast = _itkVowIsotropicWaveletPython.itkVowIsotropicWaveletF2PD2_cast


def itkVowIsotropicWaveletF3PD3_New():
    return itkVowIsotropicWaveletF3PD3.New()

class itkVowIsotropicWaveletF3PD3(itk.itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionF3PD3):
    r"""Proxy of C++ itkVowIsotropicWaveletF3PD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVowIsotropicWaveletPython.itkVowIsotropicWaveletF3PD3___New_orig__)
    Clone = _swig_new_instance_method(_itkVowIsotropicWaveletPython.itkVowIsotropicWaveletF3PD3_Clone)
    SetKappa = _swig_new_instance_method(_itkVowIsotropicWaveletPython.itkVowIsotropicWaveletF3PD3_SetKappa)
    GetKappa = _swig_new_instance_method(_itkVowIsotropicWaveletPython.itkVowIsotropicWaveletF3PD3_GetKappa)
    __swig_destroy__ = _itkVowIsotropicWaveletPython.delete_itkVowIsotropicWaveletF3PD3
    cast = _swig_new_static_method(_itkVowIsotropicWaveletPython.itkVowIsotropicWaveletF3PD3_cast)

    def New(*args, **kargs):
        """New() -> itkVowIsotropicWaveletF3PD3

        Create a new object of the class itkVowIsotropicWaveletF3PD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVowIsotropicWaveletF3PD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVowIsotropicWaveletF3PD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVowIsotropicWaveletF3PD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVowIsotropicWaveletF3PD3 in _itkVowIsotropicWaveletPython:
_itkVowIsotropicWaveletPython.itkVowIsotropicWaveletF3PD3_swigregister(itkVowIsotropicWaveletF3PD3)
itkVowIsotropicWaveletF3PD3___New_orig__ = _itkVowIsotropicWaveletPython.itkVowIsotropicWaveletF3PD3___New_orig__
itkVowIsotropicWaveletF3PD3_cast = _itkVowIsotropicWaveletPython.itkVowIsotropicWaveletF3PD3_cast


def itkVowIsotropicWaveletF4PD4_New():
    return itkVowIsotropicWaveletF4PD4.New()

class itkVowIsotropicWaveletF4PD4(itk.itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionF4PD4):
    r"""Proxy of C++ itkVowIsotropicWaveletF4PD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVowIsotropicWaveletPython.itkVowIsotropicWaveletF4PD4___New_orig__)
    Clone = _swig_new_instance_method(_itkVowIsotropicWaveletPython.itkVowIsotropicWaveletF4PD4_Clone)
    SetKappa = _swig_new_instance_method(_itkVowIsotropicWaveletPython.itkVowIsotropicWaveletF4PD4_SetKappa)
    GetKappa = _swig_new_instance_method(_itkVowIsotropicWaveletPython.itkVowIsotropicWaveletF4PD4_GetKappa)
    __swig_destroy__ = _itkVowIsotropicWaveletPython.delete_itkVowIsotropicWaveletF4PD4
    cast = _swig_new_static_method(_itkVowIsotropicWaveletPython.itkVowIsotropicWaveletF4PD4_cast)

    def New(*args, **kargs):
        """New() -> itkVowIsotropicWaveletF4PD4

        Create a new object of the class itkVowIsotropicWaveletF4PD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVowIsotropicWaveletF4PD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVowIsotropicWaveletF4PD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVowIsotropicWaveletF4PD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVowIsotropicWaveletF4PD4 in _itkVowIsotropicWaveletPython:
_itkVowIsotropicWaveletPython.itkVowIsotropicWaveletF4PD4_swigregister(itkVowIsotropicWaveletF4PD4)
itkVowIsotropicWaveletF4PD4___New_orig__ = _itkVowIsotropicWaveletPython.itkVowIsotropicWaveletF4PD4___New_orig__
itkVowIsotropicWaveletF4PD4_cast = _itkVowIsotropicWaveletPython.itkVowIsotropicWaveletF4PD4_cast




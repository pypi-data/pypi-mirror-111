# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 6, 0):
    raise RuntimeError("Python 3.6 or later required")


from . import _IsotropicWaveletsPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkIsotropicWaveletFrequencyFunctionPython
else:
    import _itkIsotropicWaveletFrequencyFunctionPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkIsotropicWaveletFrequencyFunctionPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkIsotropicWaveletFrequencyFunctionPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.itkIsotropicFrequencyFunctionPython
import itk.itkPointPython
import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.itkFrequencyFunctionPython
import itk.itkSpatialFunctionPython
import itk.ITKCommonBasePython
import itk.itkFunctionBasePython
import itk.itkContinuousIndexPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkRGBAPixelPython
import itk.itkImagePython
import itk.itkImageRegionPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkArrayPython
class itkIsotropicWaveletFrequencyFunctionD2PD2(itk.itkIsotropicFrequencyFunctionPython.itkIsotropicFrequencyFunctionD2PD2):
    r"""Proxy of C++ itkIsotropicWaveletFrequencyFunctionD2PD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    EvaluateForwardLowPassFilter = _swig_new_instance_method(_itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionD2PD2_EvaluateForwardLowPassFilter)
    EvaluateForwardHighPassFilter = _swig_new_instance_method(_itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionD2PD2_EvaluateForwardHighPassFilter)
    EvaluateForwardSubBand = _swig_new_instance_method(_itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionD2PD2_EvaluateForwardSubBand)
    EvaluateInverseLowPassFilter = _swig_new_instance_method(_itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionD2PD2_EvaluateInverseLowPassFilter)
    EvaluateInverseHighPassFilter = _swig_new_instance_method(_itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionD2PD2_EvaluateInverseHighPassFilter)
    EvaluateInverseSubBand = _swig_new_instance_method(_itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionD2PD2_EvaluateInverseSubBand)
    GetHighPassSubBands = _swig_new_instance_method(_itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionD2PD2_GetHighPassSubBands)
    SetHighPassSubBands = _swig_new_instance_method(_itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionD2PD2_SetHighPassSubBands)
    GetFreqCutOff = _swig_new_instance_method(_itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionD2PD2_GetFreqCutOff)
    __swig_destroy__ = _itkIsotropicWaveletFrequencyFunctionPython.delete_itkIsotropicWaveletFrequencyFunctionD2PD2
    cast = _swig_new_static_method(_itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionD2PD2_cast)

# Register itkIsotropicWaveletFrequencyFunctionD2PD2 in _itkIsotropicWaveletFrequencyFunctionPython:
_itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionD2PD2_swigregister(itkIsotropicWaveletFrequencyFunctionD2PD2)
itkIsotropicWaveletFrequencyFunctionD2PD2_cast = _itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionD2PD2_cast

class itkIsotropicWaveletFrequencyFunctionD3PD3(itk.itkIsotropicFrequencyFunctionPython.itkIsotropicFrequencyFunctionD3PD3):
    r"""Proxy of C++ itkIsotropicWaveletFrequencyFunctionD3PD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    EvaluateForwardLowPassFilter = _swig_new_instance_method(_itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionD3PD3_EvaluateForwardLowPassFilter)
    EvaluateForwardHighPassFilter = _swig_new_instance_method(_itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionD3PD3_EvaluateForwardHighPassFilter)
    EvaluateForwardSubBand = _swig_new_instance_method(_itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionD3PD3_EvaluateForwardSubBand)
    EvaluateInverseLowPassFilter = _swig_new_instance_method(_itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionD3PD3_EvaluateInverseLowPassFilter)
    EvaluateInverseHighPassFilter = _swig_new_instance_method(_itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionD3PD3_EvaluateInverseHighPassFilter)
    EvaluateInverseSubBand = _swig_new_instance_method(_itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionD3PD3_EvaluateInverseSubBand)
    GetHighPassSubBands = _swig_new_instance_method(_itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionD3PD3_GetHighPassSubBands)
    SetHighPassSubBands = _swig_new_instance_method(_itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionD3PD3_SetHighPassSubBands)
    GetFreqCutOff = _swig_new_instance_method(_itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionD3PD3_GetFreqCutOff)
    __swig_destroy__ = _itkIsotropicWaveletFrequencyFunctionPython.delete_itkIsotropicWaveletFrequencyFunctionD3PD3
    cast = _swig_new_static_method(_itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionD3PD3_cast)

# Register itkIsotropicWaveletFrequencyFunctionD3PD3 in _itkIsotropicWaveletFrequencyFunctionPython:
_itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionD3PD3_swigregister(itkIsotropicWaveletFrequencyFunctionD3PD3)
itkIsotropicWaveletFrequencyFunctionD3PD3_cast = _itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionD3PD3_cast

class itkIsotropicWaveletFrequencyFunctionD4PD4(itk.itkIsotropicFrequencyFunctionPython.itkIsotropicFrequencyFunctionD4PD4):
    r"""Proxy of C++ itkIsotropicWaveletFrequencyFunctionD4PD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    EvaluateForwardLowPassFilter = _swig_new_instance_method(_itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionD4PD4_EvaluateForwardLowPassFilter)
    EvaluateForwardHighPassFilter = _swig_new_instance_method(_itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionD4PD4_EvaluateForwardHighPassFilter)
    EvaluateForwardSubBand = _swig_new_instance_method(_itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionD4PD4_EvaluateForwardSubBand)
    EvaluateInverseLowPassFilter = _swig_new_instance_method(_itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionD4PD4_EvaluateInverseLowPassFilter)
    EvaluateInverseHighPassFilter = _swig_new_instance_method(_itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionD4PD4_EvaluateInverseHighPassFilter)
    EvaluateInverseSubBand = _swig_new_instance_method(_itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionD4PD4_EvaluateInverseSubBand)
    GetHighPassSubBands = _swig_new_instance_method(_itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionD4PD4_GetHighPassSubBands)
    SetHighPassSubBands = _swig_new_instance_method(_itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionD4PD4_SetHighPassSubBands)
    GetFreqCutOff = _swig_new_instance_method(_itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionD4PD4_GetFreqCutOff)
    __swig_destroy__ = _itkIsotropicWaveletFrequencyFunctionPython.delete_itkIsotropicWaveletFrequencyFunctionD4PD4
    cast = _swig_new_static_method(_itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionD4PD4_cast)

# Register itkIsotropicWaveletFrequencyFunctionD4PD4 in _itkIsotropicWaveletFrequencyFunctionPython:
_itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionD4PD4_swigregister(itkIsotropicWaveletFrequencyFunctionD4PD4)
itkIsotropicWaveletFrequencyFunctionD4PD4_cast = _itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionD4PD4_cast

class itkIsotropicWaveletFrequencyFunctionF2PD2(itk.itkIsotropicFrequencyFunctionPython.itkIsotropicFrequencyFunctionF2PD2):
    r"""Proxy of C++ itkIsotropicWaveletFrequencyFunctionF2PD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    EvaluateForwardLowPassFilter = _swig_new_instance_method(_itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionF2PD2_EvaluateForwardLowPassFilter)
    EvaluateForwardHighPassFilter = _swig_new_instance_method(_itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionF2PD2_EvaluateForwardHighPassFilter)
    EvaluateForwardSubBand = _swig_new_instance_method(_itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionF2PD2_EvaluateForwardSubBand)
    EvaluateInverseLowPassFilter = _swig_new_instance_method(_itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionF2PD2_EvaluateInverseLowPassFilter)
    EvaluateInverseHighPassFilter = _swig_new_instance_method(_itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionF2PD2_EvaluateInverseHighPassFilter)
    EvaluateInverseSubBand = _swig_new_instance_method(_itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionF2PD2_EvaluateInverseSubBand)
    GetHighPassSubBands = _swig_new_instance_method(_itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionF2PD2_GetHighPassSubBands)
    SetHighPassSubBands = _swig_new_instance_method(_itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionF2PD2_SetHighPassSubBands)
    GetFreqCutOff = _swig_new_instance_method(_itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionF2PD2_GetFreqCutOff)
    __swig_destroy__ = _itkIsotropicWaveletFrequencyFunctionPython.delete_itkIsotropicWaveletFrequencyFunctionF2PD2
    cast = _swig_new_static_method(_itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionF2PD2_cast)

# Register itkIsotropicWaveletFrequencyFunctionF2PD2 in _itkIsotropicWaveletFrequencyFunctionPython:
_itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionF2PD2_swigregister(itkIsotropicWaveletFrequencyFunctionF2PD2)
itkIsotropicWaveletFrequencyFunctionF2PD2_cast = _itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionF2PD2_cast

class itkIsotropicWaveletFrequencyFunctionF3PD3(itk.itkIsotropicFrequencyFunctionPython.itkIsotropicFrequencyFunctionF3PD3):
    r"""Proxy of C++ itkIsotropicWaveletFrequencyFunctionF3PD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    EvaluateForwardLowPassFilter = _swig_new_instance_method(_itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionF3PD3_EvaluateForwardLowPassFilter)
    EvaluateForwardHighPassFilter = _swig_new_instance_method(_itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionF3PD3_EvaluateForwardHighPassFilter)
    EvaluateForwardSubBand = _swig_new_instance_method(_itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionF3PD3_EvaluateForwardSubBand)
    EvaluateInverseLowPassFilter = _swig_new_instance_method(_itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionF3PD3_EvaluateInverseLowPassFilter)
    EvaluateInverseHighPassFilter = _swig_new_instance_method(_itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionF3PD3_EvaluateInverseHighPassFilter)
    EvaluateInverseSubBand = _swig_new_instance_method(_itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionF3PD3_EvaluateInverseSubBand)
    GetHighPassSubBands = _swig_new_instance_method(_itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionF3PD3_GetHighPassSubBands)
    SetHighPassSubBands = _swig_new_instance_method(_itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionF3PD3_SetHighPassSubBands)
    GetFreqCutOff = _swig_new_instance_method(_itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionF3PD3_GetFreqCutOff)
    __swig_destroy__ = _itkIsotropicWaveletFrequencyFunctionPython.delete_itkIsotropicWaveletFrequencyFunctionF3PD3
    cast = _swig_new_static_method(_itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionF3PD3_cast)

# Register itkIsotropicWaveletFrequencyFunctionF3PD3 in _itkIsotropicWaveletFrequencyFunctionPython:
_itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionF3PD3_swigregister(itkIsotropicWaveletFrequencyFunctionF3PD3)
itkIsotropicWaveletFrequencyFunctionF3PD3_cast = _itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionF3PD3_cast

class itkIsotropicWaveletFrequencyFunctionF4PD4(itk.itkIsotropicFrequencyFunctionPython.itkIsotropicFrequencyFunctionF4PD4):
    r"""Proxy of C++ itkIsotropicWaveletFrequencyFunctionF4PD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    EvaluateForwardLowPassFilter = _swig_new_instance_method(_itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionF4PD4_EvaluateForwardLowPassFilter)
    EvaluateForwardHighPassFilter = _swig_new_instance_method(_itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionF4PD4_EvaluateForwardHighPassFilter)
    EvaluateForwardSubBand = _swig_new_instance_method(_itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionF4PD4_EvaluateForwardSubBand)
    EvaluateInverseLowPassFilter = _swig_new_instance_method(_itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionF4PD4_EvaluateInverseLowPassFilter)
    EvaluateInverseHighPassFilter = _swig_new_instance_method(_itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionF4PD4_EvaluateInverseHighPassFilter)
    EvaluateInverseSubBand = _swig_new_instance_method(_itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionF4PD4_EvaluateInverseSubBand)
    GetHighPassSubBands = _swig_new_instance_method(_itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionF4PD4_GetHighPassSubBands)
    SetHighPassSubBands = _swig_new_instance_method(_itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionF4PD4_SetHighPassSubBands)
    GetFreqCutOff = _swig_new_instance_method(_itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionF4PD4_GetFreqCutOff)
    __swig_destroy__ = _itkIsotropicWaveletFrequencyFunctionPython.delete_itkIsotropicWaveletFrequencyFunctionF4PD4
    cast = _swig_new_static_method(_itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionF4PD4_cast)

# Register itkIsotropicWaveletFrequencyFunctionF4PD4 in _itkIsotropicWaveletFrequencyFunctionPython:
_itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionF4PD4_swigregister(itkIsotropicWaveletFrequencyFunctionF4PD4)
itkIsotropicWaveletFrequencyFunctionF4PD4_cast = _itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionF4PD4_cast




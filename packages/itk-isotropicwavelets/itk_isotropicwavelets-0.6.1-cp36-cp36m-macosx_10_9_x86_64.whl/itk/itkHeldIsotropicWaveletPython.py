# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 6, 0):
    raise RuntimeError("Python 3.6 or later required")


from . import _IsotropicWaveletsPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkHeldIsotropicWaveletPython
else:
    import _itkHeldIsotropicWaveletPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkHeldIsotropicWaveletPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkHeldIsotropicWaveletPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.itkIsotropicWaveletFrequencyFunctionPython
import itk.itkIsotropicFrequencyFunctionPython
import itk.itkFrequencyFunctionPython
import itk.itkPointPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkSpatialFunctionPython
import itk.itkFunctionBasePython
import itk.itkArrayPython
import itk.itkImagePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.ITKCommonBasePython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython
import itk.itkContinuousIndexPython

def itkHeldIsotropicWaveletD2PD2_New():
    return itkHeldIsotropicWaveletD2PD2.New()

class itkHeldIsotropicWaveletD2PD2(itk.itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionD2PD2):
    r"""Proxy of C++ itkHeldIsotropicWaveletD2PD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHeldIsotropicWaveletPython.itkHeldIsotropicWaveletD2PD2___New_orig__)
    Clone = _swig_new_instance_method(_itkHeldIsotropicWaveletPython.itkHeldIsotropicWaveletD2PD2_Clone)
    SetPolynomialOrder = _swig_new_instance_method(_itkHeldIsotropicWaveletPython.itkHeldIsotropicWaveletD2PD2_SetPolynomialOrder)
    GetPolynomialOrder = _swig_new_instance_method(_itkHeldIsotropicWaveletPython.itkHeldIsotropicWaveletD2PD2_GetPolynomialOrder)
    ComputePolynom = _swig_new_instance_method(_itkHeldIsotropicWaveletPython.itkHeldIsotropicWaveletD2PD2_ComputePolynom)
    __swig_destroy__ = _itkHeldIsotropicWaveletPython.delete_itkHeldIsotropicWaveletD2PD2
    cast = _swig_new_static_method(_itkHeldIsotropicWaveletPython.itkHeldIsotropicWaveletD2PD2_cast)

    def New(*args, **kargs):
        """New() -> itkHeldIsotropicWaveletD2PD2

        Create a new object of the class itkHeldIsotropicWaveletD2PD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHeldIsotropicWaveletD2PD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHeldIsotropicWaveletD2PD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHeldIsotropicWaveletD2PD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHeldIsotropicWaveletD2PD2 in _itkHeldIsotropicWaveletPython:
_itkHeldIsotropicWaveletPython.itkHeldIsotropicWaveletD2PD2_swigregister(itkHeldIsotropicWaveletD2PD2)
itkHeldIsotropicWaveletD2PD2___New_orig__ = _itkHeldIsotropicWaveletPython.itkHeldIsotropicWaveletD2PD2___New_orig__
itkHeldIsotropicWaveletD2PD2_cast = _itkHeldIsotropicWaveletPython.itkHeldIsotropicWaveletD2PD2_cast


def itkHeldIsotropicWaveletD3PD3_New():
    return itkHeldIsotropicWaveletD3PD3.New()

class itkHeldIsotropicWaveletD3PD3(itk.itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionD3PD3):
    r"""Proxy of C++ itkHeldIsotropicWaveletD3PD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHeldIsotropicWaveletPython.itkHeldIsotropicWaveletD3PD3___New_orig__)
    Clone = _swig_new_instance_method(_itkHeldIsotropicWaveletPython.itkHeldIsotropicWaveletD3PD3_Clone)
    SetPolynomialOrder = _swig_new_instance_method(_itkHeldIsotropicWaveletPython.itkHeldIsotropicWaveletD3PD3_SetPolynomialOrder)
    GetPolynomialOrder = _swig_new_instance_method(_itkHeldIsotropicWaveletPython.itkHeldIsotropicWaveletD3PD3_GetPolynomialOrder)
    ComputePolynom = _swig_new_instance_method(_itkHeldIsotropicWaveletPython.itkHeldIsotropicWaveletD3PD3_ComputePolynom)
    __swig_destroy__ = _itkHeldIsotropicWaveletPython.delete_itkHeldIsotropicWaveletD3PD3
    cast = _swig_new_static_method(_itkHeldIsotropicWaveletPython.itkHeldIsotropicWaveletD3PD3_cast)

    def New(*args, **kargs):
        """New() -> itkHeldIsotropicWaveletD3PD3

        Create a new object of the class itkHeldIsotropicWaveletD3PD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHeldIsotropicWaveletD3PD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHeldIsotropicWaveletD3PD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHeldIsotropicWaveletD3PD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHeldIsotropicWaveletD3PD3 in _itkHeldIsotropicWaveletPython:
_itkHeldIsotropicWaveletPython.itkHeldIsotropicWaveletD3PD3_swigregister(itkHeldIsotropicWaveletD3PD3)
itkHeldIsotropicWaveletD3PD3___New_orig__ = _itkHeldIsotropicWaveletPython.itkHeldIsotropicWaveletD3PD3___New_orig__
itkHeldIsotropicWaveletD3PD3_cast = _itkHeldIsotropicWaveletPython.itkHeldIsotropicWaveletD3PD3_cast


def itkHeldIsotropicWaveletD4PD4_New():
    return itkHeldIsotropicWaveletD4PD4.New()

class itkHeldIsotropicWaveletD4PD4(itk.itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionD4PD4):
    r"""Proxy of C++ itkHeldIsotropicWaveletD4PD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHeldIsotropicWaveletPython.itkHeldIsotropicWaveletD4PD4___New_orig__)
    Clone = _swig_new_instance_method(_itkHeldIsotropicWaveletPython.itkHeldIsotropicWaveletD4PD4_Clone)
    SetPolynomialOrder = _swig_new_instance_method(_itkHeldIsotropicWaveletPython.itkHeldIsotropicWaveletD4PD4_SetPolynomialOrder)
    GetPolynomialOrder = _swig_new_instance_method(_itkHeldIsotropicWaveletPython.itkHeldIsotropicWaveletD4PD4_GetPolynomialOrder)
    ComputePolynom = _swig_new_instance_method(_itkHeldIsotropicWaveletPython.itkHeldIsotropicWaveletD4PD4_ComputePolynom)
    __swig_destroy__ = _itkHeldIsotropicWaveletPython.delete_itkHeldIsotropicWaveletD4PD4
    cast = _swig_new_static_method(_itkHeldIsotropicWaveletPython.itkHeldIsotropicWaveletD4PD4_cast)

    def New(*args, **kargs):
        """New() -> itkHeldIsotropicWaveletD4PD4

        Create a new object of the class itkHeldIsotropicWaveletD4PD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHeldIsotropicWaveletD4PD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHeldIsotropicWaveletD4PD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHeldIsotropicWaveletD4PD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHeldIsotropicWaveletD4PD4 in _itkHeldIsotropicWaveletPython:
_itkHeldIsotropicWaveletPython.itkHeldIsotropicWaveletD4PD4_swigregister(itkHeldIsotropicWaveletD4PD4)
itkHeldIsotropicWaveletD4PD4___New_orig__ = _itkHeldIsotropicWaveletPython.itkHeldIsotropicWaveletD4PD4___New_orig__
itkHeldIsotropicWaveletD4PD4_cast = _itkHeldIsotropicWaveletPython.itkHeldIsotropicWaveletD4PD4_cast


def itkHeldIsotropicWaveletF2PD2_New():
    return itkHeldIsotropicWaveletF2PD2.New()

class itkHeldIsotropicWaveletF2PD2(itk.itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionF2PD2):
    r"""Proxy of C++ itkHeldIsotropicWaveletF2PD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHeldIsotropicWaveletPython.itkHeldIsotropicWaveletF2PD2___New_orig__)
    Clone = _swig_new_instance_method(_itkHeldIsotropicWaveletPython.itkHeldIsotropicWaveletF2PD2_Clone)
    SetPolynomialOrder = _swig_new_instance_method(_itkHeldIsotropicWaveletPython.itkHeldIsotropicWaveletF2PD2_SetPolynomialOrder)
    GetPolynomialOrder = _swig_new_instance_method(_itkHeldIsotropicWaveletPython.itkHeldIsotropicWaveletF2PD2_GetPolynomialOrder)
    ComputePolynom = _swig_new_instance_method(_itkHeldIsotropicWaveletPython.itkHeldIsotropicWaveletF2PD2_ComputePolynom)
    __swig_destroy__ = _itkHeldIsotropicWaveletPython.delete_itkHeldIsotropicWaveletF2PD2
    cast = _swig_new_static_method(_itkHeldIsotropicWaveletPython.itkHeldIsotropicWaveletF2PD2_cast)

    def New(*args, **kargs):
        """New() -> itkHeldIsotropicWaveletF2PD2

        Create a new object of the class itkHeldIsotropicWaveletF2PD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHeldIsotropicWaveletF2PD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHeldIsotropicWaveletF2PD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHeldIsotropicWaveletF2PD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHeldIsotropicWaveletF2PD2 in _itkHeldIsotropicWaveletPython:
_itkHeldIsotropicWaveletPython.itkHeldIsotropicWaveletF2PD2_swigregister(itkHeldIsotropicWaveletF2PD2)
itkHeldIsotropicWaveletF2PD2___New_orig__ = _itkHeldIsotropicWaveletPython.itkHeldIsotropicWaveletF2PD2___New_orig__
itkHeldIsotropicWaveletF2PD2_cast = _itkHeldIsotropicWaveletPython.itkHeldIsotropicWaveletF2PD2_cast


def itkHeldIsotropicWaveletF3PD3_New():
    return itkHeldIsotropicWaveletF3PD3.New()

class itkHeldIsotropicWaveletF3PD3(itk.itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionF3PD3):
    r"""Proxy of C++ itkHeldIsotropicWaveletF3PD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHeldIsotropicWaveletPython.itkHeldIsotropicWaveletF3PD3___New_orig__)
    Clone = _swig_new_instance_method(_itkHeldIsotropicWaveletPython.itkHeldIsotropicWaveletF3PD3_Clone)
    SetPolynomialOrder = _swig_new_instance_method(_itkHeldIsotropicWaveletPython.itkHeldIsotropicWaveletF3PD3_SetPolynomialOrder)
    GetPolynomialOrder = _swig_new_instance_method(_itkHeldIsotropicWaveletPython.itkHeldIsotropicWaveletF3PD3_GetPolynomialOrder)
    ComputePolynom = _swig_new_instance_method(_itkHeldIsotropicWaveletPython.itkHeldIsotropicWaveletF3PD3_ComputePolynom)
    __swig_destroy__ = _itkHeldIsotropicWaveletPython.delete_itkHeldIsotropicWaveletF3PD3
    cast = _swig_new_static_method(_itkHeldIsotropicWaveletPython.itkHeldIsotropicWaveletF3PD3_cast)

    def New(*args, **kargs):
        """New() -> itkHeldIsotropicWaveletF3PD3

        Create a new object of the class itkHeldIsotropicWaveletF3PD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHeldIsotropicWaveletF3PD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHeldIsotropicWaveletF3PD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHeldIsotropicWaveletF3PD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHeldIsotropicWaveletF3PD3 in _itkHeldIsotropicWaveletPython:
_itkHeldIsotropicWaveletPython.itkHeldIsotropicWaveletF3PD3_swigregister(itkHeldIsotropicWaveletF3PD3)
itkHeldIsotropicWaveletF3PD3___New_orig__ = _itkHeldIsotropicWaveletPython.itkHeldIsotropicWaveletF3PD3___New_orig__
itkHeldIsotropicWaveletF3PD3_cast = _itkHeldIsotropicWaveletPython.itkHeldIsotropicWaveletF3PD3_cast


def itkHeldIsotropicWaveletF4PD4_New():
    return itkHeldIsotropicWaveletF4PD4.New()

class itkHeldIsotropicWaveletF4PD4(itk.itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionF4PD4):
    r"""Proxy of C++ itkHeldIsotropicWaveletF4PD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHeldIsotropicWaveletPython.itkHeldIsotropicWaveletF4PD4___New_orig__)
    Clone = _swig_new_instance_method(_itkHeldIsotropicWaveletPython.itkHeldIsotropicWaveletF4PD4_Clone)
    SetPolynomialOrder = _swig_new_instance_method(_itkHeldIsotropicWaveletPython.itkHeldIsotropicWaveletF4PD4_SetPolynomialOrder)
    GetPolynomialOrder = _swig_new_instance_method(_itkHeldIsotropicWaveletPython.itkHeldIsotropicWaveletF4PD4_GetPolynomialOrder)
    ComputePolynom = _swig_new_instance_method(_itkHeldIsotropicWaveletPython.itkHeldIsotropicWaveletF4PD4_ComputePolynom)
    __swig_destroy__ = _itkHeldIsotropicWaveletPython.delete_itkHeldIsotropicWaveletF4PD4
    cast = _swig_new_static_method(_itkHeldIsotropicWaveletPython.itkHeldIsotropicWaveletF4PD4_cast)

    def New(*args, **kargs):
        """New() -> itkHeldIsotropicWaveletF4PD4

        Create a new object of the class itkHeldIsotropicWaveletF4PD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHeldIsotropicWaveletF4PD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHeldIsotropicWaveletF4PD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHeldIsotropicWaveletF4PD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHeldIsotropicWaveletF4PD4 in _itkHeldIsotropicWaveletPython:
_itkHeldIsotropicWaveletPython.itkHeldIsotropicWaveletF4PD4_swigregister(itkHeldIsotropicWaveletF4PD4)
itkHeldIsotropicWaveletF4PD4___New_orig__ = _itkHeldIsotropicWaveletPython.itkHeldIsotropicWaveletF4PD4___New_orig__
itkHeldIsotropicWaveletF4PD4_cast = _itkHeldIsotropicWaveletPython.itkHeldIsotropicWaveletF4PD4_cast




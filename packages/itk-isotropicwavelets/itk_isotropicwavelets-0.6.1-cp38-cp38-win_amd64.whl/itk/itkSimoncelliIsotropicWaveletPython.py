# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 6, 0):
    raise RuntimeError("Python 3.6 or later required")


from . import _IsotropicWaveletsPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkSimoncelliIsotropicWaveletPython
else:
    import _itkSimoncelliIsotropicWaveletPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkSimoncelliIsotropicWaveletPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkSimoncelliIsotropicWaveletPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.itkIsotropicWaveletFrequencyFunctionPython
import itk.itkIsotropicFrequencyFunctionPython
import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkPointPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.itkVectorPython
import itk.itkFrequencyFunctionPython
import itk.itkSpatialFunctionPython
import itk.itkFunctionBasePython
import itk.itkContinuousIndexPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkArrayPython
import itk.itkRGBPixelPython
import itk.itkImagePython
import itk.itkImageRegionPython
import itk.itkCovariantVectorPython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython

def itkSimoncelliIsotropicWaveletD2PD2_New():
    return itkSimoncelliIsotropicWaveletD2PD2.New()

class itkSimoncelliIsotropicWaveletD2PD2(itk.itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionD2PD2):
    r"""Proxy of C++ itkSimoncelliIsotropicWaveletD2PD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSimoncelliIsotropicWaveletPython.itkSimoncelliIsotropicWaveletD2PD2___New_orig__)
    Clone = _swig_new_instance_method(_itkSimoncelliIsotropicWaveletPython.itkSimoncelliIsotropicWaveletD2PD2_Clone)
    __swig_destroy__ = _itkSimoncelliIsotropicWaveletPython.delete_itkSimoncelliIsotropicWaveletD2PD2
    cast = _swig_new_static_method(_itkSimoncelliIsotropicWaveletPython.itkSimoncelliIsotropicWaveletD2PD2_cast)

    def New(*args, **kargs):
        """New() -> itkSimoncelliIsotropicWaveletD2PD2

        Create a new object of the class itkSimoncelliIsotropicWaveletD2PD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimoncelliIsotropicWaveletD2PD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSimoncelliIsotropicWaveletD2PD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSimoncelliIsotropicWaveletD2PD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSimoncelliIsotropicWaveletD2PD2 in _itkSimoncelliIsotropicWaveletPython:
_itkSimoncelliIsotropicWaveletPython.itkSimoncelliIsotropicWaveletD2PD2_swigregister(itkSimoncelliIsotropicWaveletD2PD2)
itkSimoncelliIsotropicWaveletD2PD2___New_orig__ = _itkSimoncelliIsotropicWaveletPython.itkSimoncelliIsotropicWaveletD2PD2___New_orig__
itkSimoncelliIsotropicWaveletD2PD2_cast = _itkSimoncelliIsotropicWaveletPython.itkSimoncelliIsotropicWaveletD2PD2_cast


def itkSimoncelliIsotropicWaveletD3PD3_New():
    return itkSimoncelliIsotropicWaveletD3PD3.New()

class itkSimoncelliIsotropicWaveletD3PD3(itk.itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionD3PD3):
    r"""Proxy of C++ itkSimoncelliIsotropicWaveletD3PD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSimoncelliIsotropicWaveletPython.itkSimoncelliIsotropicWaveletD3PD3___New_orig__)
    Clone = _swig_new_instance_method(_itkSimoncelliIsotropicWaveletPython.itkSimoncelliIsotropicWaveletD3PD3_Clone)
    __swig_destroy__ = _itkSimoncelliIsotropicWaveletPython.delete_itkSimoncelliIsotropicWaveletD3PD3
    cast = _swig_new_static_method(_itkSimoncelliIsotropicWaveletPython.itkSimoncelliIsotropicWaveletD3PD3_cast)

    def New(*args, **kargs):
        """New() -> itkSimoncelliIsotropicWaveletD3PD3

        Create a new object of the class itkSimoncelliIsotropicWaveletD3PD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimoncelliIsotropicWaveletD3PD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSimoncelliIsotropicWaveletD3PD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSimoncelliIsotropicWaveletD3PD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSimoncelliIsotropicWaveletD3PD3 in _itkSimoncelliIsotropicWaveletPython:
_itkSimoncelliIsotropicWaveletPython.itkSimoncelliIsotropicWaveletD3PD3_swigregister(itkSimoncelliIsotropicWaveletD3PD3)
itkSimoncelliIsotropicWaveletD3PD3___New_orig__ = _itkSimoncelliIsotropicWaveletPython.itkSimoncelliIsotropicWaveletD3PD3___New_orig__
itkSimoncelliIsotropicWaveletD3PD3_cast = _itkSimoncelliIsotropicWaveletPython.itkSimoncelliIsotropicWaveletD3PD3_cast


def itkSimoncelliIsotropicWaveletD4PD4_New():
    return itkSimoncelliIsotropicWaveletD4PD4.New()

class itkSimoncelliIsotropicWaveletD4PD4(itk.itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionD4PD4):
    r"""Proxy of C++ itkSimoncelliIsotropicWaveletD4PD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSimoncelliIsotropicWaveletPython.itkSimoncelliIsotropicWaveletD4PD4___New_orig__)
    Clone = _swig_new_instance_method(_itkSimoncelliIsotropicWaveletPython.itkSimoncelliIsotropicWaveletD4PD4_Clone)
    __swig_destroy__ = _itkSimoncelliIsotropicWaveletPython.delete_itkSimoncelliIsotropicWaveletD4PD4
    cast = _swig_new_static_method(_itkSimoncelliIsotropicWaveletPython.itkSimoncelliIsotropicWaveletD4PD4_cast)

    def New(*args, **kargs):
        """New() -> itkSimoncelliIsotropicWaveletD4PD4

        Create a new object of the class itkSimoncelliIsotropicWaveletD4PD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimoncelliIsotropicWaveletD4PD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSimoncelliIsotropicWaveletD4PD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSimoncelliIsotropicWaveletD4PD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSimoncelliIsotropicWaveletD4PD4 in _itkSimoncelliIsotropicWaveletPython:
_itkSimoncelliIsotropicWaveletPython.itkSimoncelliIsotropicWaveletD4PD4_swigregister(itkSimoncelliIsotropicWaveletD4PD4)
itkSimoncelliIsotropicWaveletD4PD4___New_orig__ = _itkSimoncelliIsotropicWaveletPython.itkSimoncelliIsotropicWaveletD4PD4___New_orig__
itkSimoncelliIsotropicWaveletD4PD4_cast = _itkSimoncelliIsotropicWaveletPython.itkSimoncelliIsotropicWaveletD4PD4_cast


def itkSimoncelliIsotropicWaveletF2PD2_New():
    return itkSimoncelliIsotropicWaveletF2PD2.New()

class itkSimoncelliIsotropicWaveletF2PD2(itk.itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionF2PD2):
    r"""Proxy of C++ itkSimoncelliIsotropicWaveletF2PD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSimoncelliIsotropicWaveletPython.itkSimoncelliIsotropicWaveletF2PD2___New_orig__)
    Clone = _swig_new_instance_method(_itkSimoncelliIsotropicWaveletPython.itkSimoncelliIsotropicWaveletF2PD2_Clone)
    __swig_destroy__ = _itkSimoncelliIsotropicWaveletPython.delete_itkSimoncelliIsotropicWaveletF2PD2
    cast = _swig_new_static_method(_itkSimoncelliIsotropicWaveletPython.itkSimoncelliIsotropicWaveletF2PD2_cast)

    def New(*args, **kargs):
        """New() -> itkSimoncelliIsotropicWaveletF2PD2

        Create a new object of the class itkSimoncelliIsotropicWaveletF2PD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimoncelliIsotropicWaveletF2PD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSimoncelliIsotropicWaveletF2PD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSimoncelliIsotropicWaveletF2PD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSimoncelliIsotropicWaveletF2PD2 in _itkSimoncelliIsotropicWaveletPython:
_itkSimoncelliIsotropicWaveletPython.itkSimoncelliIsotropicWaveletF2PD2_swigregister(itkSimoncelliIsotropicWaveletF2PD2)
itkSimoncelliIsotropicWaveletF2PD2___New_orig__ = _itkSimoncelliIsotropicWaveletPython.itkSimoncelliIsotropicWaveletF2PD2___New_orig__
itkSimoncelliIsotropicWaveletF2PD2_cast = _itkSimoncelliIsotropicWaveletPython.itkSimoncelliIsotropicWaveletF2PD2_cast


def itkSimoncelliIsotropicWaveletF3PD3_New():
    return itkSimoncelliIsotropicWaveletF3PD3.New()

class itkSimoncelliIsotropicWaveletF3PD3(itk.itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionF3PD3):
    r"""Proxy of C++ itkSimoncelliIsotropicWaveletF3PD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSimoncelliIsotropicWaveletPython.itkSimoncelliIsotropicWaveletF3PD3___New_orig__)
    Clone = _swig_new_instance_method(_itkSimoncelliIsotropicWaveletPython.itkSimoncelliIsotropicWaveletF3PD3_Clone)
    __swig_destroy__ = _itkSimoncelliIsotropicWaveletPython.delete_itkSimoncelliIsotropicWaveletF3PD3
    cast = _swig_new_static_method(_itkSimoncelliIsotropicWaveletPython.itkSimoncelliIsotropicWaveletF3PD3_cast)

    def New(*args, **kargs):
        """New() -> itkSimoncelliIsotropicWaveletF3PD3

        Create a new object of the class itkSimoncelliIsotropicWaveletF3PD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimoncelliIsotropicWaveletF3PD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSimoncelliIsotropicWaveletF3PD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSimoncelliIsotropicWaveletF3PD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSimoncelliIsotropicWaveletF3PD3 in _itkSimoncelliIsotropicWaveletPython:
_itkSimoncelliIsotropicWaveletPython.itkSimoncelliIsotropicWaveletF3PD3_swigregister(itkSimoncelliIsotropicWaveletF3PD3)
itkSimoncelliIsotropicWaveletF3PD3___New_orig__ = _itkSimoncelliIsotropicWaveletPython.itkSimoncelliIsotropicWaveletF3PD3___New_orig__
itkSimoncelliIsotropicWaveletF3PD3_cast = _itkSimoncelliIsotropicWaveletPython.itkSimoncelliIsotropicWaveletF3PD3_cast


def itkSimoncelliIsotropicWaveletF4PD4_New():
    return itkSimoncelliIsotropicWaveletF4PD4.New()

class itkSimoncelliIsotropicWaveletF4PD4(itk.itkIsotropicWaveletFrequencyFunctionPython.itkIsotropicWaveletFrequencyFunctionF4PD4):
    r"""Proxy of C++ itkSimoncelliIsotropicWaveletF4PD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSimoncelliIsotropicWaveletPython.itkSimoncelliIsotropicWaveletF4PD4___New_orig__)
    Clone = _swig_new_instance_method(_itkSimoncelliIsotropicWaveletPython.itkSimoncelliIsotropicWaveletF4PD4_Clone)
    __swig_destroy__ = _itkSimoncelliIsotropicWaveletPython.delete_itkSimoncelliIsotropicWaveletF4PD4
    cast = _swig_new_static_method(_itkSimoncelliIsotropicWaveletPython.itkSimoncelliIsotropicWaveletF4PD4_cast)

    def New(*args, **kargs):
        """New() -> itkSimoncelliIsotropicWaveletF4PD4

        Create a new object of the class itkSimoncelliIsotropicWaveletF4PD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimoncelliIsotropicWaveletF4PD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSimoncelliIsotropicWaveletF4PD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSimoncelliIsotropicWaveletF4PD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSimoncelliIsotropicWaveletF4PD4 in _itkSimoncelliIsotropicWaveletPython:
_itkSimoncelliIsotropicWaveletPython.itkSimoncelliIsotropicWaveletF4PD4_swigregister(itkSimoncelliIsotropicWaveletF4PD4)
itkSimoncelliIsotropicWaveletF4PD4___New_orig__ = _itkSimoncelliIsotropicWaveletPython.itkSimoncelliIsotropicWaveletF4PD4___New_orig__
itkSimoncelliIsotropicWaveletF4PD4_cast = _itkSimoncelliIsotropicWaveletPython.itkSimoncelliIsotropicWaveletF4PD4_cast




# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import service_pb2 as service__pb2


class FastTextStub(object):
    """Endpoints of the FastText Serving interface
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.LoadModels = channel.unary_unary(
                '/FastText/LoadModels',
                request_serializer=service__pb2.LoadModelsRequest.SerializeToString,
                response_deserializer=service__pb2.LoadModelsResponse.FromString,
                )
        self.GetLoadedModels = channel.unary_unary(
                '/FastText/GetLoadedModels',
                request_serializer=service__pb2.LoadedModelsRequest.SerializeToString,
                response_deserializer=service__pb2.LoadedModelsResponse.FromString,
                )
        self.GetModelStatus = channel.unary_unary(
                '/FastText/GetModelStatus',
                request_serializer=service__pb2.ModelStatusRequest.SerializeToString,
                response_deserializer=service__pb2.ModelStatusResponse.FromString,
                )
        self.ReloadConfigModels = channel.unary_unary(
                '/FastText/ReloadConfigModels',
                request_serializer=service__pb2.ReloadModelsRequest.SerializeToString,
                response_deserializer=service__pb2.ReloadModelsResponse.FromString,
                )
        self.Predict = channel.unary_unary(
                '/FastText/Predict',
                request_serializer=service__pb2.PredictRequest.SerializeToString,
                response_deserializer=service__pb2.PredictResponse.FromString,
                )
        self.GetWordsVectors = channel.unary_unary(
                '/FastText/GetWordsVectors',
                request_serializer=service__pb2.VectorsRequest.SerializeToString,
                response_deserializer=service__pb2.VectorsResponse.FromString,
                )


class FastTextServicer(object):
    """Endpoints of the FastText Serving interface
    """

    def LoadModels(self, request, context):
        """Load a list of models
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLoadedModels(self, request, context):
        """Get the list of models served by the model
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetModelStatus(self, request, context):
        """Get the status of a specific model model
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReloadConfigModels(self, request, context):
        """Reload model config file
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Predict(self, request, context):
        """Get a prediction performed by a model
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetWordsVectors(self, request, context):
        """Get words vectors from the model
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FastTextServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'LoadModels': grpc.unary_unary_rpc_method_handler(
                    servicer.LoadModels,
                    request_deserializer=service__pb2.LoadModelsRequest.FromString,
                    response_serializer=service__pb2.LoadModelsResponse.SerializeToString,
            ),
            'GetLoadedModels': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLoadedModels,
                    request_deserializer=service__pb2.LoadedModelsRequest.FromString,
                    response_serializer=service__pb2.LoadedModelsResponse.SerializeToString,
            ),
            'GetModelStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetModelStatus,
                    request_deserializer=service__pb2.ModelStatusRequest.FromString,
                    response_serializer=service__pb2.ModelStatusResponse.SerializeToString,
            ),
            'ReloadConfigModels': grpc.unary_unary_rpc_method_handler(
                    servicer.ReloadConfigModels,
                    request_deserializer=service__pb2.ReloadModelsRequest.FromString,
                    response_serializer=service__pb2.ReloadModelsResponse.SerializeToString,
            ),
            'Predict': grpc.unary_unary_rpc_method_handler(
                    servicer.Predict,
                    request_deserializer=service__pb2.PredictRequest.FromString,
                    response_serializer=service__pb2.PredictResponse.SerializeToString,
            ),
            'GetWordsVectors': grpc.unary_unary_rpc_method_handler(
                    servicer.GetWordsVectors,
                    request_deserializer=service__pb2.VectorsRequest.FromString,
                    response_serializer=service__pb2.VectorsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'FastText', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FastText(object):
    """Endpoints of the FastText Serving interface
    """

    @staticmethod
    def LoadModels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/FastText/LoadModels',
            service__pb2.LoadModelsRequest.SerializeToString,
            service__pb2.LoadModelsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetLoadedModels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/FastText/GetLoadedModels',
            service__pb2.LoadedModelsRequest.SerializeToString,
            service__pb2.LoadedModelsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetModelStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/FastText/GetModelStatus',
            service__pb2.ModelStatusRequest.SerializeToString,
            service__pb2.ModelStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReloadConfigModels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/FastText/ReloadConfigModels',
            service__pb2.ReloadModelsRequest.SerializeToString,
            service__pb2.ReloadModelsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Predict(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/FastText/Predict',
            service__pb2.PredictRequest.SerializeToString,
            service__pb2.PredictResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetWordsVectors(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/FastText/GetWordsVectors',
            service__pb2.VectorsRequest.SerializeToString,
            service__pb2.VectorsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

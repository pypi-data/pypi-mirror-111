{"version":3,"sources":["webpack://jupyterlab-webviz/./lib/handler.js","webpack://jupyterlab-webviz/./lib/index.js","webpack://jupyterlab-webviz/./style/logo.svg"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAA+C;AACS;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACO,kDAAkD;AACzD;AACA,qBAAqB,+EAA6B;AAClD,uBAAuB,8DAAW;AAClC;AACA;AACA;AACA,yBAAyB,8EAA4B;AACrD;AACA;AACA,kBAAkB,+EAA6B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,gFAA8B;AAChD;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClC0D;AACiB;AAC3E,WAAW,SAAS;AACiC;AACD;AACN;AACG;AACa;AACpB;AACU;AACD;AACY;AACxB;AACU;AAC1C,uBAAuB,8DAAO;AACrC;AACA,YAAY,oDAAgB;AAC5B,CAAC;AACD,iCAAiC,wDAAM;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,qBAAqB;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,WAAW;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,qBAAqB;AAChF;AACA;AACA;AACA;AACA;AACA,wBAAwB,wEAAqB;AAC7C,sDAAsD,WAAW;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,2BAA2B,mEAAc;AAChD;AACA,8BAA8B;AAC9B;AACA,0BAA0B,8DAAe;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,0CAA0C,6BAA6B,EAAE;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,iDAAiD;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,4BAA4B,qEAAgB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,4CAA4C,GAAG;AAChF;AACA;AACO,2BAA2B,oDAAK;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,wEAAmB,EAAE,oEAAe;AACnD,eAAe,yEAAgB,EAAE,2DAAS;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,4BAA4B,+DAAa,EAAE,YAAY;AACvD,2CAA2C,+DAA+D;AAC1G;AACA;AACA;AACA,8BAA8B,8CAA8C;AAC5E;AACA,SAAS;AACT;AACA,6DAA6D;AAC7D;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA,cAAc;AACd,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,QAAQ,qDAAU;AAClB;AACA;AACA,SAAS;AACT;AACA,4FAA4F,OAAO;AACnG,SAAS;AACT;AACA;AACA,iEAAe,MAAM,EAAC;;;;;;;;;;;;;;;;AC7OtB,iEAAe,0yBAA0yB,E","file":"lib_index_js.53b9633d7cf5535cf2cb.js","sourcesContent":["import { URLExt } from '@jupyterlab/coreutils';\nimport { ServerConnection } from '@jupyterlab/services';\n/**\n * Call the API extension\n *\n * @param endPoint API REST end point for the extension\n * @param init Initial values for the request\n * @returns The response body interpreted as JSON\n */\nexport async function requestAPI(endPoint = '', init = {}) {\n    // Make request to Jupyter API\n    const settings = ServerConnection.makeSettings();\n    const requestUrl = URLExt.join(settings.baseUrl, 'webviz', // API Namespace\n    endPoint);\n    let response;\n    try {\n        response = await ServerConnection.makeRequest(requestUrl, init, settings);\n    }\n    catch (error) {\n        throw new ServerConnection.NetworkError(error);\n    }\n    let data = await response.text();\n    if (data.length > 0) {\n        try {\n            data = JSON.parse(data);\n        }\n        catch (error) {\n            console.log('Not a JSON response body.', response);\n        }\n    }\n    if (!response.ok) {\n        throw new ServerConnection.ResponseError(response, data.message || data);\n    }\n    return data;\n}\n","import { ILayoutRestorer } from '@jupyterlab/application';\nimport { ABCWidgetFactory, DocumentWidget } from '@jupyterlab/docregistry';\n// import { Widget } from '@lumino/widgets';\nimport { WidgetTracker } from '@jupyterlab/apputils';\nimport { LabIcon } from '@jupyterlab/ui-components';\nimport { IFrame } from '@jupyterlab/apputils';\nimport { ILauncher } from '@jupyterlab/launcher';\nimport { IFileBrowserFactory } from '@jupyterlab/filebrowser';\nimport { Token } from '@lumino/coreutils';\nimport { PromiseDelegate } from '@lumino/coreutils';\nimport { PageConfig } from '@jupyterlab/coreutils';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { requestAPI } from './handler';\nimport webvizIconSvgstr from '../style/logo.svg';\nexport const webvizIcon = new LabIcon({\n    name: 'jupyterlab-webviz:icon',\n    svgstr: webvizIconSvgstr\n});\nclass WebvizIframeWidget extends IFrame {\n    constructor(webvizOptions) {\n        super();\n        this.query = '';\n        // const queryElems = [];\n        // for (const k in webvizOptions as any) {\n        //   let kk = k;\n        //   kk.replace(/[A-Z]/g, (letter: string) => `-${letter.toLowerCase()}`);\n        //   queryElems.push(\n        //     encodeURIComponent(kk) + '=' + encodeURIComponent((webvizOptions as any)[k])\n        //   );\n        // }\n        // this.query = queryElems.join('&');\n        // const baseUrl = PageConfig.getBaseUrl();\n        // this.url = baseUrl + `webviz/app/index.html?${this.query}`;\n        this.id = 'Webviz ABABABA';\n        this.title.label = 'Webviz ABABABA';\n        this.title.closable = true;\n        this.title.icon = webvizIcon;\n        this.node.style.overflowY = 'hidden';\n        this.node.style.background = '#FFF';\n        this.sandbox = [\n            'allow-forms',\n            'allow-modals',\n            'allow-orientation-lock',\n            'allow-pointer-lock',\n            'allow-popups',\n            'allow-presentation',\n            'allow-same-origin',\n            'allow-scripts',\n            'allow-top-navigation',\n            'allow-top-navigation-by-user-activation'\n        ];\n    }\n    trigger(webvizOptions) {\n        const queryElems = [];\n        for (const k in webvizOptions) {\n            const kk = k.replace(/[A-Z]/g, (letter) => `-${letter.toLowerCase()}`);\n            queryElems.push(encodeURIComponent(kk) +\n                '=' +\n                encodeURIComponent(webvizOptions[k]));\n        }\n        this.query = queryElems.join('&');\n        const baseUrl = PageConfig.getBaseUrl();\n        this.url = baseUrl + `webviz/app/index.html?${this.query}`;\n        console.log('Full URL: ', this.url);\n    }\n    dispose() {\n        super.dispose();\n    }\n    onCloseRequest() {\n        this.dispose();\n    }\n}\nexport class WebvizWidget extends DocumentWidget {\n    constructor(options, defaultROSEndpoint) {\n        super(Object.assign({}, options));\n        this.defaultROSEndpoint = '';\n        this._ready = new PromiseDelegate();\n        this.defaultROSEndpoint = defaultROSEndpoint;\n        this.title.label = 'Webviz ABABABA';\n        // this.title.closable = true;\n        this.title.icon = webvizIcon;\n        this.context.ready.then(() => {\n            this._onContextReady();\n        });\n        // this.context.ready.then(() => { this._handleDirtyStateNew(); });\n    }\n    _onContentChanged() {\n        console.log('Content changed?');\n    }\n    /**\n     * A promise that resolves when the zethus viewer is ready.\n     */\n    get ready() {\n        return this._ready.promise;\n    }\n    _onContextReady() {\n        const contextModel = this.context.model;\n        // if (contextModel.toString() === '') {\n        // contextModel.fromString();\n        // }\n        // Set the editor model value.\n        // this._onContentChanged();\n        contextModel.contentChanged.connect(this._onContentChanged, this);\n        let layout = {};\n        try {\n            layout = JSON.parse(this.context.model.toString());\n        }\n        catch (e) {\n            // ignore\n        }\n        this.content.trigger({\n            rosbridgeWebsocketUrl: this.defaultROSEndpoint,\n            layout: JSON.stringify(layout)\n        });\n        // let widget = new WebvizIframeWidget({});\n        // console.log(widget)\n        // this.content.addChild(widget);\n        this._ready.resolve(void 0);\n    }\n}\n/**\n * A widget factory for drawio.\n */\nexport class WebvizFactory extends ABCWidgetFactory {\n    /**\n     * Create a new widget given a context.\n     */\n    constructor(options, defaultROSEndpoint) {\n        super(options);\n        this.defaultROSEndpoint = defaultROSEndpoint;\n    }\n    createNewWidget(context) {\n        return new WebvizWidget({ context, content: new WebvizIframeWidget({}) }, this.defaultROSEndpoint);\n    }\n}\nexport const IWebvizTracker = new Token('webviz/track');\n/**\n * The name of the factory that creates editor widgets.\n */\nconst FACTORY = 'WebvizFactory';\n/**\n * Initialization data for the jupyterlab-webviz extension.\n */\nconst plugin = {\n    id: 'jupyterlab-webviz:plugin',\n    autoStart: true,\n    requires: [IFileBrowserFactory, ILayoutRestorer],\n    optional: [ISettingRegistry, ILauncher],\n    activate: async (app, browserFactory, restorer, settingRegistry, launcher) => {\n        console.log('JupyterLab extension jupyterlab-webviz is activated!');\n        let defaultROSEndpoint = 'ws://localhost:9090';\n        if (settingRegistry) {\n            const settings = await settingRegistry.load(plugin.id);\n            defaultROSEndpoint = settings.get('defaultROSEndpoint')\n                .composite;\n            console.log('jupyterlab-webviz settings loaded:', settings.composite);\n        }\n        const namespace = 'jupyterlab-webviz';\n        const { commands } = app;\n        const tracker = new WidgetTracker({ namespace });\n        const factory = new WebvizFactory({ name: FACTORY, fileTypes: ['webviz'], defaultFor: ['webviz'] }, defaultROSEndpoint);\n        // Handle state restoration.\n        restorer.restore(tracker, {\n            command: 'docmanager:open',\n            args: widget => ({ path: widget.context.path, factory: FACTORY }),\n            name: widget => widget.context.path\n        });\n        factory.widgetCreated.connect((sender, widget) => {\n            widget.title.icon = 'jp-MaterialIcon ZethusIcon'; // TODO change\n            // Notify the instance tracker if restore data needs to update.\n            widget.context.pathChanged.connect(() => {\n                tracker.save(widget);\n            });\n            tracker.add(widget);\n        });\n        app.docRegistry.addWidgetFactory(factory);\n        // Function to create a new untitled diagram file, given\n        // the current working directory.\n        const createNewWebviz = (cwd) => {\n            return commands\n                .execute('docmanager:new-untitled', {\n                path: cwd,\n                type: 'file',\n                ext: '.webviz'\n            })\n                .then(model => {\n                return commands.execute('docmanager:open', {\n                    path: model.path,\n                    factory: FACTORY\n                });\n            });\n        };\n        app.docRegistry.addFileType({\n            name: 'webviz',\n            displayName: 'Webviz File',\n            mimeTypes: ['application/json'],\n            extensions: ['.webviz'],\n            icon: webvizIcon,\n            fileFormat: 'text'\n        });\n        commands.addCommand('webviz:launch', {\n            label: 'Webviz',\n            icon: webvizIcon,\n            caption: 'Launch the Webviz viewer',\n            execute: () => {\n                const cwd = browserFactory.defaultBrowser.model.path;\n                return createNewWebviz(cwd);\n            }\n            // isEnabled\n        });\n        // app.commands.addCommand(\"webviz:open\", {\n        //   label: 'Webviz',\n        //   icon: webvizIcon,\n        //   execute: () => {\n        //     let widget = new WebvizWidget({}, defaultROSEndpoint);\n        //     app.shell.add(widget, 'main');\n        //     // Activate the widget\n        //     app.shell.activateById(widget.id);\n        //   },\n        // });\n        // Add a launcher item if the launcher is available.\n        if (launcher) {\n            launcher.add({\n                command: 'webviz:launch',\n                rank: 5,\n                category: 'Robotics'\n            });\n        }\n        requestAPI('get_example')\n            .then(data => {\n            console.log(data);\n        })\n            .catch(reason => {\n            console.error(`The jupyterlab-webviz server extension appears to be missing.\\n${reason}`);\n        });\n    }\n};\nexport default plugin;\n","export default \"<!--\\nCopyright (c) 2018-present, GM Cruise LLC\\n\\nThis source code is licensed under the Apache License, Version 2.0,\\nfound in the LICENSE file in the root directory of this source tree.\\nYou may not use this file except in compliance with the License.\\n-->\\n<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"28\\\" height=\\\"28\\\" viewBox=\\\"0 0 28 28\\\">\\n  <title>\\n    webviz\\n  </title>\\n  <desc>\\n    webviz logo\\n  </desc>\\n  <g fill=\\\"none\\\" fill-rule=\\\"evenodd\\\" stroke-width=\\\"2\\\">\\n    <path stroke=\\\"#E987FF\\\" d=\\\"M11 2.8v14.116l11.29 4.168V5.996L11 2z\\\" opacity=\\\".983\\\"/>\\n    <path fill=\\\"#20C0FF\\\" fill-opacity=\\\".3\\\" fill-rule=\\\"nonzero\\\" stroke=\\\"#20C0FF\\\" d=\\\"M8 4.8v14.116l11.29 4.168V7.996L8 4z\\\"/>\\n    <path stroke=\\\"#BD10E0\\\" d=\\\"M5 6.8v14.116l11.29 4.168V9.996L5 6z\\\"/>\\n  </g>\\n</svg>\\n\";"],"sourceRoot":""}
import _extends from "@babel/runtime/helpers/extends";
import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["prefixCls", "className", "onScroll", "renderTextarea"];
import React, { useEffect, Fragment, useContext } from 'react';
import { EditorContext } from '../../Context';
import shortcuts from './shortcuts';
import Markdown from './Markdown';
import Textarea from './Textarea';
import { TextAreaCommandOrchestrator } from '../../commands';
import "./index.css";
export default function TextArea(props) {
  var _ref = props || {},
      prefixCls = _ref.prefixCls,
      className = _ref.className,
      onScroll = _ref.onScroll,
      renderTextarea = _ref.renderTextarea,
      otherProps = _objectWithoutProperties(_ref, _excluded);

  var _useContext = useContext(EditorContext),
      markdown = _useContext.markdown,
      scrollTop = _useContext.scrollTop,
      commands = _useContext.commands,
      extraCommands = _useContext.extraCommands,
      onChange = _useContext.onChange,
      dispatch = _useContext.dispatch;

  var textRef = React.useRef(null);
  var executeRef = React.useRef();
  var warp = /*#__PURE__*/React.createRef();
  useEffect(function () {
    var state = {};

    if (warp.current) {
      state.textareaWarp = warp.current || undefined;
      warp.current.scrollTop = scrollTop || 0;
    }

    if (dispatch) {
      dispatch(_objectSpread({}, state));
    } // eslint-disable-next-line react-hooks/exhaustive-deps

  }, []);
  useEffect(function () {
    if (textRef.current && dispatch) {
      var _commandOrchestrator = new TextAreaCommandOrchestrator(textRef.current);

      executeRef.current = _commandOrchestrator;
      dispatch({
        textarea: textRef.current,
        commandOrchestrator: _commandOrchestrator
      });
    } // eslint-disable-next-line react-hooks/exhaustive-deps

  }, []);
  return /*#__PURE__*/React.createElement("div", {
    ref: warp,
    className: "".concat(prefixCls, "-aree ").concat(className || ''),
    onScroll: onScroll
  }, /*#__PURE__*/React.createElement("div", {
    className: "".concat(prefixCls, "-text")
  }, renderTextarea ? /*#__PURE__*/React.cloneElement(renderTextarea(_objectSpread(_objectSpread({}, otherProps), {}, {
    value: markdown,
    autoComplete: 'off',
    autoCorrect: 'off',
    spellCheck: 'false',
    autoCapitalize: 'off',
    className: "".concat(prefixCls, "-text-input"),
    style: {
      WebkitTextFillColor: 'inherit',
      overflow: 'auto'
    }
  }), {
    dispatch: dispatch,
    onChange: onChange,
    shortcuts: shortcuts,
    useContext: {
      commands: commands,
      extraCommands: extraCommands,
      commandOrchestrator: executeRef.current
    }
  }), {
    ref: textRef
  }) : /*#__PURE__*/React.createElement(Fragment, null, /*#__PURE__*/React.createElement(Markdown, {
    prefixCls: prefixCls
  }), /*#__PURE__*/React.createElement(Textarea, _extends({
    prefixCls: prefixCls
  }, otherProps)))));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = shortcutsHandle;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

function getCommands() {
  var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var resulte = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  data.forEach(function (item) {
    if (item.children && Array.isArray(item.children)) {
      resulte = (0, _objectSpread2.default)((0, _objectSpread2.default)({}, resulte), getCommands(item.children || []));
    } else if (item.keyCommand && item.shortcuts && item.execute) {
      resulte[item.shortcuts.toLocaleLowerCase()] = item;
    }
  });
  return resulte;
}

function shortcutsHandle(e) {
  var commands = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var commandOrchestrator = arguments.length > 2 ? arguments[2] : undefined;
  var dispatch = arguments.length > 3 ? arguments[3] : undefined;
  var state = arguments.length > 4 ? arguments[4] : undefined;
  var data = getCommands(commands || []);
  var shortcuts = [];

  if (e.altKey) {
    shortcuts.push('alt');
  }

  if (e.shiftKey) {
    shortcuts.push('shift');
  }

  if (e.metaKey) {
    shortcuts.push('cmd');
  }

  if (e.ctrlKey) {
    shortcuts.push('ctrl');
  }

  if (shortcuts.length > 0 && !/(control|alt|meta|shift)/.test(e.key.toLocaleLowerCase())) {
    shortcuts.push(e.key.toLocaleLowerCase());
  }

  if (/escape/.test(e.key.toLocaleLowerCase())) {
    shortcuts.push('escape');
  }

  if (shortcuts.length < 1) {
    return;
  }

  var equal = !!data[shortcuts.join('+')];
  var command = equal ? data[shortcuts.join('+')] : undefined;
  Object.keys(data).forEach(function (item) {
    var isequal = item.split('+').every(function (v) {
      if (/ctrlcmd/.test(v)) {
        return shortcuts.includes('ctrl') || shortcuts.includes('cmd');
      }

      return shortcuts.includes(v);
    });

    if (isequal) {
      command = data[item];
    }
  });

  if (command && commandOrchestrator) {
    e.stopPropagation();
    e.preventDefault();
    commandOrchestrator.executeCommand(command, dispatch, state);
    return;
  }
}

module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1RleHRBcmVhL3Nob3J0Y3V0cy50cyJdLCJuYW1lcyI6WyJnZXRDb21tYW5kcyIsImRhdGEiLCJyZXN1bHRlIiwiZm9yRWFjaCIsIml0ZW0iLCJjaGlsZHJlbiIsIkFycmF5IiwiaXNBcnJheSIsImtleUNvbW1hbmQiLCJzaG9ydGN1dHMiLCJleGVjdXRlIiwidG9Mb2NhbGVMb3dlckNhc2UiLCJzaG9ydGN1dHNIYW5kbGUiLCJlIiwiY29tbWFuZHMiLCJjb21tYW5kT3JjaGVzdHJhdG9yIiwiZGlzcGF0Y2giLCJzdGF0ZSIsImFsdEtleSIsInB1c2giLCJzaGlmdEtleSIsIm1ldGFLZXkiLCJjdHJsS2V5IiwibGVuZ3RoIiwidGVzdCIsImtleSIsImVxdWFsIiwiam9pbiIsImNvbW1hbmQiLCJ1bmRlZmluZWQiLCJPYmplY3QiLCJrZXlzIiwiaXNlcXVhbCIsInNwbGl0IiwiZXZlcnkiLCJ2IiwiaW5jbHVkZXMiLCJzdG9wUHJvcGFnYXRpb24iLCJwcmV2ZW50RGVmYXVsdCIsImV4ZWN1dGVDb21tYW5kIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUdBLFNBQVNBLFdBQVQsR0FBOEc7QUFBQSxNQUF6RkMsSUFBeUYsdUVBQXRFLEVBQXNFO0FBQUEsTUFBbEVDLE9BQWtFLHVFQUE5QixFQUE4QjtBQUM1R0QsRUFBQUEsSUFBSSxDQUFDRSxPQUFMLENBQWEsVUFBQ0MsSUFBRCxFQUFVO0FBQ3JCLFFBQUlBLElBQUksQ0FBQ0MsUUFBTCxJQUFpQkMsS0FBSyxDQUFDQyxPQUFOLENBQWNILElBQUksQ0FBQ0MsUUFBbkIsQ0FBckIsRUFBbUQ7QUFDakRILE1BQUFBLE9BQU8sK0RBQVFBLE9BQVIsR0FBb0JGLFdBQVcsQ0FBQ0ksSUFBSSxDQUFDQyxRQUFMLElBQWlCLEVBQWxCLENBQS9CLENBQVA7QUFDRCxLQUZELE1BRU8sSUFBSUQsSUFBSSxDQUFDSSxVQUFMLElBQW1CSixJQUFJLENBQUNLLFNBQXhCLElB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QUFDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElDb21tYW5kLCBUZXh0QXJlYUNvbW1hbmRPcmNoZXN0cmF0b3IgfSBmcm9tICcuLi8uLi9jb21tYW5kcyc7XG5pbXBvcnQgeyBDb250ZXh0U3RvcmUsIEV4ZWN1dGVDb21tYW5kU3RhdGUgfSBmcm9tICcuLi8uLi9Db250ZXh0JztcblxuZnVuY3Rpb24gZ2V0Q29tbWFuZHMoZGF0YTogSUNvbW1hbmRbXSA9IFtdLCByZXN1bHRlOiBSZWNvcmQ8c3RyaW5nLCBJQ29tbWFuZD4gPSB7fSk6IFJlY29yZDxzdHJpbmcsIElDb21tYW5kPiB7XG4gIGRhdGEuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgIGlmIChpdGVtLmNoaWxkcmVuICYmIEFycmF5LmlzQXJyYXkoaXRlbS5jaGlsZHJlbikpIHtcbiAgICAgIHJlc3VsdGUgPSB7IC4uLnJlc3VsdGUsIC4uLmdldENvbW1hbmRzKGl0ZW0uY2hpbGRyZW4gfHwgW10pIH07XG4gICAgfSBlbHNlIGlmIChpdGVtLmtleUNvbW1hbmQgJiYgaXRlbS5zaG9ydGN1dHMgJiYgaXRlbS5leGVjdXRlKSB7XG4gICAgICByZXN1bHRlW2l0ZW0uc2hvcnRjdXRzLnRvTG9jYWxlTG93ZXJDYXNlKCldID0gaXRlbTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0ZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2hvcnRjdXRzSGFuZGxlKFxuICBlOiBLZXlib2FyZEV2ZW50IHwgUmVhY3QuS2V5Ym9hcmRFdmVudDxIVE1MVGV4dEFyZWFFbGVtZW50PixcbiAgY29tbWFuZHM6IElDb21tYW5kW10gPSBbXSxcbiAgY29tbWFuZE9yY2hlc3RyYXRvcj86IFRleHRBcmVhQ29tbWFuZE9yY2hlc3RyYXRvcixcbiAgZGlzcGF0Y2g/OiBSZWFjdC5EaXNwYXRjaDxDb250ZXh0U3RvcmU+LFxuICBzdGF0ZT86IEV4ZWN1dGVDb21tYW5kU3RhdGUsXG4pIHtcbiAgY29uc3QgZGF0YSA9IGdldENvbW1hbmRzKGNvbW1hbmRzIHx8IFtdKTtcbiAgY29uc3Qgc2hvcnRjdXRzOiAoc3RyaW5nIHwgbnVtYmVyKVtdID0gW107XG4gIGlmIChlLmFsdEtleSkge1xuICAgIHNob3J0Y3V0cy5wdXNoKCdhbHQnKTtcbiAgfVxuICBpZiAoZS5zaGlmdEtleSkge1xuICAgIHNob3J0Y3V0cy5wdXNoKCdzaGlmdCcpO1xuICB9XG4gIGlmIChlLm1ldGFLZXkpIHtcbiAgICBzaG9ydGN1dHMucHVzaCgnY21kJyk7XG4gIH1cbiAgaWYgKGUuY3RybEtleSkge1xuICAgIHNob3J0Y3V0cy5wdXNoKCdjdHJsJyk7XG4gIH1cbiAgaWYgKHNob3J0Y3V0cy5sZW5ndGggPiAwICYmICEvKGNvbnRyb2x8YWx0fG1ldGF8c2hpZnQpLy50ZXN0KGUua2V5LnRvTG9jYWxlTG93ZXJDYXNlKCkpKSB7XG4gICAgc2hvcnRjdXRzLnB1c2goZS5rZXkudG9Mb2NhbGVMb3dlckNhc2UoKSk7XG4gIH1cbiAgaWYgKC9lc2NhcGUvLnRlc3QoZS5rZXkudG9Mb2NhbGVMb3dlckNhc2UoKSkpIHtcbiAgICBzaG9ydGN1dHMucHVzaCgnZXNjYXBlJyk7XG4gIH1cbiAgaWYgKHNob3J0Y3V0cy5sZW5ndGggPCAxKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgbGV0IGVxdWFsID0gISFkYXRhW3Nob3J0Y3V0cy5qb2luKCcrJyldO1xuICBsZXQgY29tbWFuZCA9IGVxdWFsID8gZGF0YVtzaG9ydGN1dHMuam9pbignKycpXSA6IHVuZGVmaW5lZDtcblxuICBPYmplY3Qua2V5cyhkYXRhKS5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgY29uc3QgaXNlcXVhbCA9IGl0ZW0uc3BsaXQoJysnKS5ldmVyeSgodikgPT4ge1xuICAgICAgaWYgKC9jdHJsY21kLy50ZXN0KHYpKSB7XG4gICAgICAgIHJldHVybiBzaG9ydGN1dHMuaW5jbHVkZXMoJ2N0cmwnKSB8fCBzaG9ydGN1dHMuaW5jbHVkZXMoJ2NtZCcpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNob3J0Y3V0cy5pbmNsdWRlcyh2KTtcbiAgICB9KTtcbiAgICBpZiAoaXNlcXVhbCkge1xuICAgICAgY29tbWFuZCA9IGRhdGFbaXRlbV07XG4gICAgfVxuICB9KTtcbiAgaWYgKGNvbW1hbmQgJiYgY29tbWFuZE9yY2hlc3RyYXRvcikge1xuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGNvbW1hbmRPcmNoZXN0cmF0b3IuZXhlY3V0ZUNvbW1hbmQoY29tbWFuZCwgZGlzcGF0Y2gsIHN0YXRlKTtcbiAgICByZXR1cm47XG4gIH1cbn1cbiJdfQ==
import * as React from 'react';
import { selectWord } from '../utils/markdownUtils';
export var bold = {
  name: 'bold',
  keyCommand: 'bold',
  shortcuts: 'ctrlcmd+b',
  buttonProps: {
    'aria-label': 'Add bold text',
    title: 'Add bold text'
  },
  icon: /*#__PURE__*/React.createElement("svg", {
    role: "img",
    width: "12",
    height: "12",
    viewBox: "0 0 384 512"
  }, /*#__PURE__*/React.createElement("path", {
    fill: "currentColor",
    d: "M304.793 243.891c33.639-18.537 53.657-54.16 53.657-95.693 0-48.236-26.25-87.626-68.626-104.179C265.138 34.01 240.849 32 209.661 32H24c-8.837 0-16 7.163-16 16v33.049c0 8.837 7.163 16 16 16h33.113v318.53H24c-8.837 0-16 7.163-16 16V464c0 8.837 7.163 16 16 16h195.69c24.203 0 44.834-1.289 66.866-7.584C337.52 457.193 376 410.647 376 350.014c0-52.168-26.573-91.684-71.207-106.123zM142.217 100.809h67.444c16.294 0 27.536 2.019 37.525 6.717 15.828 8.479 24.906 26.502 24.906 49.446 0 35.029-20.32 56.79-53.029 56.79h-76.846V100.809zm112.642 305.475c-10.14 4.056-22.677 4.907-31.409 4.907h-81.233V281.943h84.367c39.645 0 63.057 25.38 63.057 63.057.001 28.425-13.66 52.483-34.782 61.284z"
  })),
  execute: function execute(state, api) {
    // Adjust the selection to encompass the whole word if the caret is inside one
    var newSelectionRange = selectWord({
      text: state.text,
      selection: state.selection
    });
    var state1 = api.setSelectionRange(newSelectionRange); // Replaces the current selection with the bold mark up

    var state2 = api.replaceSelection("**".concat(state1.selectedText, "**")); // Adjust the selection to not contain the **

    api.setSelectionRange({
      start: state2.selection.end - 2 - state1.selectedText.length,
      end: state2.selection.end - 2
    });
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tYW5kcy9ib2xkLnRzeCJdLCJuYW1lcyI6WyJSZWFjdCIsInNlbGVjdFdvcmQiLCJib2xkIiwibmFtZSIsImtleUNvbW1hbmQiLCJzaG9ydGN1dHMiLCJidXR0b25Qcm9wcyIsInRpdGxlIiwiaWNvbiIsImV4ZWN1dGUiLCJzdGF0ZSIsImFwaSIsIm5ld1NlbGVjdGlvblJhbmdlIiwidGV4dCIsInNlbGVjdGlvbiIsInN0YXRlMSIsInNldFNlbGVjdGlvblJhbmdlIiwic3RhdGUyIiwicmVwbGFjZVNlbGVjdGlvbiIsInNlbGVjdGVkVGV4dCIsInN0YXJ0IiwiZW5kIiwibGVuZ3RoIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQUtBLEtBQVosTUFBdUIsT0FBdkI7QUFFQSxTQUFTQyxVQUFULFFBQTJCLHdCQUEzQjtBQUVBLE9BQU8sSUFBTUMsSUFBYyxHQUFHO0FBQzVCQyxFQUFBQSxJQUFJLEVBQUUsTUFEc0I7QUFFNUJDLEVBQUFBLFVBQVUsRUFBRSxNQUZnQjtBQUc1QkMsRUFBQUEsU0FBUyxFQUFFLFdBSGlCO0FBSTVCQyxFQUFBQSxXQUFXLEVBQUU7QUFBRSxrQkFBYyxlQUFoQjtBQUFpQ0MsSUFBQUEsS0FBSyxFQUFFO0FBQXhDLEdBSmU7QUFLNUJDLEVBQUFBLElBQUksZUFDRjtBQUFLLElBQUEsSUFBSSxFQUFDLEtBQVY7QUFBZ0IsSUFBQSxLQUFLLEVBQUMsSUFBdEI7QUFBMkIsSUFBQSxNQUFNLEVBQUMsSUFBbEM7QUFBdUMsSUFBQSxPQUFPLEVBQUM7QUFBL0Msa0JBQ0U7QUFDRSxJQUFBLElBQUksRUFBQyxjQURQO0FBRUUsSUFBQSxDQUFDLEVBQUM7QUFGSixJQURGLENBTjBCO0FBYTVCQyxFQUFBQSxPQUFPLEVBQUUsaUJBQUNDLEtBQUQsRUFBbUJDLEdBQW5CLEVBQTRDO0FBQ25EO0FBQ0EsUUFBTUMsaUJBQWlCLEdBQUdYLFVBQVUsQ0FBQztBQUFFWSxNQUFBQSxJQUFJLEVBQUVILEtBQUssQ0FBQ0csSUFBZDtBQUFvQkMsTUFBQUEsU0FBUyxFQUFFSixLQUFLLENBQUNJO0FBQXJDLEtBQUQsQ0FBcEM7QUFDQSxRQUFNQyxNQUFNLEdBQUdKLEdBQUcsQ0FBQ0ssaUJBQUosQ0FBc0JKLGlCQUF0QixDQUFmLENBSG1ELENBSW5EOztBQUNBLFFBQU1LLE1BQU0sR0FBR04sR0FBRyxDQUFDTyxnQkFBSixhQUEwQkgsTUFBTSxDQUFDSSxZQUFqQyxRQUFmLENBTG1ELENBTW5EOztBQUNBUixJQUFBQSxHQUFHLENBQUNLLGlCQUFKLENBQXNCO0FBQ3BCSSxNQUFBQSxLQUFLLEVBQUVILE1BQU0sQ0FBQ0gsU0FBUCxDQUFpQk8sR0FBakIsR0FBdUIsQ0FBdkIsR0FBMkJOLE1BQU0sQ0FBQ0ksWUFBUCxDQUFvQkcsTUFEbEM7QUFFcEJELE1BQUFBLEdBQUcsRUFBRUosTUFBTSxDQUFDSCxTQUFQLENBQWlCTyxHQUFqQixHQUF1QjtBQUZSLEtBQXRCO0FBSUQ7QUF4QjJCLENBQXZCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgSUNvbW1hbmQsIFRleHRTdGF0ZSwgVGV4dEFyZWFUZXh0QXBpIH0gZnJvbSAnLi8nO1xuaW1wb3J0IHsgc2VsZWN0V29yZCB9IGZyb20gJy4uL3V0aWxzL21hcmtkb3duVXRpbHMnO1xuXG5leHBvcnQgY29uc3QgYm9sZDogSUNvbW1hbmQgPSB7XG4gIG5hbWU6ICdib2xkJyxcbiAga2V5Q29tbWFuZDogJ2JvbGQnLFxuICBzaG9ydGN1dHM6ICdjdHJsY21kK2InLFxuICBidXR0b25Qcm9wczogeyAnYXJpYS1sYWJlbCc6ICdBZGQgYm9sZCB0ZXh0JywgdGl0bGU6ICdBZGQgYm9sZCB0ZXh0JyB9LFxuICBpY29uOiAoXG4gICAgPHN2ZyByb2xlPVwiaW1nXCIgd2lkdGg9XCIxMlwiIGhlaWdodD1cIjEyXCIgdmlld0JveD1cIjAgMCAzODQgNTEyXCI+XG4gICAgICA8cGF0aFxuICAgICAgICBmaWxsPVwiY3VycmVudENvbG9yXCJcbiAgICAgICAgZD1cIk0zMDQuNzkzIDI0My44OTFjMzMuNjM5LTE4LjUzNyA1My42NTctNTQuMTYgNTMuNjU3LTk1LjY5MyAwLTQ4LjIzNi0yNi4yNS04Ny42MjYtNjguNjI2LTEwNC4xNzlDMjY1LjEzOCAzNC4wMSAyNDAuODQ5IDMyIDIwOS42NjEgMzJIMjRjLTguODM3IDAtMTYgNy4xNjMtMTYgMTZ2MzMuMDQ5YzAgOC44MzcgNy4xNjMgMTYgMTYgMTZoMzMuMTEzdjMxOC41M0gyNGMtOC44MzcgMC0xNiA3LjE2My0xNiAxNlY0NjRjMCA4LjgzNyA3LjE2MyAxNiAxNiAxNmgxOTUuNjljMjQuMjAzIDAgNDQuODM0LTEuMjg5IDY2Ljg2Ni03LjU4NEMzMzcuNTIgNDU3LjE5MyAzNzYgNDEwLjY0NyAzNzYgMzUwLjAxNGMwLTUyLjE2OC0yNi41NzMtOTEuNjg0LTcxLjIwNy0xMDYuMTIzek0xNDIuMjE3IDEwMC44MDloNjcuNDQ0YzE2LjI5NCAwIDI3LjUzNiAyLjAxOSAzNy41MjUgNi43MTcgMTUuODI4IDguNDc5IDI0LjkwNiAyNi41MDIgMjQuOTA2IDQ5LjQ0NiAwIDM1LjAyOS0yMC4zMiA1Ni43OS01My4wMjkgNTYuNzloLTc2Ljg0NlYxMDAuODA5em0xMTIuNjQyIDMwNS40NzVjLTEwLjE0IDQuMDU2LTIyLjY3NyA0LjkwNy0zMS40MDkgNC45MDdoLTgxLjIzM1YyODEuOTQzaDg0LjM2N2MzOS42NDUgMCA2My4wNTcgMjUuMzggNjMuMDU3IDYzLjA1Ny4wMDEgMjguNDI1LTEzLjY2IDUyLjQ4My0zNC43ODIgNjEuMjg0elwiXG4gICAgICAvPlxuICAgIDwvc3ZnPlxuICApLFxuICBleGVjdXRlOiAoc3RhdGU6IFRleHRTdGF0ZSwgYXBpOiBUZXh0QXJlYVRleHRBcGkpID0+IHtcbiAgICAvLyBBZGp1c3QgdGhlIHNlbGVjdGlvbiB0byBlbmNvbXBhc3MgdGhlIHdob2xlIHdvcmQgaWYgdGhlIGNhcmV0IGlzIGluc2lkZSBvbmVcbiAgICBjb25zdCBuZXdTZWxlY3Rpb25SYW5nZSA9IHNlbGVjdFdvcmQoeyB0ZXh0OiBzdGF0ZS50ZXh0LCBzZWxlY3Rpb246IHN0YXRlLnNlbGVjdGlvbiB9KTtcbiAgICBjb25zdCBzdGF0ZTEgPSBhcGkuc2V0U2VsZWN0aW9uUmFuZ2UobmV3U2VsZWN0aW9uUmFuZ2UpO1xuICAgIC8vIFJlcGxhY2VzIHRoZSBjdXJyZW50IHNlbGVjdGlvbiB3aXRoIHRoZSBib2xkIG1hcmsgdXBcbiAgICBjb25zdCBzdGF0ZTIgPSBhcGkucmVwbGFjZVNlbGVjdGlvbihgKioke3N0YXRlMS5zZWxlY3RlZFRleHR9KipgKTtcbiAgICAvLyBBZGp1c3QgdGhlIHNlbGVjdGlvbiB0byBub3QgY29udGFpbiB0aGUgKipcbiAgICBhcGkuc2V0U2VsZWN0aW9uUmFuZ2Uoe1xuICAgICAgc3RhcnQ6IHN0YXRlMi5zZWxlY3Rpb24uZW5kIC0gMiAtIHN0YXRlMS5zZWxlY3RlZFRleHQubGVuZ3RoLFxuICAgICAgZW5kOiBzdGF0ZTIuc2VsZWN0aW9uLmVuZCAtIDIsXG4gICAgfSk7XG4gIH0sXG59O1xuIl19
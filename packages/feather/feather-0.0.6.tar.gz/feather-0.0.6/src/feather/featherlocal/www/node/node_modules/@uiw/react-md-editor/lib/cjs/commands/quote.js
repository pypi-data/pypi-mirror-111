"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.quote = void 0;

var React = _interopRequireWildcard(require("react"));

var _markdownUtils = require("../utils/markdownUtils");

var quote = {
  name: 'quote',
  keyCommand: 'quote',
  shortcuts: 'ctrlcmd+q',
  buttonProps: {
    'aria-label': 'Insert a quote',
    title: 'Insert a quote'
  },
  icon: /*#__PURE__*/React.createElement("svg", {
    width: "12",
    height: "12",
    viewBox: "0 0 520 520"
  }, /*#__PURE__*/React.createElement("path", {
    fill: "currentColor",
    d: "M520,95.75 L520,225.75 C520,364.908906 457.127578,437.050625 325.040469,472.443125 C309.577578,476.586875 294.396016,464.889922 294.396016,448.881641 L294.396016,414.457031 C294.396016,404.242891 300.721328,395.025078 310.328125,391.554687 C377.356328,367.342187 414.375,349.711094 414.375,274.5 L341.25,274.5 C314.325781,274.5 292.5,252.674219 292.5,225.75 L292.5,95.75 C292.5,68.8257812 314.325781,47 341.25,47 L471.25,47 C498.174219,47 520,68.8257812 520,95.75 Z M178.75,47 L48.75,47 C21.8257813,47 0,68.8257812 0,95.75 L0,225.75 C0,252.674219 21.8257813,274.5 48.75,274.5 L121.875,274.5 C121.875,349.711094 84.8563281,367.342187 17.828125,391.554687 C8.22132813,395.025078 1.89601563,404.242891 1.89601563,414.457031 L1.89601563,448.881641 C1.89601563,464.889922 17.0775781,476.586875 32.5404687,472.443125 C164.627578,437.050625 227.5,364.908906 227.5,225.75 L227.5,95.75 C227.5,68.8257812 205.674219,47 178.75,47 Z"
  })),
  execute: function execute(state, api) {
    // Adjust the selection to encompass the whole word if the caret is inside one
    var newSelectionRange = (0, _markdownUtils.selectWord)({
      text: state.text,
      selection: state.selection
    });
    var state1 = api.setSelectionRange(newSelectionRange);
    var breaksBeforeCount = (0, _markdownUtils.getBreaksNeededForEmptyLineBefore)(state1.text, state1.selection.start);
    var breaksBefore = Array(breaksBeforeCount + 1).join('\n');
    var breaksAfterCount = (0, _markdownUtils.getBreaksNeededForEmptyLineAfter)(state1.text, state1.selection.end);
    var breaksAfter = Array(breaksAfterCount + 1).join('\n'); // Replaces the current selection with the quote mark up

    api.replaceSelection("".concat(breaksBefore, "> ").concat(state1.selectedText).concat(breaksAfter));
    var selectionStart = state1.selection.start + breaksBeforeCount + 2;
    var selectionEnd = selectionStart + state1.selectedText.length;
    api.setSelectionRange({
      start: selectionStart,
      end: selectionEnd
    });
  }
};
exports.quote = quote;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tYW5kcy9xdW90ZS50c3giXSwibmFtZXMiOlsicXVvdGUiLCJuYW1lIiwia2V5Q29tbWFuZCIsInNob3J0Y3V0cyIsImJ1dHRvblByb3BzIiwidGl0bGUiLCJpY29uIiwiZXhlY3V0ZSIsInN0YXRlIiwiYXBpIiwibmV3U2VsZWN0aW9uUmFuZ2UiLCJ0ZXh0Iiwic2VsZWN0aW9uIiwic3RhdGUxIiwic2V0U2VsZWN0aW9uUmFuZ2UiLCJicmVha3NCZWZvcmVDb3VudCIsInN0YXJ0IiwiYnJlYWtzQmVmb3JlIiwiQXJyYXkiLCJqb2luIiwiYnJlYWtzQWZ0ZXJDb3VudCIsImVuZCIsImJyZWFrc0FmdGVyIiwicmVwbGFjZVNlbGVjdGlvbiIsInNlbGVjdGVkVGV4dCIsInNlbGVjdGlvblN0YXJ0Iiwic2VsZWN0aW9uRW5kIiwibGVuZ3RoIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7QUFFQTs7QUFNTyxJQUFNQSxLQUFlLEdBQUc7QUFDN0JDLEVBQUFBLElBQUksRUFBRSxPQUR1QjtBQUU3QkMsRUFBQUEsVUFBVSxFQUFFLE9BRmlCO0FBRzdCQyxFQUFBQSxTQUFTLEVBQUUsV0FIa0I7QUFJN0JDLEVBQUFBLFdBQVcsRUFBRTtBQUFFLGtCQUFjLGdCQUFoQjtBQUFrQ0MsSUFBQUEsS0FBSyxFQUFFO0FBQXpDLEdBSmdCO0FBSzdCQyxFQUFBQSxJQUFJLGVBQ0Y7QUFBSyxJQUFBLEtBQUssRUFBQyxJQUFYO0FBQWdCLElBQUEsTUFBTSxFQUFDLElBQXZCO0FBQTRCLElBQUEsT0FBTyxFQUFDO0FBQXBDLGtCQUNFO0FBQ0UsSUFBQSxJQUFJLEVBQUMsY0FEUDtBQUVFLElBQUEsQ0FBQyxFQUFDO0FBRkosSUFERixDQU4yQjtBQWE3QkMsRUFBQUEsT0FBTyxFQUFFLGlCQUFDQyxLQUFELEVBQW1CQyxHQUFuQixFQUE0QztBQUNuRDtBQUNBLFFBQU1DLGlCQUFpQixHQUFHLCtCQUFXO0FBQUVDLE1BQUFBLElBQUksRUFBRUgsS0FBSyxDQUFDRyxJQUFkO0FBQW9CQyxNQUFBQSxTQUFTLEVBQUVKLEtBQUssQ0FBQ0k7QUFBckMsS0FBWCxDQUExQjtBQUNBLFFBQU1DLE1BQU0sR0FBR0osR0FBRyxDQUFDSyxpQkFBSixDQUFzQkosaUJBQXRCLENBQWY7QUFDQSxRQUFNSyxpQkFBaUIsR0FBRyxzREFBa0NGLE1BQU0sQ0FBQ0YsSUFBekMsRUFBK0NFLE1BQU0sQ0FBQ0QsU0FBUCxDQUFpQkksS0FBaEUsQ0FBMUI7QUFDQSxRQUFNQyxZQUFZLEdBQUdDLEtBQUssQ0FBQ0gsaUJBQWlCLEdBQUcsQ0FBckIsQ0FBTCxDQUE2QkksSUFBN0IsQ0FBa0MsSUFBbEMsQ0FBckI7QUFFQSxRQUFNQyxnQkFBZ0IsR0FBRyxxREFBaUNQLE1BQU0sQ0FBQ0YsSUFBeEMsRUFBOENFLE1BQU0sQ0FBQ0QsU0FBUCxDQUFpQlMsR0FBL0QsQ0FBekI7QUFDQSxRQUFNQyxXQUFXLEdBQUdKLEtBQUssQ0FBQ0UsZ0JBQWdCLEdBQUcsQ0FBcEIsQ0FBTCxDQUE0QkQsSUFBNUIsQ0FBaUMsSUFBakMsQ0FBcEIsQ0FSbUQsQ0FVbkQ7O0FBQ0FWLElBQUFBLEdBQUcsQ0FBQ2MsZ0JBQUosV0FBd0JOLFlBQXhCLGVBQXlDSixNQUFNLENBQUNXLFlBQWhELFNBQStERixXQUEvRDtBQUVBLFFBQU1HLGNBQWMsR0FBR1osTUFBTSxDQUFDRCxTQUFQLENBQWlCSSxLQUFqQixHQUF5QkQsaUJBQXpCLEdBQTZDLENBQXBFO0FBQ0EsUUFBTVcsWUFBWSxHQUFHRCxjQUFjLEdBQUdaLE1BQU0sQ0FBQ1csWUFBUCxDQUFvQkcsTUFBMUQ7QUFFQWxCLElBQUFBLEdBQUcsQ0FBQ0ssaUJBQUosQ0FBc0I7QUFDcEJFLE1BQUFBLEtBQUssRUFBRVMsY0FEYTtBQUVwQkosTUFBQUEsR0FBRyxFQUFFSztBQUZlLEtBQXRCO0FBSUQ7QUFqQzRCLENBQXhCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgSUNvbW1hbmQsIFRleHRTdGF0ZSwgVGV4dEFyZWFUZXh0QXBpIH0gZnJvbSAnLi8nO1xuaW1wb3J0IHtcbiAgZ2V0QnJlYWtzTmVlZGVkRm9yRW1wdHlMaW5lQmVmb3JlLFxuICBnZXRCcmVha3NOZWVkZWRGb3JFbXB0eUxpbmVBZnRlcixcbiAgc2VsZWN0V29yZCxcbn0gZnJvbSAnLi4vdXRpbHMvbWFya2Rvd25VdGlscyc7XG5cbmV4cG9ydCBjb25zdCBxdW90ZTogSUNvbW1hbmQgPSB7XG4gIG5hbWU6ICdxdW90ZScsXG4gIGtleUNvbW1hbmQ6ICdxdW90ZScsXG4gIHNob3J0Y3V0czogJ2N0cmxjbWQrcScsXG4gIGJ1dHRvblByb3BzOiB7ICdhcmlhLWxhYmVsJzogJ0luc2VydCBhIHF1b3RlJywgdGl0bGU6ICdJbnNlcnQgYSBxdW90ZScgfSxcbiAgaWNvbjogKFxuICAgIDxzdmcgd2lkdGg9XCIxMlwiIGhlaWdodD1cIjEyXCIgdmlld0JveD1cIjAgMCA1MjAgNTIwXCI+XG4gICAgICA8cGF0aFxuICAgICAgICBmaWxsPVwiY3VycmVudENvbG9yXCJcbiAgICAgICAgZD1cIk01MjAsOTUuNzUgTDUyMCwyMjUuNzUgQzUyMCwzNjQuOTA4OTA2IDQ1Ny4xMjc1NzgsNDM3LjA1MDYyNSAzMjUuMDQwNDY5LDQ3Mi40NDMxMjUgQzMwOS41Nzc1NzgsNDc2LjU4Njg3NSAyOTQuMzk2MDE2LDQ2NC44ODk5MjIgMjk0LjM5NjAxNiw0NDguODgxNjQxIEwyOTQuMzk2MDE2LDQxNC40NTcwMzEgQzI5NC4zOTYwMTYsNDA0LjI0Mjg5MSAzMDAuNzIxMzI4LDM5NS4wMjUwNzggMzEwLjMyODEyNSwzOTEuNTU0Njg3IEMzNzcuMzU2MzI4LDM2Ny4zNDIxODcgNDE0LjM3NSwzNDkuNzExMDk0IDQxNC4zNzUsMjc0LjUgTDM0MS4yNSwyNzQuNSBDMzE0LjMyNTc4MSwyNzQuNSAyOTIuNSwyNTIuNjc0MjE5IDI5Mi41LDIyNS43NSBMMjkyLjUsOTUuNzUgQzI5Mi41LDY4LjgyNTc4MTIgMzE0LjMyNTc4MSw0NyAzNDEuMjUsNDcgTDQ3MS4yNSw0NyBDNDk4LjE3NDIxOSw0NyA1MjAsNjguODI1NzgxMiA1MjAsOTUuNzUgWiBNMTc4Ljc1LDQ3IEw0OC43NSw0NyBDMjEuODI1NzgxMyw0NyAwLDY4LjgyNTc4MTIgMCw5NS43NSBMMCwyMjUuNzUgQzAsMjUyLjY3NDIxOSAyMS44MjU3ODEzLDI3NC41IDQ4Ljc1LDI3NC41IEwxMjEuODc1LDI3NC41IEMxMjEuODc1LDM0OS43MTEwOTQgODQuODU2MzI4MSwzNjcuMzQyMTg3IDE3LjgyODEyNSwzOTEuNTU0Njg3IEM4LjIyMTMyODEzLDM5NS4wMjUwNzggMS44OTYwMTU2Myw0MDQuMjQyODkxIDEuODk2MDE1NjMsNDE0LjQ1NzAzMSBMMS44OTYwMTU2Myw0NDguODgxNjQxIEMxLjg5NjAxNTYzLDQ2NC44ODk5MjIgMTcuMDc3NTc4MSw0NzYuNTg2ODc1IDMyLjU0MDQ2ODcsNDcyLjQ0MzEyNSBDMTY0LjYyNzU3OCw0MzcuMDUwNjI1IDIyNy41LDM2NC45MDg5MDYgMjI3LjUsMjI1Ljc1IEwyMjcuNSw5NS43NSBDMjI3LjUsNjguODI1NzgxMiAyMDUuNjc0MjE5LDQ3IDE3OC43NSw0NyBaXCJcbiAgICAgIC8+XG4gICAgPC9zdmc+XG4gICksXG4gIGV4ZWN1dGU6IChzdGF0ZTogVGV4dFN0YXRlLCBhcGk6IFRleHRBcmVhVGV4dEFwaSkgPT4ge1xuICAgIC8vIEFkanVzdCB0aGUgc2VsZWN0aW9uIHRvIGVuY29tcGFzcyB0aGUgd2hvbGUgd29yZCBpZiB0aGUgY2FyZXQgaXMgaW5zaWRlIG9uZVxuICAgIGNvbnN0IG5ld1NlbGVjdGlvblJhbmdlID0gc2VsZWN0V29yZCh7IHRleHQ6IHN0YXRlLnRleHQsIHNlbGVjdGlvbjogc3RhdGUuc2VsZWN0aW9uIH0pO1xuICAgIGNvbnN0IHN0YXRlMSA9IGFwaS5zZXRTZWxlY3Rpb25SYW5nZShuZXdTZWxlY3Rpb25SYW5nZSk7XG4gICAgY29uc3QgYnJlYWtzQmVmb3JlQ291bnQgPSBnZXRCcmVha3NOZWVkZWRGb3JFbXB0eUxpbmVCZWZvcmUoc3RhdGUxLnRleHQsIHN0YXRlMS5zZWxlY3Rpb24uc3RhcnQpO1xuICAgIGNvbnN0IGJyZWFrc0JlZm9yZSA9IEFycmF5KGJyZWFrc0JlZm9yZUNvdW50ICsgMSkuam9pbignXFxuJyk7XG5cbiAgICBjb25zdCBicmVha3NBZnRlckNvdW50ID0gZ2V0QnJlYWtzTmVlZGVkRm9yRW1wdHlMaW5lQWZ0ZXIoc3RhdGUxLnRleHQsIHN0YXRlMS5zZWxlY3Rpb24uZW5kKTtcbiAgICBjb25zdCBicmVha3NBZnRlciA9IEFycmF5KGJyZWFrc0FmdGVyQ291bnQgKyAxKS5qb2luKCdcXG4nKTtcblxuICAgIC8vIFJlcGxhY2VzIHRoZSBjdXJyZW50IHNlbGVjdGlvbiB3aXRoIHRoZSBxdW90ZSBtYXJrIHVwXG4gICAgYXBpLnJlcGxhY2VTZWxlY3Rpb24oYCR7YnJlYWtzQmVmb3JlfT4gJHtzdGF0ZTEuc2VsZWN0ZWRUZXh0fSR7YnJlYWtzQWZ0ZXJ9YCk7XG5cbiAgICBjb25zdCBzZWxlY3Rpb25TdGFydCA9IHN0YXRlMS5zZWxlY3Rpb24uc3RhcnQgKyBicmVha3NCZWZvcmVDb3VudCArIDI7XG4gICAgY29uc3Qgc2VsZWN0aW9uRW5kID0gc2VsZWN0aW9uU3RhcnQgKyBzdGF0ZTEuc2VsZWN0ZWRUZXh0Lmxlbmd0aDtcblxuICAgIGFwaS5zZXRTZWxlY3Rpb25SYW5nZSh7XG4gICAgICBzdGFydDogc2VsZWN0aW9uU3RhcnQsXG4gICAgICBlbmQ6IHNlbGVjdGlvbkVuZCxcbiAgICB9KTtcbiAgfSxcbn07XG4iXX0=
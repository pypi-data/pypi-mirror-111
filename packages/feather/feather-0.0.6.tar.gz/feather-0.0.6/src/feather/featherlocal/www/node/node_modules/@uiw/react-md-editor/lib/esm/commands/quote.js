import * as React from 'react';
import { getBreaksNeededForEmptyLineBefore, getBreaksNeededForEmptyLineAfter, selectWord } from '../utils/markdownUtils';
export var quote = {
  name: 'quote',
  keyCommand: 'quote',
  shortcuts: 'ctrlcmd+q',
  buttonProps: {
    'aria-label': 'Insert a quote',
    title: 'Insert a quote'
  },
  icon: /*#__PURE__*/React.createElement("svg", {
    width: "12",
    height: "12",
    viewBox: "0 0 520 520"
  }, /*#__PURE__*/React.createElement("path", {
    fill: "currentColor",
    d: "M520,95.75 L520,225.75 C520,364.908906 457.127578,437.050625 325.040469,472.443125 C309.577578,476.586875 294.396016,464.889922 294.396016,448.881641 L294.396016,414.457031 C294.396016,404.242891 300.721328,395.025078 310.328125,391.554687 C377.356328,367.342187 414.375,349.711094 414.375,274.5 L341.25,274.5 C314.325781,274.5 292.5,252.674219 292.5,225.75 L292.5,95.75 C292.5,68.8257812 314.325781,47 341.25,47 L471.25,47 C498.174219,47 520,68.8257812 520,95.75 Z M178.75,47 L48.75,47 C21.8257813,47 0,68.8257812 0,95.75 L0,225.75 C0,252.674219 21.8257813,274.5 48.75,274.5 L121.875,274.5 C121.875,349.711094 84.8563281,367.342187 17.828125,391.554687 C8.22132813,395.025078 1.89601563,404.242891 1.89601563,414.457031 L1.89601563,448.881641 C1.89601563,464.889922 17.0775781,476.586875 32.5404687,472.443125 C164.627578,437.050625 227.5,364.908906 227.5,225.75 L227.5,95.75 C227.5,68.8257812 205.674219,47 178.75,47 Z"
  })),
  execute: function execute(state, api) {
    // Adjust the selection to encompass the whole word if the caret is inside one
    var newSelectionRange = selectWord({
      text: state.text,
      selection: state.selection
    });
    var state1 = api.setSelectionRange(newSelectionRange);
    var breaksBeforeCount = getBreaksNeededForEmptyLineBefore(state1.text, state1.selection.start);
    var breaksBefore = Array(breaksBeforeCount + 1).join('\n');
    var breaksAfterCount = getBreaksNeededForEmptyLineAfter(state1.text, state1.selection.end);
    var breaksAfter = Array(breaksAfterCount + 1).join('\n'); // Replaces the current selection with the quote mark up

    api.replaceSelection("".concat(breaksBefore, "> ").concat(state1.selectedText).concat(breaksAfter));
    var selectionStart = state1.selection.start + breaksBeforeCount + 2;
    var selectionEnd = selectionStart + state1.selectedText.length;
    api.setSelectionRange({
      start: selectionStart,
      end: selectionEnd
    });
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tYW5kcy9xdW90ZS50c3giXSwibmFtZXMiOlsiUmVhY3QiLCJnZXRCcmVha3NOZWVkZWRGb3JFbXB0eUxpbmVCZWZvcmUiLCJnZXRCcmVha3NOZWVkZWRGb3JFbXB0eUxpbmVBZnRlciIsInNlbGVjdFdvcmQiLCJxdW90ZSIsIm5hbWUiLCJrZXlDb21tYW5kIiwic2hvcnRjdXRzIiwiYnV0dG9uUHJvcHMiLCJ0aXRsZSIsImljb24iLCJleGVjdXRlIiwic3RhdGUiLCJhcGkiLCJuZXdTZWxlY3Rpb25SYW5nZSIsInRleHQiLCJzZWxlY3Rpb24iLCJzdGF0ZTEiLCJzZXRTZWxlY3Rpb25SYW5nZSIsImJyZWFrc0JlZm9yZUNvdW50Iiwic3RhcnQiLCJicmVha3NCZWZvcmUiLCJBcnJheSIsImpvaW4iLCJicmVha3NBZnRlckNvdW50IiwiZW5kIiwiYnJlYWtzQWZ0ZXIiLCJyZXBsYWNlU2VsZWN0aW9uIiwic2VsZWN0ZWRUZXh0Iiwic2VsZWN0aW9uU3RhcnQiLCJzZWxlY3Rpb25FbmQiLCJsZW5ndGgiXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBS0EsS0FBWixNQUF1QixPQUF2QjtBQUVBLFNBQ0VDLGlDQURGLEVBRUVDLGdDQUZGLEVBR0VDLFVBSEYsUUFJTyx3QkFKUDtBQU1BLE9BQU8sSUFBTUMsS0FBZSxHQUFHO0FBQzdCQyxFQUFBQSxJQUFJLEVBQUUsT0FEdUI7QUFFN0JDLEVBQUFBLFVBQVUsRUFBRSxPQUZpQjtBQUc3QkMsRUFBQUEsU0FBUyxFQUFFLFdBSGtCO0FBSTdCQyxFQUFBQSxXQUFXLEVBQUU7QUFBRSxrQkFBYyxnQkFBaEI7QUFBa0NDLElBQUFBLEtBQUssRUFBRTtBQUF6QyxHQUpnQjtBQUs3QkMsRUFBQUEsSUFBSSxlQUNGO0FBQUssSUFBQSxLQUFLLEVBQUMsSUFBWDtBQUFnQixJQUFBLE1BQU0sRUFBQyxJQUF2QjtBQUE0QixJQUFBLE9BQU8sRUFBQztBQUFwQyxrQkFDRTtBQUNFLElBQUEsSUFBSSxFQUFDLGNBRFA7QUFFRSxJQUFBLENBQUMsRUFBQztBQUZKLElBREYsQ0FOMkI7QUFhN0JDLEVBQUFBLE9BQU8sRUFBRSxpQkFBQ0MsS0FBRCxFQUFtQkMsR0FBbkIsRUFBNEM7QUFDbkQ7QUFDQSxRQUFNQyxpQkFBaUIsR0FBR1gsVUFBVSxDQUFDO0FBQUVZLE1BQUFBLElBQUksRUFBRUgsS0FBSyxDQUFDRyxJQUFkO0FBQW9CQyxNQUFBQSxTQUFTLEVBQUVKLEtBQUssQ0FBQ0k7QUFBckMsS0FBRCxDQUFwQztBQUNBLFFBQU1DLE1BQU0sR0FBR0osR0FBRyxDQUFDSyxpQkFBSixDQUFzQkosaUJBQXRCLENBQWY7QUFDQSxRQUFNSyxpQkFBaUIsR0FBR2xCLGlDQUFpQyxDQUFDZ0IsTUFBTSxDQUFDRixJQUFSLEVBQWNFLE1BQU0sQ0FBQ0QsU0FBUCxDQUFpQkksS0FBL0IsQ0FBM0Q7QUFDQSxRQUFNQyxZQUFZLEdBQUdDLEtBQUssQ0FBQ0gsaUJBQWlCLEdBQUcsQ0FBckIsQ0FBTCxDQUE2QkksSUFBN0IsQ0FBa0MsSUFBbEMsQ0FBckI7QUFFQSxRQUFNQyxnQkFBZ0IsR0FBR3RCLGdDQUFnQyxDQUFDZSxNQUFNLENBQUNGLElBQVIsRUFBY0UsTUFBTSxDQUFDRCxTQUFQLENBQWlCUyxHQUEvQixDQUF6RDtBQUNBLFFBQU1DLFdBQVcsR0FBR0osS0FBSyxDQUFDRSxnQkFBZ0IsR0FBRyxDQUFwQixDQUFMLENBQTRCRCxJQUE1QixDQUFpQyxJQUFqQyxDQUFwQixDQVJtRCxDQVVuRDs7QUFDQVYsSUFBQUEsR0FBRyxDQUFDYyxnQkFBSixXQUF3Qk4sWUFBeEIsZUFBeUNKLE1BQU0sQ0FBQ1csWUFBaEQsU0FBK0RGLFdBQS9EO0FBRUEsUUFBTUcsY0FBYyxHQUFHWixNQUFNLENBQUNELFNBQVAsQ0FBaUJJLEtBQWpCLEdBQXlCRCxpQkFBekIsR0FBNkMsQ0FBcEU7QUFDQSxRQUFNVyxZQUFZLEdBQUdELGNBQWMsR0FBR1osTUFBTSxDQUFDVyxZQUFQLENBQW9CRyxNQUExRDtBQUVBbEIsSUFBQUEsR0FBRyxDQUFDSyxpQkFBSixDQUFzQjtBQUNwQkUsTUFBQUEsS0FBSyxFQUFFUyxjQURhO0FBRXBCSixNQUFBQSxHQUFHLEVBQUVLO0FBRmUsS0FBdEI7QUFJRDtBQWpDNEIsQ0FBeEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBJQ29tbWFuZCwgVGV4dFN0YXRlLCBUZXh0QXJlYVRleHRBcGkgfSBmcm9tICcuLyc7XG5pbXBvcnQge1xuICBnZXRCcmVha3NOZWVkZWRGb3JFbXB0eUxpbmVCZWZvcmUsXG4gIGdldEJyZWFrc05lZWRlZEZvckVtcHR5TGluZUFmdGVyLFxuICBzZWxlY3RXb3JkLFxufSBmcm9tICcuLi91dGlscy9tYXJrZG93blV0aWxzJztcblxuZXhwb3J0IGNvbnN0IHF1b3RlOiBJQ29tbWFuZCA9IHtcbiAgbmFtZTogJ3F1b3RlJyxcbiAga2V5Q29tbWFuZDogJ3F1b3RlJyxcbiAgc2hvcnRjdXRzOiAnY3RybGNtZCtxJyxcbiAgYnV0dG9uUHJvcHM6IHsgJ2FyaWEtbGFiZWwnOiAnSW5zZXJ0IGEgcXVvdGUnLCB0aXRsZTogJ0luc2VydCBhIHF1b3RlJyB9LFxuICBpY29uOiAoXG4gICAgPHN2ZyB3aWR0aD1cIjEyXCIgaGVpZ2h0PVwiMTJcIiB2aWV3Qm94PVwiMCAwIDUyMCA1MjBcIj5cbiAgICAgIDxwYXRoXG4gICAgICAgIGZpbGw9XCJjdXJyZW50Q29sb3JcIlxuICAgICAgICBkPVwiTTUyMCw5NS43NSBMNTIwLDIyNS43NSBDNTIwLDM2NC45MDg5MDYgNDU3LjEyNzU3OCw0MzcuMDUwNjI1IDMyNS4wNDA0NjksNDcyLjQ0MzEyNSBDMzA5LjU3NzU3OCw0NzYuNTg2ODc1IDI5NC4zOTYwMTYsNDY0Ljg4OTkyMiAyOTQuMzk2MDE2LDQ0OC44ODE2NDEgTDI5NC4zOTYwMTYsNDE0LjQ1NzAzMSBDMjk0LjM5NjAxNiw0MDQuMjQyODkxIDMwMC43MjEzMjgsMzk1LjAyNTA3OCAzMTAuMzI4MTI1LDM5MS41NTQ2ODcgQzM3Ny4zNTYzMjgsMzY3LjM0MjE4NyA0MTQuMzc1LDM0OS43MTEwOTQgNDE0LjM3NSwyNzQuNSBMMzQxLjI1LDI3NC41IEMzMTQuMzI1NzgxLDI3NC41IDI5Mi41LDI1Mi42NzQyMTkgMjkyLjUsMjI1Ljc1IEwyOTIuNSw5NS43NSBDMjkyLjUsNjguODI1NzgxMiAzMTQuMzI1NzgxLDQ3IDM0MS4yNSw0NyBMNDcxLjI1LDQ3IEM0OTguMTc0MjE5LDQ3IDUyMCw2OC44MjU3ODEyIDUyMCw5NS43NSBaIE0xNzguNzUsNDcgTDQ4Ljc1LDQ3IEMyMS44MjU3ODEzLDQ3IDAsNjguODI1NzgxMiAwLDk1Ljc1IEwwLDIyNS43NSBDMCwyNTIuNjc0MjE5IDIxLjgyNTc4MTMsMjc0LjUgNDguNzUsMjc0LjUgTDEyMS44NzUsMjc0LjUgQzEyMS44NzUsMzQ5LjcxMTA5NCA4NC44NTYzMjgxLDM2Ny4zNDIxODcgMTcuODI4MTI1LDM5MS41NTQ2ODcgQzguMjIxMzI4MTMsMzk1LjAyNTA3OCAxLjg5NjAxNTYzLDQwNC4yNDI4OTEgMS44OTYwMTU2Myw0MTQuNDU3MDMxIEwxLjg5NjAxNTYzLDQ0OC44ODE2NDEgQzEuODk2MDE1NjMsNDY0Ljg4OTkyMiAxNy4wNzc1NzgxLDQ3Ni41ODY4NzUgMzIuNTQwNDY4Nyw0NzIuNDQzMTI1IEMxNjQuNjI3NTc4LDQzNy4wNTA2MjUgMjI3LjUsMzY0LjkwODkwNiAyMjcuNSwyMjUuNzUgTDIyNy41LDk1Ljc1IEMyMjcuNSw2OC44MjU3ODEyIDIwNS42NzQyMTksNDcgMTc4Ljc1LDQ3IFpcIlxuICAgICAgLz5cbiAgICA8L3N2Zz5cbiAgKSxcbiAgZXhlY3V0ZTogKHN0YXRlOiBUZXh0U3RhdGUsIGFwaTogVGV4dEFyZWFUZXh0QXBpKSA9PiB7XG4gICAgLy8gQWRqdXN0IHRoZSBzZWxlY3Rpb24gdG8gZW5jb21wYXNzIHRoZSB3aG9sZSB3b3JkIGlmIHRoZSBjYXJldCBpcyBpbnNpZGUgb25lXG4gICAgY29uc3QgbmV3U2VsZWN0aW9uUmFuZ2UgPSBzZWxlY3RXb3JkKHsgdGV4dDogc3RhdGUudGV4dCwgc2VsZWN0aW9uOiBzdGF0ZS5zZWxlY3Rpb24gfSk7XG4gICAgY29uc3Qgc3RhdGUxID0gYXBpLnNldFNlbGVjdGlvblJhbmdlKG5ld1NlbGVjdGlvblJhbmdlKTtcbiAgICBjb25zdCBicmVha3NCZWZvcmVDb3VudCA9IGdldEJyZWFrc05lZWRlZEZvckVtcHR5TGluZUJlZm9yZShzdGF0ZTEudGV4dCwgc3RhdGUxLnNlbGVjdGlvbi5zdGFydCk7XG4gICAgY29uc3QgYnJlYWtzQmVmb3JlID0gQXJyYXkoYnJlYWtzQmVmb3JlQ291bnQgKyAxKS5qb2luKCdcXG4nKTtcblxuICAgIGNvbnN0IGJyZWFrc0FmdGVyQ291bnQgPSBnZXRCcmVha3NOZWVkZWRGb3JFbXB0eUxpbmVBZnRlcihzdGF0ZTEudGV4dCwgc3RhdGUxLnNlbGVjdGlvbi5lbmQpO1xuICAgIGNvbnN0IGJyZWFrc0FmdGVyID0gQXJyYXkoYnJlYWtzQWZ0ZXJDb3VudCArIDEpLmpvaW4oJ1xcbicpO1xuXG4gICAgLy8gUmVwbGFjZXMgdGhlIGN1cnJlbnQgc2VsZWN0aW9uIHdpdGggdGhlIHF1b3RlIG1hcmsgdXBcbiAgICBhcGkucmVwbGFjZVNlbGVjdGlvbihgJHticmVha3NCZWZvcmV9PiAke3N0YXRlMS5zZWxlY3RlZFRleHR9JHticmVha3NBZnRlcn1gKTtcblxuICAgIGNvbnN0IHNlbGVjdGlvblN0YXJ0ID0gc3RhdGUxLnNlbGVjdGlvbi5zdGFydCArIGJyZWFrc0JlZm9yZUNvdW50ICsgMjtcbiAgICBjb25zdCBzZWxlY3Rpb25FbmQgPSBzZWxlY3Rpb25TdGFydCArIHN0YXRlMS5zZWxlY3RlZFRleHQubGVuZ3RoO1xuXG4gICAgYXBpLnNldFNlbGVjdGlvblJhbmdlKHtcbiAgICAgIHN0YXJ0OiBzZWxlY3Rpb25TdGFydCxcbiAgICAgIGVuZDogc2VsZWN0aW9uRW5kLFxuICAgIH0pO1xuICB9LFxufTtcbiJdfQ==
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Markdown;

var _react = _interopRequireWildcard(require("react"));

var _rehype = _interopRequireDefault(require("rehype"));

var _rehypePrism = _interopRequireDefault(require("@mapbox/rehype-prism"));

var _Context = require("../../Context");

// @ts-ignore
function Markdown(props) {
  var prefixCls = props.prefixCls;

  var _useContext = (0, _react.useContext)(_Context.EditorContext),
      _useContext$markdown = _useContext.markdown,
      markdown = _useContext$markdown === void 0 ? '' : _useContext$markdown,
      highlightEnable = _useContext.highlightEnable,
      dispatch = _useContext.dispatch;

  var preRef = /*#__PURE__*/_react.default.createRef();

  (0, _react.useEffect)(function () {
    if (preRef.current && dispatch) {
      dispatch({
        textareaPre: preRef.current
      });
    } // eslint-disable-next-line react-hooks/exhaustive-deps

  }, []);

  function html2Escape(sHtml) {
    return sHtml.replace(/[<>&"]/g, function (c) {
      return {
        '<': '&lt;',
        '>': '&gt;',
        '&': '&amp;',
        '"': '&quot;'
      }[c];
    });
  }

  return (0, _react.useMemo)(function () {
    if (!highlightEnable || !markdown) return /*#__PURE__*/_react.default.createElement("pre", {
      children: markdown || '',
      ref: preRef,
      className: "".concat(prefixCls, "-text-pre wmde-markdown-color")
    });
    var str = (0, _rehype.default)().data('settings', {
      fragment: false
    }).use(_rehypePrism.default, {
      ignoreMissing: true
    }).processSync("<pre class=\"language-markdown ".concat(prefixCls, "-text-pre wmde-markdown-color\"><code class=\"language-markdown\">").concat(html2Escape(markdown || ''), "</code></pre>"));
    return /*#__PURE__*/_react.default.createElement('div', {
      className: 'wmde-markdown-color',
      dangerouslySetInnerHTML: {
        __html: str.contents
      }
    });
  }, [highlightEnable, markdown, preRef, prefixCls]);
}

module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1RleHRBcmVhL01hcmtkb3duLnRzeCJdLCJuYW1lcyI6WyJNYXJrZG93biIsInByb3BzIiwicHJlZml4Q2xzIiwiRWRpdG9yQ29udGV4dCIsIm1hcmtkb3duIiwiaGlnaGxpZ2h0RW5hYmxlIiwiZGlzcGF0Y2giLCJwcmVSZWYiLCJSZWFjdCIsImNyZWF0ZVJlZiIsImN1cnJlbnQiLCJ0ZXh0YXJlYVByZSIsImh0bWwyRXNjYXBlIiwic0h0bWwiLCJyZXBsYWNlIiwiYyIsInN0ciIsImRhdGEiLCJmcmFnbWVudCIsInVzZSIsInJlaHlwZVByaXNtIiwiaWdub3JlTWlzc2luZyIsInByb2Nlc3NTeW5jIiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTmFtZSIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwiX19odG1sIiwiY29udGVudHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBRUE7O0FBRUE7O0FBSEE7QUFPZSxTQUFTQSxRQUFULENBQWtCQyxLQUFsQixFQUF3QztBQUNyRCxNQUFRQyxTQUFSLEdBQXNCRCxLQUF0QixDQUFRQyxTQUFSOztBQUNBLG9CQUFxRCx1QkFBV0Msc0JBQVgsQ0FBckQ7QUFBQSx5Q0FBUUMsUUFBUjtBQUFBLE1BQVFBLFFBQVIscUNBQW1CLEVBQW5CO0FBQUEsTUFBdUJDLGVBQXZCLGVBQXVCQSxlQUF2QjtBQUFBLE1BQXdDQyxRQUF4QyxlQUF3Q0EsUUFBeEM7O0FBQ0EsTUFBTUMsTUFBTSxnQkFBR0MsZUFBTUMsU0FBTixFQUFmOztBQUNBLHdCQUFVLFlBQU07QUFDZCxRQUFJRixNQUFNLENBQUNHLE9BQVAsSUFBa0JKLFFBQXRCLEVBQWdDO0FBQzlCQSxNQUFBQSxRQUFRLENBQUM7QUFBRUssUUFBQUEsV0FBVyxFQUFFSixNQUFNLENBQUNHO0FBQXRCLE9BQUQsQ0FBUjtBQUNELEtBSGEsQ0FJZDs7QUFDRCxHQUxELEVBS0csRUFMSDs7QUFNQSxXQUFTRSxXQUFULENBQXFCQyxLQUFyQixFQUFvQztBQUNsQyxXQUFPQSxLQUFLLENBQUNDLE9BQU4sQ0FDTCxTQURLLEVBRUwsVUFBQ0MsQ0FBRDtBQUFBLGFBQWlCO0FBQUUsYUFBSyxNQUFQO0FBQWUsYUFBSyxNQUFwQjtBQUE0QixhQUFLLE9BQWpDO0FBQTBDLGFBQUs7QUFBL0MsT0FBRCxDQUFzRkEsQ0FBdEYsQ0FBaEI7QUFBQSxLQUZLLENBQVA7QUFJRDs7QUFFRCxTQUFPLG9CQUFRLFlBQU07QUFDbkIsUUFBSSxDQUFDVixlQUFELElBQW9CLENBQUNELFFBQXpCLEVBQ0Usb0JBQU87QUFBSyxNQUFBLFFBQVEsRUFBRUEsUUFBUSxJQUFJLEVBQTNCO0FBQStCLE1BQUEsR0FBRyxFQUFFRyxNQUFwQztBQUE0QyxNQUFBLFNBQVMsWUFBS0wsU0FBTDtBQUFyRCxNQUFQO0FBQ0YsUUFBTWMsR0FBRyxHQUFHLHVCQUNUQyxJQURTLENBQ0osVUFESSxFQUNRO0FBQUVDLE1BQUFBLFFBQVEsRUFBRTtBQUFaLEtBRFIsRUFFVEMsR0FGUyxDQUVMQyxvQkFGSyxFQUVRO0FBQUVDLE1BQUFBLGFBQWEsRUFBRTtBQUFqQixLQUZSLEVBR1RDLFdBSFMsMENBSXlCcEIsU0FKekIsK0VBSW9HVSxXQUFXLENBQ3JIUixRQUFRLElBQUksRUFEeUcsQ0FKL0csbUJBQVo7QUFRQSx3QkFBT0ksZUFBTWUsYUFBTixDQUFvQixLQUFwQixFQUEyQjtBQUNoQ0MsTUFBQUEsU0FBUyxFQUFFLHFCQURxQjtBQUVoQ0MsTUFBQUEsdUJBQXVCLEVBQUU7QUFBRUMsUUFBQUEsTUFBTSxFQUFFVixHQUFHLENBQUNXO0FBQWQ7QUFGTyxLQUEzQixDQUFQO0FBSUQsR0FmTSxFQWVKLENBQUN0QixlQUFELEVBQWtCRCxRQUFsQixFQUE0QkcsTUFBNUIsRUFBb0NMLFNBQXBDLENBZkksQ0FBUDtBQWdCRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyB1c2VDb250ZXh0LCB1c2VFZmZlY3QsIHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgcmVoeXBlIGZyb20gJ3JlaHlwZSc7XG4vLyBAdHMtaWdub3JlXG5pbXBvcnQgcmVoeXBlUHJpc20gZnJvbSAnQG1hcGJveC9yZWh5cGUtcHJpc20nO1xuaW1wb3J0IHsgSVByb3BzIH0gZnJvbSAnLi4vLi4vdXRpbHMnO1xuaW1wb3J0IHsgRWRpdG9yQ29udGV4dCB9IGZyb20gJy4uLy4uL0NvbnRleHQnO1xuXG5leHBvcnQgaW50ZXJmYWNlIE1hcmtkb3duUHJvcHMgZXh0ZW5kcyBJUHJvcHMsIFJlYWN0LkhUTUxBdHRyaWJ1dGVzPEhUTUxQcmVFbGVtZW50PiB7fVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBNYXJrZG93bihwcm9wczogTWFya2Rvd25Qcm9wcykge1xuICBjb25zdCB7IHByZWZpeENscyB9ID0gcHJvcHM7XG4gIGNvbnN0IHsgbWFya2Rvd24gPSAnJywgaGlnaGxpZ2h0RW5hYmxlLCBkaXNwYXRjaCB9ID0gdXNlQ29udGV4dChFZGl0b3JDb250ZXh0KTtcbiAgY29uc3QgcHJlUmVmID0gUmVhY3QuY3JlYXRlUmVmPEhUTUxQcmVFbGVtZW50PigpO1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChwcmVSZWYuY3VycmVudCAmJiBkaXNwYXRjaCkge1xuICAgICAgZGlzcGF0Y2goeyB0ZXh0YXJlYVByZTogcHJlUmVmLmN1cnJlbnQgfSk7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcbiAgfSwgW10pO1xuICBmdW5jdGlvbiBodG1sMkVzY2FwZShzSHRtbDogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHNIdG1sLnJlcGxhY2UoXG4gICAgICAvWzw+JlwiXS9nLFxuICAgICAgKGM6IHN0cmluZykgPT4gKCh7ICc8JzogJyZsdDsnLCAnPic6ICcmZ3Q7JywgJyYnOiAnJmFtcDsnLCAnXCInOiAnJnF1b3Q7JyB9IGFzIFJlY29yZDxzdHJpbmcsIHN0cmluZz4pW2NdKSxcbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIHVzZU1lbW8oKCkgPT4ge1xuICAgIGlmICghaGlnaGxpZ2h0RW5hYmxlIHx8ICFtYXJrZG93bilcbiAgICAgIHJldHVybiA8cHJlIGNoaWxkcmVuPXttYXJrZG93biB8fCAnJ30gcmVmPXtwcmVSZWZ9IGNsYXNzTmFtZT17YCR7cHJlZml4Q2xzfS10ZXh0LXByZSB3bWRlLW1hcmtkb3duLWNvbG9yYH0gLz47XG4gICAgY29uc3Qgc3RyID0gcmVoeXBlKClcbiAgICAgIC5kYXRhKCdzZXR0aW5ncycsIHsgZnJhZ21lbnQ6IGZhbHNlIH0pXG4gICAgICAudXNlKHJlaHlwZVByaXNtLCB7IGlnbm9yZU1pc3Npbmc6IHRydWUgfSlcbiAgICAgIC5wcm9jZXNzU3luYyhcbiAgICAgICAgYDxwcmUgY2xhc3M9XCJsYW5ndWFnZS1tYXJrZG93biAke3ByZWZpeENsc30tdGV4dC1wcmUgd21kZS1tYXJrZG93bi1jb2xvclwiPjxjb2RlIGNsYXNzPVwibGFuZ3VhZ2UtbWFya2Rvd25cIj4ke2h0bWwyRXNjYXBlKFxuICAgICAgICAgIG1hcmtkb3duIHx8ICcnLFxuICAgICAgICApfTwvY29kZT48L3ByZT5gLFxuICAgICAgKTtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudCgnZGl2Jywge1xuICAgICAgY2xhc3NOYW1lOiAnd21kZS1tYXJrZG93bi1jb2xvcicsXG4gICAgICBkYW5nZXJvdXNseVNldElubmVySFRNTDogeyBfX2h0bWw6IHN0ci5jb250ZW50cyBhcyBzdHJpbmcgfSxcbiAgICB9KTtcbiAgfSwgW2hpZ2hsaWdodEVuYWJsZSwgbWFya2Rvd24sIHByZVJlZiwgcHJlZml4Q2xzXSk7XG59XG4iXX0=
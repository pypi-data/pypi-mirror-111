import React, { useContext, useEffect, useMemo } from 'react';
import rehype from 'rehype'; // @ts-ignore

import rehypePrism from '@mapbox/rehype-prism';
import { EditorContext } from '../../Context';
export default function Markdown(props) {
  var prefixCls = props.prefixCls;

  var _useContext = useContext(EditorContext),
      _useContext$markdown = _useContext.markdown,
      markdown = _useContext$markdown === void 0 ? '' : _useContext$markdown,
      highlightEnable = _useContext.highlightEnable,
      dispatch = _useContext.dispatch;

  var preRef = /*#__PURE__*/React.createRef();
  useEffect(function () {
    if (preRef.current && dispatch) {
      dispatch({
        textareaPre: preRef.current
      });
    } // eslint-disable-next-line react-hooks/exhaustive-deps

  }, []);

  function html2Escape(sHtml) {
    return sHtml.replace(/[<>&"]/g, function (c) {
      return {
        '<': '&lt;',
        '>': '&gt;',
        '&': '&amp;',
        '"': '&quot;'
      }[c];
    });
  }

  return useMemo(function () {
    if (!highlightEnable || !markdown) return /*#__PURE__*/React.createElement("pre", {
      children: markdown || '',
      ref: preRef,
      className: "".concat(prefixCls, "-text-pre wmde-markdown-color")
    });
    var str = rehype().data('settings', {
      fragment: false
    }).use(rehypePrism, {
      ignoreMissing: true
    }).processSync("<pre class=\"language-markdown ".concat(prefixCls, "-text-pre wmde-markdown-color\"><code class=\"language-markdown\">").concat(html2Escape(markdown || ''), "</code></pre>"));
    return /*#__PURE__*/React.createElement('div', {
      className: 'wmde-markdown-color',
      dangerouslySetInnerHTML: {
        __html: str.contents
      }
    });
  }, [highlightEnable, markdown, preRef, prefixCls]);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1RleHRBcmVhL01hcmtkb3duLnRzeCJdLCJuYW1lcyI6WyJSZWFjdCIsInVzZUNvbnRleHQiLCJ1c2VFZmZlY3QiLCJ1c2VNZW1vIiwicmVoeXBlIiwicmVoeXBlUHJpc20iLCJFZGl0b3JDb250ZXh0IiwiTWFya2Rvd24iLCJwcm9wcyIsInByZWZpeENscyIsIm1hcmtkb3duIiwiaGlnaGxpZ2h0RW5hYmxlIiwiZGlzcGF0Y2giLCJwcmVSZWYiLCJjcmVhdGVSZWYiLCJjdXJyZW50IiwidGV4dGFyZWFQcmUiLCJodG1sMkVzY2FwZSIsInNIdG1sIiwicmVwbGFjZSIsImMiLCJzdHIiLCJkYXRhIiwiZnJhZ21lbnQiLCJ1c2UiLCJpZ25vcmVNaXNzaW5nIiwicHJvY2Vzc1N5bmMiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NOYW1lIiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJfX2h0bWwiLCJjb250ZW50cyJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsS0FBUCxJQUFnQkMsVUFBaEIsRUFBNEJDLFNBQTVCLEVBQXVDQyxPQUF2QyxRQUFzRCxPQUF0RDtBQUNBLE9BQU9DLE1BQVAsTUFBbUIsUUFBbkIsQyxDQUNBOztBQUNBLE9BQU9DLFdBQVAsTUFBd0Isc0JBQXhCO0FBRUEsU0FBU0MsYUFBVCxRQUE4QixlQUE5QjtBQUlBLGVBQWUsU0FBU0MsUUFBVCxDQUFrQkMsS0FBbEIsRUFBd0M7QUFDckQsTUFBUUMsU0FBUixHQUFzQkQsS0FBdEIsQ0FBUUMsU0FBUjs7QUFDQSxvQkFBcURSLFVBQVUsQ0FBQ0ssYUFBRCxDQUEvRDtBQUFBLHlDQUFRSSxRQUFSO0FBQUEsTUFBUUEsUUFBUixxQ0FBbUIsRUFBbkI7QUFBQSxNQUF1QkMsZUFBdkIsZUFBdUJBLGVBQXZCO0FBQUEsTUFBd0NDLFFBQXhDLGVBQXdDQSxRQUF4Qzs7QUFDQSxNQUFNQyxNQUFNLGdCQUFHYixLQUFLLENBQUNjLFNBQU4sRUFBZjtBQUNBWixFQUFBQSxTQUFTLENBQUMsWUFBTTtBQUNkLFFBQUlXLE1BQU0sQ0FBQ0UsT0FBUCxJQUFrQkgsUUFBdEIsRUFBZ0M7QUFDOUJBLE1BQUFBLFFBQVEsQ0FBQztBQUFFSSxRQUFBQSxXQUFXLEVBQUVILE1BQU0sQ0FBQ0U7QUFBdEIsT0FBRCxDQUFSO0FBQ0QsS0FIYSxDQUlkOztBQUNELEdBTFEsRUFLTixFQUxNLENBQVQ7O0FBTUEsV0FBU0UsV0FBVCxDQUFxQkMsS0FBckIsRUFBb0M7QUFDbEMsV0FBT0EsS0FBSyxDQUFDQyxPQUFOLENBQ0wsU0FESyxFQUVMLFVBQUNDLENBQUQ7QUFBQSxhQUFpQjtBQUFFLGFBQUssTUFBUDtBQUFlLGFBQUssTUFBcEI7QUFBNEIsYUFBSyxPQUFqQztBQUEwQyxhQUFLO0FBQS9DLE9BQUQsQ0FBc0ZBLENBQXRGLENBQWhCO0FBQUEsS0FGSyxDQUFQO0FBSUQ7O0FBRUQsU0FBT2pCLE9BQU8sQ0FBQyxZQUFNO0FBQ25CLFFBQUksQ0FBQ1EsZUFBRCxJQUFvQixDQUFDRCxRQUF6QixFQUNFLG9CQUFPO0FBQUssTUFBQSxRQUFRLEVBQUVBLFFBQVEsSUFBSSxFQUEzQjtBQUErQixNQUFBLEdBQUcsRUFBRUcsTUFBcEM7QUFBNEMsTUFBQSxTQUFTLFlBQUtKLFNBQUw7QUFBckQsTUFBUDtBQUNGLFFBQU1ZLEdBQUcsR0FBR2pCLE1BQU0sR0FDZmtCLElBRFMsQ0FDSixVQURJLEVBQ1E7QUFBRUMsTUFBQUEsUUFBUSxFQUFFO0FBQVosS0FEUixFQUVUQyxHQUZTLENBRUxuQixXQUZLLEVBRVE7QUFBRW9CLE1BQUFBLGFBQWEsRUFBRTtBQUFqQixLQUZSLEVBR1RDLFdBSFMsMENBSXlCakIsU0FKekIsK0VBSW9HUSxXQUFXLENBQ3JIUCxRQUFRLElBQUksRUFEeUcsQ0FKL0csbUJBQVo7QUFRQSx3QkFBT1YsS0FBSyxDQUFDMkIsYUFBTixDQUFvQixLQUFwQixFQUEyQjtBQUNoQ0MsTUFBQUEsU0FBUyxFQUFFLHFCQURxQjtBQUVoQ0MsTUFBQUEsdUJBQXVCLEVBQUU7QUFBRUMsUUFBQUEsTUFBTSxFQUFFVCxHQUFHLENBQUNVO0FBQWQ7QUFGTyxLQUEzQixDQUFQO0FBSUQsR0FmYSxFQWVYLENBQUNwQixlQUFELEVBQWtCRCxRQUFsQixFQUE0QkcsTUFBNUIsRUFBb0NKLFNBQXBDLENBZlcsQ0FBZDtBQWdCRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyB1c2VDb250ZXh0LCB1c2VFZmZlY3QsIHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgcmVoeXBlIGZyb20gJ3JlaHlwZSc7XG4vLyBAdHMtaWdub3JlXG5pbXBvcnQgcmVoeXBlUHJpc20gZnJvbSAnQG1hcGJveC9yZWh5cGUtcHJpc20nO1xuaW1wb3J0IHsgSVByb3BzIH0gZnJvbSAnLi4vLi4vdXRpbHMnO1xuaW1wb3J0IHsgRWRpdG9yQ29udGV4dCB9IGZyb20gJy4uLy4uL0NvbnRleHQnO1xuXG5leHBvcnQgaW50ZXJmYWNlIE1hcmtkb3duUHJvcHMgZXh0ZW5kcyBJUHJvcHMsIFJlYWN0LkhUTUxBdHRyaWJ1dGVzPEhUTUxQcmVFbGVtZW50PiB7fVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBNYXJrZG93bihwcm9wczogTWFya2Rvd25Qcm9wcykge1xuICBjb25zdCB7IHByZWZpeENscyB9ID0gcHJvcHM7XG4gIGNvbnN0IHsgbWFya2Rvd24gPSAnJywgaGlnaGxpZ2h0RW5hYmxlLCBkaXNwYXRjaCB9ID0gdXNlQ29udGV4dChFZGl0b3JDb250ZXh0KTtcbiAgY29uc3QgcHJlUmVmID0gUmVhY3QuY3JlYXRlUmVmPEhUTUxQcmVFbGVtZW50PigpO1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChwcmVSZWYuY3VycmVudCAmJiBkaXNwYXRjaCkge1xuICAgICAgZGlzcGF0Y2goeyB0ZXh0YXJlYVByZTogcHJlUmVmLmN1cnJlbnQgfSk7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcbiAgfSwgW10pO1xuICBmdW5jdGlvbiBodG1sMkVzY2FwZShzSHRtbDogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHNIdG1sLnJlcGxhY2UoXG4gICAgICAvWzw+JlwiXS9nLFxuICAgICAgKGM6IHN0cmluZykgPT4gKCh7ICc8JzogJyZsdDsnLCAnPic6ICcmZ3Q7JywgJyYnOiAnJmFtcDsnLCAnXCInOiAnJnF1b3Q7JyB9IGFzIFJlY29yZDxzdHJpbmcsIHN0cmluZz4pW2NdKSxcbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIHVzZU1lbW8oKCkgPT4ge1xuICAgIGlmICghaGlnaGxpZ2h0RW5hYmxlIHx8ICFtYXJrZG93bilcbiAgICAgIHJldHVybiA8cHJlIGNoaWxkcmVuPXttYXJrZG93biB8fCAnJ30gcmVmPXtwcmVSZWZ9IGNsYXNzTmFtZT17YCR7cHJlZml4Q2xzfS10ZXh0LXByZSB3bWRlLW1hcmtkb3duLWNvbG9yYH0gLz47XG4gICAgY29uc3Qgc3RyID0gcmVoeXBlKClcbiAgICAgIC5kYXRhKCdzZXR0aW5ncycsIHsgZnJhZ21lbnQ6IGZhbHNlIH0pXG4gICAgICAudXNlKHJlaHlwZVByaXNtLCB7IGlnbm9yZU1pc3Npbmc6IHRydWUgfSlcbiAgICAgIC5wcm9jZXNzU3luYyhcbiAgICAgICAgYDxwcmUgY2xhc3M9XCJsYW5ndWFnZS1tYXJrZG93biAke3ByZWZpeENsc30tdGV4dC1wcmUgd21kZS1tYXJrZG93bi1jb2xvclwiPjxjb2RlIGNsYXNzPVwibGFuZ3VhZ2UtbWFya2Rvd25cIj4ke2h0bWwyRXNjYXBlKFxuICAgICAgICAgIG1hcmtkb3duIHx8ICcnLFxuICAgICAgICApfTwvY29kZT48L3ByZT5gLFxuICAgICAgKTtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudCgnZGl2Jywge1xuICAgICAgY2xhc3NOYW1lOiAnd21kZS1tYXJrZG93bi1jb2xvcicsXG4gICAgICBkYW5nZXJvdXNseVNldElubmVySFRNTDogeyBfX2h0bWw6IHN0ci5jb250ZW50cyBhcyBzdHJpbmcgfSxcbiAgICB9KTtcbiAgfSwgW2hpZ2hsaWdodEVuYWJsZSwgbWFya2Rvd24sIHByZVJlZiwgcHJlZml4Q2xzXSk7XG59XG4iXX0=
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.italic = void 0;

var React = _interopRequireWildcard(require("react"));

var _markdownUtils = require("../utils/markdownUtils");

var italic = {
  name: 'italic',
  keyCommand: 'italic',
  shortcuts: 'ctrlcmd+i',
  buttonProps: {
    'aria-label': 'Add italic text',
    title: 'Add italic text'
  },
  icon: /*#__PURE__*/React.createElement("svg", {
    "data-name": "italic",
    width: "12",
    height: "12",
    role: "img",
    viewBox: "0 0 320 512"
  }, /*#__PURE__*/React.createElement("path", {
    fill: "currentColor",
    d: "M204.758 416h-33.849l62.092-320h40.725a16 16 0 0 0 15.704-12.937l6.242-32C297.599 41.184 290.034 32 279.968 32H120.235a16 16 0 0 0-15.704 12.937l-6.242 32C96.362 86.816 103.927 96 113.993 96h33.846l-62.09 320H46.278a16 16 0 0 0-15.704 12.935l-6.245 32C22.402 470.815 29.967 480 40.034 480h158.479a16 16 0 0 0 15.704-12.935l6.245-32c1.927-9.88-5.638-19.065-15.704-19.065z"
  })),
  execute: function execute(state, api) {
    // Adjust the selection to encompass the whole word if the caret is inside one
    var newSelectionRange = (0, _markdownUtils.selectWord)({
      text: state.text,
      selection: state.selection
    });
    var state1 = api.setSelectionRange(newSelectionRange); // Replaces the current selection with the italic mark up

    var state2 = api.replaceSelection("*".concat(state1.selectedText, "*")); // Adjust the selection to not contain the *

    api.setSelectionRange({
      start: state2.selection.end - 1 - state1.selectedText.length,
      end: state2.selection.end - 1
    });
  }
};
exports.italic = italic;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tYW5kcy9pdGFsaWMudHN4Il0sIm5hbWVzIjpbIml0YWxpYyIsIm5hbWUiLCJrZXlDb21tYW5kIiwic2hvcnRjdXRzIiwiYnV0dG9uUHJvcHMiLCJ0aXRsZSIsImljb24iLCJleGVjdXRlIiwic3RhdGUiLCJhcGkiLCJuZXdTZWxlY3Rpb25SYW5nZSIsInRleHQiLCJzZWxlY3Rpb24iLCJzdGF0ZTEiLCJzZXRTZWxlY3Rpb25SYW5nZSIsInN0YXRlMiIsInJlcGxhY2VTZWxlY3Rpb24iLCJzZWxlY3RlZFRleHQiLCJzdGFydCIsImVuZCIsImxlbmd0aCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7O0FBRUE7O0FBRU8sSUFBTUEsTUFBZ0IsR0FBRztBQUM5QkMsRUFBQUEsSUFBSSxFQUFFLFFBRHdCO0FBRTlCQyxFQUFBQSxVQUFVLEVBQUUsUUFGa0I7QUFHOUJDLEVBQUFBLFNBQVMsRUFBRSxXQUhtQjtBQUk5QkMsRUFBQUEsV0FBVyxFQUFFO0FBQUUsa0JBQWMsaUJBQWhCO0FBQW1DQyxJQUFBQSxLQUFLLEVBQUU7QUFBMUMsR0FKaUI7QUFLOUJDLEVBQUFBLElBQUksZUFDRjtBQUFLLGlCQUFVLFFBQWY7QUFBd0IsSUFBQSxLQUFLLEVBQUMsSUFBOUI7QUFBbUMsSUFBQSxNQUFNLEVBQUMsSUFBMUM7QUFBK0MsSUFBQSxJQUFJLEVBQUMsS0FBcEQ7QUFBMEQsSUFBQSxPQUFPLEVBQUM7QUFBbEUsa0JBQ0U7QUFDRSxJQUFBLElBQUksRUFBQyxjQURQO0FBRUUsSUFBQSxDQUFDLEVBQUM7QUFGSixJQURGLENBTjRCO0FBYTlCQyxFQUFBQSxPQUFPLEVBQUUsaUJBQUNDLEtBQUQsRUFBbUJDLEdBQW5CLEVBQTRDO0FBQ25EO0FBQ0EsUUFBTUMsaUJBQWlCLEdBQUcsK0JBQVc7QUFBRUMsTUFBQUEsSUFBSSxFQUFFSCxLQUFLLENBQUNHLElBQWQ7QUFBb0JDLE1BQUFBLFNBQVMsRUFBRUosS0FBSyxDQUFDSTtBQUFyQyxLQUFYLENBQTFCO0FBQ0EsUUFBTUMsTUFBTSxHQUFHSixHQUFHLENBQUNLLGlCQUFKLENBQXNCSixpQkFBdEIsQ0FBZixDQUhtRCxDQUluRDs7QUFDQSxRQUFNSyxNQUFNLEdBQUdOLEdBQUcsQ0FBQ08sZ0JBQUosWUFBeUJILE1BQU0sQ0FBQ0ksWUFBaEMsT0FBZixDQUxtRCxDQU1uRDs7QUFDQVIsSUFBQUEsR0FBRyxDQUFDSyxpQkFBSixDQUFzQjtBQUNwQkksTUFBQUEsS0FBSyxFQUFFSCxNQUFNLENBQUNILFNBQVAsQ0FBaUJPLEdBQWpCLEdBQXVCLENBQXZCLEdBQTJCTixNQUFNLENBQUNJLFlBQVAsQ0FBb0JHLE1BRGxDO0FBRXBCRCxNQUFBQSxHQUFHLEVBQUVKLE1BQU0sQ0FBQ0gsU0FBUCxDQUFpQk8sR0FBakIsR0FBdUI7QUFGUixLQUF0QjtBQUlEO0FBeEI2QixDQUF6QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IElDb21tYW5kLCBUZXh0U3RhdGUsIFRleHRBcmVhVGV4dEFwaSB9IGZyb20gJy4vJztcbmltcG9ydCB7IHNlbGVjdFdvcmQgfSBmcm9tICcuLi91dGlscy9tYXJrZG93blV0aWxzJztcblxuZXhwb3J0IGNvbnN0IGl0YWxpYzogSUNvbW1hbmQgPSB7XG4gIG5hbWU6ICdpdGFsaWMnLFxuICBrZXlDb21tYW5kOiAnaXRhbGljJyxcbiAgc2hvcnRjdXRzOiAnY3RybGNtZCtpJyxcbiAgYnV0dG9uUHJvcHM6IHsgJ2FyaWEtbGFiZWwnOiAnQWRkIGl0YWxpYyB0ZXh0JywgdGl0bGU6ICdBZGQgaXRhbGljIHRleHQnIH0sXG4gIGljb246IChcbiAgICA8c3ZnIGRhdGEtbmFtZT1cIml0YWxpY1wiIHdpZHRoPVwiMTJcIiBoZWlnaHQ9XCIxMlwiIHJvbGU9XCJpbWdcIiB2aWV3Qm94PVwiMCAwIDMyMCA1MTJcIj5cbiAgICAgIDxwYXRoXG4gICAgICAgIGZpbGw9XCJjdXJyZW50Q29sb3JcIlxuICAgICAgICBkPVwiTTIwNC43NTggNDE2aC0zMy44NDlsNjIuMDkyLTMyMGg0MC43MjVhMTYgMTYgMCAwIDAgMTUuNzA0LTEyLjkzN2w2LjI0Mi0zMkMyOTcuNTk5IDQxLjE4NCAyOTAuMDM0IDMyIDI3OS45NjggMzJIMTIwLjIzNWExNiAxNiAwIDAgMC0xNS43MDQgMTIuOTM3bC02LjI0MiAzMkM5Ni4zNjIgODYuODE2IDEwMy45MjcgOTYgMTEzLjk5MyA5NmgzMy44NDZsLTYyLjA5IDMyMEg0Ni4yNzhhMTYgMTYgMCAwIDAtMTUuNzA0IDEyLjkzNWwtNi4yNDUgMzJDMjIuNDAyIDQ3MC44MTUgMjkuOTY3IDQ4MCA0MC4wMzQgNDgwaDE1OC40NzlhMTYgMTYgMCAwIDAgMTUuNzA0LTEyLjkzNWw2LjI0NS0zMmMxLjkyNy05Ljg4LTUuNjM4LTE5LjA2NS0xNS43MDQtMTkuMDY1elwiXG4gICAgICAvPlxuICAgIDwvc3ZnPlxuICApLFxuICBleGVjdXRlOiAoc3RhdGU6IFRleHRTdGF0ZSwgYXBpOiBUZXh0QXJlYVRleHRBcGkpID0+IHtcbiAgICAvLyBBZGp1c3QgdGhlIHNlbGVjdGlvbiB0byBlbmNvbXBhc3MgdGhlIHdob2xlIHdvcmQgaWYgdGhlIGNhcmV0IGlzIGluc2lkZSBvbmVcbiAgICBjb25zdCBuZXdTZWxlY3Rpb25SYW5nZSA9IHNlbGVjdFdvcmQoeyB0ZXh0OiBzdGF0ZS50ZXh0LCBzZWxlY3Rpb246IHN0YXRlLnNlbGVjdGlvbiB9KTtcbiAgICBjb25zdCBzdGF0ZTEgPSBhcGkuc2V0U2VsZWN0aW9uUmFuZ2UobmV3U2VsZWN0aW9uUmFuZ2UpO1xuICAgIC8vIFJlcGxhY2VzIHRoZSBjdXJyZW50IHNlbGVjdGlvbiB3aXRoIHRoZSBpdGFsaWMgbWFyayB1cFxuICAgIGNvbnN0IHN0YXRlMiA9IGFwaS5yZXBsYWNlU2VsZWN0aW9uKGAqJHtzdGF0ZTEuc2VsZWN0ZWRUZXh0fSpgKTtcbiAgICAvLyBBZGp1c3QgdGhlIHNlbGVjdGlvbiB0byBub3QgY29udGFpbiB0aGUgKlxuICAgIGFwaS5zZXRTZWxlY3Rpb25SYW5nZSh7XG4gICAgICBzdGFydDogc3RhdGUyLnNlbGVjdGlvbi5lbmQgLSAxIC0gc3RhdGUxLnNlbGVjdGVkVGV4dC5sZW5ndGgsXG4gICAgICBlbmQ6IHN0YXRlMi5zZWxlY3Rpb24uZW5kIC0gMSxcbiAgICB9KTtcbiAgfSxcbn07XG4iXX0=
import { HttpClient } from "./HttpClient";
import { SystemSchema } from "utils/typeUtils";
export interface ISystemInfo {
    systemId: string;
    name?: string;
    description?: string;
    numSteps: number;
    schema?: SystemSchema;
}
export interface IStepInfo {
    name: string;
    inputs: any[];
    staticData?: any[];
    outputs: any[];
    isValid: boolean;
    title: string;
    description: string;
}
export interface IPublishStatus {
    currFile: number;
    currFileDone: number;
    currFileSize: number;
    totalFiles: number;
}
export interface IPublishResponse {
    system: string;
    user: string;
}
export declare class FeatherApi extends HttpClient {
    private static apiInstance?;
    private isLocal;
    private constructor();
    static instance({ isLocal }: {
        isLocal?: boolean | undefined;
    }): FeatherApi;
    getSysInfo: () => Promise<ISystemInfo>;
    getPublicSysInfo: (systemId: string) => Promise<ISystemInfo>;
    getStepInfo: (systemId: string, step: number) => Promise<IStepInfo>;
    runStep: (systemId: string, step: number, stepName: string, inputData: any[]) => Promise<any>;
    publish: (systemId: string, apiKey: string) => Promise<IPublishResponse>;
    pollPublish: (systemId: string) => Promise<IPublishStatus>;
}

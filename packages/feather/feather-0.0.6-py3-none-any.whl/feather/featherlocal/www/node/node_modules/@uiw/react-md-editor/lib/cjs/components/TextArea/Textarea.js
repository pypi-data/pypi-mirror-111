"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Textarea;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _Context = require("../../Context");

var _commands = require("../../commands");

var _handleKeyDown = _interopRequireDefault(require("./handleKeyDown"));

var _shortcuts = _interopRequireDefault(require("./shortcuts"));

var _excluded = ["prefixCls"];

function Textarea(props) {
  var prefixCls = props.prefixCls,
      other = (0, _objectWithoutProperties2.default)(props, _excluded);

  var _useContext = (0, _react.useContext)(_Context.EditorContext),
      markdown = _useContext.markdown,
      commands = _useContext.commands,
      fullscreen = _useContext.fullscreen,
      preview = _useContext.preview,
      highlightEnable = _useContext.highlightEnable,
      extraCommands = _useContext.extraCommands,
      tabSize = _useContext.tabSize,
      _onChange = _useContext.onChange,
      dispatch = _useContext.dispatch;

  var textRef = _react.default.useRef(null);

  var executeRef = _react.default.useRef();

  var statesRef = _react.default.useRef({
    fullscreen: fullscreen,
    preview: preview
  });

  (0, _react.useEffect)(function () {
    statesRef.current = {
      fullscreen: fullscreen,
      preview: preview,
      highlightEnable: highlightEnable
    };
  }, [fullscreen, preview, highlightEnable]);
  (0, _react.useEffect)(function () {
    if (textRef.current && dispatch) {
      var commandOrchestrator = new _commands.TextAreaCommandOrchestrator(textRef.current);
      executeRef.current = commandOrchestrator;
      dispatch({
        textarea: textRef.current,
        commandOrchestrator: commandOrchestrator
      });
    } // eslint-disable-next-line react-hooks/exhaustive-deps

  }, []);

  var onKeyDown = function onKeyDown(e) {
    (0, _handleKeyDown.default)(e, tabSize);
    (0, _shortcuts.default)(e, [].concat((0, _toConsumableArray2.default)(commands || []), (0, _toConsumableArray2.default)(extraCommands || [])), executeRef.current, dispatch, statesRef.current);
  };

  (0, _react.useEffect)(function () {
    if (textRef.current) {
      textRef.current.addEventListener('keydown', onKeyDown);
    }

    return function () {
      if (textRef.current) {
        // eslint-disable-next-line react-hooks/exhaustive-deps
        textRef.current.removeEventListener('keydown', onKeyDown);
      }
    }; // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  return /*#__PURE__*/_react.default.createElement("textarea", (0, _extends2.default)({
    autoComplete: "off",
    autoCorrect: "off",
    autoCapitalize: "off",
    spellCheck: false
  }, other, {
    ref: textRef,
    className: "".concat(prefixCls, "-text-input ").concat(other.className ? other.className : ''),
    value: markdown,
    onChange: function onChange(e) {
      dispatch && dispatch({
        markdown: e.target.value
      });
      _onChange && _onChange(e.target.value);
    }
  }));
}

module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1RleHRBcmVhL1RleHRhcmVhLnRzeCJdLCJuYW1lcyI6WyJUZXh0YXJlYSIsInByb3BzIiwicHJlZml4Q2xzIiwib3RoZXIiLCJFZGl0b3JDb250ZXh0IiwibWFya2Rvd24iLCJjb21tYW5kcyIsImZ1bGxzY3JlZW4iLCJwcmV2aWV3IiwiaGlnaGxpZ2h0RW5hYmxlIiwiZXh0cmFDb21tYW5kcyIsInRhYlNpemUiLCJvbkNoYW5nZSIsImRpc3BhdGNoIiwidGV4dFJlZiIsIlJlYWN0IiwidXNlUmVmIiwiZXhlY3V0ZVJlZiIsInN0YXRlc1JlZiIsImN1cnJlbnQiLCJjb21tYW5kT3JjaGVzdHJhdG9yIiwiVGV4dEFyZWFDb21tYW5kT3JjaGVzdHJhdG9yIiwidGV4dGFyZWEiLCJvbktleURvd24iLCJlIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJjbGFzc05hbWUiLCJ0YXJnZXQiLCJ2YWx1ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7QUFFQTs7QUFDQTs7QUFDQTs7QUFDQTs7OztBQUtlLFNBQVNBLFFBQVQsQ0FBa0JDLEtBQWxCLEVBQXdDO0FBQ3JELE1BQVFDLFNBQVIsR0FBZ0NELEtBQWhDLENBQVFDLFNBQVI7QUFBQSxNQUFzQkMsS0FBdEIsMENBQWdDRixLQUFoQzs7QUFDQSxvQkFDRSx1QkFBV0csc0JBQVgsQ0FERjtBQUFBLE1BQVFDLFFBQVIsZUFBUUEsUUFBUjtBQUFBLE1BQWtCQyxRQUFsQixlQUFrQkEsUUFBbEI7QUFBQSxNQUE0QkMsVUFBNUIsZUFBNEJBLFVBQTVCO0FBQUEsTUFBd0NDLE9BQXhDLGVBQXdDQSxPQUF4QztBQUFBLE1BQWlEQyxlQUFqRCxlQUFpREEsZUFBakQ7QUFBQSxNQUFrRUMsYUFBbEUsZUFBa0VBLGFBQWxFO0FBQUEsTUFBaUZDLE9BQWpGLGVBQWlGQSxPQUFqRjtBQUFBLE1BQTBGQyxTQUExRixlQUEwRkEs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ZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBJUHJvcHMgfSBmcm9tICcuLi8uLi91dGlscyc7XG5pbXBvcnQgeyBFZGl0b3JDb250ZXh0LCBFeGVjdXRlQ29tbWFuZFN0YXRlIH0gZnJvbSAnLi4vLi4vQ29udGV4dCc7XG5pbXBvcnQgeyBUZXh0QXJlYUNvbW1hbmRPcmNoZXN0cmF0b3IgfSBmcm9tICcuLi8uLi9jb21tYW5kcyc7XG5pbXBvcnQgaGFuZGxlS2V5RG93biBmcm9tICcuL2hhbmRsZUtleURvd24nO1xuaW1wb3J0IHNob3J0Y3V0cyBmcm9tICcuL3Nob3J0Y3V0cyc7XG5pbXBvcnQgJy4vaW5kZXgubGVzcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVGV4dEFyZWFQcm9wcyBleHRlbmRzIE9taXQ8UmVhY3QuVGV4dGFyZWFIVE1MQXR0cmlidXRlczxIVE1MVGV4dEFyZWFFbGVtZW50PiwgJ3ZhbHVlJz4sIElQcm9wcyB7fVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBUZXh0YXJlYShwcm9wczogVGV4dEFyZWFQcm9wcykge1xuICBjb25zdCB7IHByZWZpeENscywgLi4ub3RoZXIgfSA9IHByb3BzO1xuICBjb25zdCB7IG1hcmtkb3duLCBjb21tYW5kcywgZnVsbHNjcmVlbiwgcHJldmlldywgaGlnaGxpZ2h0RW5hYmxlLCBleHRyYUNvbW1hbmRzLCB0YWJTaXplLCBvbkNoYW5nZSwgZGlzcGF0Y2ggfSA9XG4gICAgdXNlQ29udGV4dChFZGl0b3JDb250ZXh0KTtcbiAgY29uc3QgdGV4dFJlZiA9IFJlYWN0LnVzZVJlZjxIVE1MVGV4dEFyZWFFbGVtZW50PihudWxsKTtcbiAgY29uc3QgZXhlY3V0ZVJlZiA9IFJlYWN0LnVzZVJlZjxUZXh0QXJlYUNvbW1hbmRPcmNoZXN0cmF0b3I+KCk7XG4gIGNvbnN0IHN0YXRlc1JlZiA9IFJlYWN0LnVzZVJlZjxFeGVjdXRlQ29tbWFuZFN0YXRlPih7IGZ1bGxzY3JlZW4sIHByZXZpZXcgfSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBzdGF0ZXNSZWYuY3VycmVudCA9IHsgZnVsbHNjcmVlbiwgcHJldmlldywgaGlnaGxpZ2h0RW5hYmxlIH07XG4gIH0sIFtmdWxsc2NyZWVuLCBwcmV2aWV3LCBoaWdobGlnaHRFbmFibGVdKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICh0ZXh0UmVmLmN1cnJlbnQgJiYgZGlzcGF0Y2gpIHtcbiAgICAgIGNvbnN0IGNvbW1hbmRPcmNoZXN0cmF0b3IgPSBuZXcgVGV4dEFyZWFDb21tYW5kT3JjaGVzdHJhdG9yKHRleHRSZWYuY3VycmVudCk7XG4gICAgICBleGVjdXRlUmVmLmN1cnJlbnQgPSBjb21tYW5kT3JjaGVzdHJhdG9yO1xuICAgICAgZGlzcGF0Y2goeyB0ZXh0YXJlYTogdGV4dFJlZi5jdXJyZW50LCBjb21tYW5kT3JjaGVzdHJhdG9yIH0pO1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gIH0sIFtdKTtcblxuICBjb25zdCBvbktleURvd24gPSAoZTogS2V5Ym9hcmRFdmVudCB8IFJlYWN0LktleWJvYXJkRXZlbnQ8SFRNTFRleHRBcmVhRWxlbWVudD4pID0+IHtcbiAgICBoYW5kbGVLZXlEb3duKGUsIHRhYlNpemUpO1xuICAgIHNob3J0Y3V0cyhlLCBbLi4uKGNvbW1hbmRzIHx8IFtdKSwgLi4uKGV4dHJhQ29tbWFuZHMgfHwgW10pXSwgZXhlY3V0ZVJlZi5jdXJyZW50LCBkaXNwYXRjaCwgc3RhdGVzUmVmLmN1cnJlbnQpO1xuICB9O1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICh0ZXh0UmVmLmN1cnJlbnQpIHtcbiAgICAgIHRleHRSZWYuY3VycmVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgb25LZXlEb3duKTtcbiAgICB9XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGlmICh0ZXh0UmVmLmN1cnJlbnQpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICAgICAgICB0ZXh0UmVmLmN1cnJlbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIG9uS2V5RG93bik7XG4gICAgICB9XG4gICAgfTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gIH0sIFtdKTtcblxuICByZXR1cm4gKFxuICAgIDx0ZXh0YXJlYVxuICAgICAgYXV0b0NvbXBsZXRlPVwib2ZmXCJcbiAgICAgIGF1dG9Db3JyZWN0PVwib2ZmXCJcbiAgICAgIGF1dG9DYXBpdGFsaXplPVwib2ZmXCJcbiAgICAgIHNwZWxsQ2hlY2s9e2ZhbHNlfVxuICAgICAgey4uLm90aGVyfVxuICAgICAgcmVmPXt0ZXh0UmVmfVxuICAgICAgY2xhc3NOYW1lPXtgJHtwcmVmaXhDbHN9LXRleHQtaW5wdXQgJHtvdGhlci5jbGFzc05hbWUgPyBvdGhlci5jbGFzc05hbWUgOiAnJ31gfVxuICAgICAgdmFsdWU9e21hcmtkb3dufVxuICAgICAgb25DaGFuZ2U9eyhlKSA9PiB7XG4gICAgICAgIGRpc3BhdGNoICYmIGRpc3BhdGNoKHsgbWFya2Rvd246IGUudGFyZ2V0LnZhbHVlIH0pO1xuICAgICAgICBvbkNoYW5nZSAmJiBvbkNoYW5nZShlLnRhcmdldC52YWx1ZSk7XG4gICAgICB9fVxuICAgIC8+XG4gICk7XG59XG4iXX0=
import _objectSpread from "@babel/runtime/helpers/objectSpread2";

function getCommands() {
  var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var resulte = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  data.forEach(function (item) {
    if (item.children && Array.isArray(item.children)) {
      resulte = _objectSpread(_objectSpread({}, resulte), getCommands(item.children || []));
    } else if (item.keyCommand && item.shortcuts && item.execute) {
      resulte[item.shortcuts.toLocaleLowerCase()] = item;
    }
  });
  return resulte;
}

export default function shortcutsHandle(e) {
  var commands = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var commandOrchestrator = arguments.length > 2 ? arguments[2] : undefined;
  var dispatch = arguments.length > 3 ? arguments[3] : undefined;
  var state = arguments.length > 4 ? arguments[4] : undefined;
  var data = getCommands(commands || []);
  var shortcuts = [];

  if (e.altKey) {
    shortcuts.push('alt');
  }

  if (e.shiftKey) {
    shortcuts.push('shift');
  }

  if (e.metaKey) {
    shortcuts.push('cmd');
  }

  if (e.ctrlKey) {
    shortcuts.push('ctrl');
  }

  if (shortcuts.length > 0 && !/(control|alt|meta|shift)/.test(e.key.toLocaleLowerCase())) {
    shortcuts.push(e.key.toLocaleLowerCase());
  }

  if (/escape/.test(e.key.toLocaleLowerCase())) {
    shortcuts.push('escape');
  }

  if (shortcuts.length < 1) {
    return;
  }

  var equal = !!data[shortcuts.join('+')];
  var command = equal ? data[shortcuts.join('+')] : undefined;
  Object.keys(data).forEach(function (item) {
    var isequal = item.split('+').every(function (v) {
      if (/ctrlcmd/.test(v)) {
        return shortcuts.includes('ctrl') || shortcuts.includes('cmd');
      }

      return shortcuts.includes(v);
    });

    if (isequal) {
      command = data[item];
    }
  });

  if (command && commandOrchestrator) {
    e.stopPropagation();
    e.preventDefault();
    commandOrchestrator.executeCommand(command, dispatch, state);
    return;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1RleHRBcmVhL3Nob3J0Y3V0cy50cyJdLCJuYW1lcyI6WyJnZXRDb21tYW5kcyIsImRhdGEiLCJyZXN1bHRlIiwiZm9yRWFjaCIsIml0ZW0iLCJjaGlsZHJlbiIsIkFycmF5IiwiaXNBcnJheSIsImtleUNvbW1hbmQiLCJzaG9ydGN1dHMiLCJleGVjdXRlIiwidG9Mb2NhbGVMb3dlckNhc2UiLCJzaG9ydGN1dHNIYW5kbGUiLCJlIiwiY29tbWFuZHMiLCJjb21tYW5kT3JjaGVzdHJhdG9yIiwiZGlzcGF0Y2giLCJzdGF0ZSIsImFsdEtleSIsInB1c2giLCJzaGlmdEtleSIsIm1ldGFLZXkiLCJjdHJsS2V5IiwibGVuZ3RoIiwidGVzdCIsImtleSIsImVxdWFsIiwiam9pbiIsImNvbW1hbmQiLCJ1bmRlZmluZWQiLCJPYmplY3QiLCJrZXlzIiwiaXNlcXVhbCIsInNwbGl0IiwiZXZlcnkiLCJ2IiwiaW5jbHVkZXMiLCJzdG9wUHJvcGFnYXRpb24iLCJwcmV2ZW50RGVmYXVsdCIsImV4ZWN1dGVDb21tYW5kIl0sIm1hcHBpbmdzIjoiOztBQUdBLFNBQVNBLFdBQVQsR0FBOEc7QUFBQSxNQUF6RkMsSUFBeUYsdUVBQXRFLEVBQXNFO0FBQUEsTUFBbEVDLE9BQWtFLHVFQUE5QixFQUE4QjtBQUM1R0QsRUFBQUEsSUFBSSxDQUFDRSxPQUFMLENBQWEsVUFBQ0MsSUFBRCxFQUFVO0FBQ3JCLFFBQUlBLElBQUksQ0FBQ0MsUUFBTCxJQUFpQkMsS0FBSyxDQUFDQyxPQUFOLENBQWNILElBQUksQ0FBQ0MsUUFBbkIsQ0FBckIsRUFBbUQ7QUFDakRILE1BQUFBLE9BQU8sbUNBQVFBLE9BQVIsR0FBb0JGLFdBQVcsQ0FBQ0ksSUFBSSxDQUFDQyxRQUFMLElBQWlCLEVBQWxCLENBQS9CLENBQVA7QUFDRCxLQUZELE1BRU8sSUFBSUQsSUFBSSxDQUFDSSxVQUFMLElBQW1CSixJQUFJLENBQUNLLFNBQXhCLElBQXFDTCxJQUFJ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Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSUNvbW1hbmQsIFRleHRBcmVhQ29tbWFuZE9yY2hlc3RyYXRvciB9IGZyb20gJy4uLy4uL2NvbW1hbmRzJztcbmltcG9ydCB7IENvbnRleHRTdG9yZSwgRXhlY3V0ZUNvbW1hbmRTdGF0ZSB9IGZyb20gJy4uLy4uL0NvbnRleHQnO1xuXG5mdW5jdGlvbiBnZXRDb21tYW5kcyhkYXRhOiBJQ29tbWFuZFtdID0gW10sIHJlc3VsdGU6IFJlY29yZDxzdHJpbmcsIElDb21tYW5kPiA9IHt9KTogUmVjb3JkPHN0cmluZywgSUNvbW1hbmQ+IHtcbiAgZGF0YS5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgaWYgKGl0ZW0uY2hpbGRyZW4gJiYgQXJyYXkuaXNBcnJheShpdGVtLmNoaWxkcmVuKSkge1xuICAgICAgcmVzdWx0ZSA9IHsgLi4ucmVzdWx0ZSwgLi4uZ2V0Q29tbWFuZHMoaXRlbS5jaGlsZHJlbiB8fCBbXSkgfTtcbiAgICB9IGVsc2UgaWYgKGl0ZW0ua2V5Q29tbWFuZCAmJiBpdGVtLnNob3J0Y3V0cyAmJiBpdGVtLmV4ZWN1dGUpIHtcbiAgICAgIHJlc3VsdGVbaXRlbS5zaG9ydGN1dHMudG9Mb2NhbGVMb3dlckNhc2UoKV0gPSBpdGVtO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXN1bHRlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzaG9ydGN1dHNIYW5kbGUoXG4gIGU6IEtleWJvYXJkRXZlbnQgfCBSZWFjdC5LZXlib2FyZEV2ZW50PEhUTUxUZXh0QXJlYUVsZW1lbnQ+LFxuICBjb21tYW5kczogSUNvbW1hbmRbXSA9IFtdLFxuICBjb21tYW5kT3JjaGVzdHJhdG9yPzogVGV4dEFyZWFDb21tYW5kT3JjaGVzdHJhdG9yLFxuICBkaXNwYXRjaD86IFJlYWN0LkRpc3BhdGNoPENvbnRleHRTdG9yZT4sXG4gIHN0YXRlPzogRXhlY3V0ZUNvbW1hbmRTdGF0ZSxcbikge1xuICBjb25zdCBkYXRhID0gZ2V0Q29tbWFuZHMoY29tbWFuZHMgfHwgW10pO1xuICBjb25zdCBzaG9ydGN1dHM6IChzdHJpbmcgfCBudW1iZXIpW10gPSBbXTtcbiAgaWYgKGUuYWx0S2V5KSB7XG4gICAgc2hvcnRjdXRzLnB1c2goJ2FsdCcpO1xuICB9XG4gIGlmIChlLnNoaWZ0S2V5KSB7XG4gICAgc2hvcnRjdXRzLnB1c2goJ3NoaWZ0Jyk7XG4gIH1cbiAgaWYgKGUubWV0YUtleSkge1xuICAgIHNob3J0Y3V0cy5wdXNoKCdjbWQnKTtcbiAgfVxuICBpZiAoZS5jdHJsS2V5KSB7XG4gICAgc2hvcnRjdXRzLnB1c2goJ2N0cmwnKTtcbiAgfVxuICBpZiAoc2hvcnRjdXRzLmxlbmd0aCA+IDAgJiYgIS8oY29udHJvbHxhbHR8bWV0YXxzaGlmdCkvLnRlc3QoZS5rZXkudG9Mb2NhbGVMb3dlckNhc2UoKSkpIHtcbiAgICBzaG9ydGN1dHMucHVzaChlLmtleS50b0xvY2FsZUxvd2VyQ2FzZSgpKTtcbiAgfVxuICBpZiAoL2VzY2FwZS8udGVzdChlLmtleS50b0xvY2FsZUxvd2VyQ2FzZSgpKSkge1xuICAgIHNob3J0Y3V0cy5wdXNoKCdlc2NhcGUnKTtcbiAgfVxuICBpZiAoc2hvcnRjdXRzLmxlbmd0aCA8IDEpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBsZXQgZXF1YWwgPSAhIWRhdGFbc2hvcnRjdXRzLmpvaW4oJysnKV07XG4gIGxldCBjb21tYW5kID0gZXF1YWwgPyBkYXRhW3Nob3J0Y3V0cy5qb2luKCcrJyldIDogdW5kZWZpbmVkO1xuXG4gIE9iamVjdC5rZXlzKGRhdGEpLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICBjb25zdCBpc2VxdWFsID0gaXRlbS5zcGxpdCgnKycpLmV2ZXJ5KCh2KSA9PiB7XG4gICAgICBpZiAoL2N0cmxjbWQvLnRlc3QodikpIHtcbiAgICAgICAgcmV0dXJuIHNob3J0Y3V0cy5pbmNsdWRlcygnY3RybCcpIHx8IHNob3J0Y3V0cy5pbmNsdWRlcygnY21kJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc2hvcnRjdXRzLmluY2x1ZGVzKHYpO1xuICAgIH0pO1xuICAgIGlmIChpc2VxdWFsKSB7XG4gICAgICBjb21tYW5kID0gZGF0YVtpdGVtXTtcbiAgICB9XG4gIH0pO1xuICBpZiAoY29tbWFuZCAmJiBjb21tYW5kT3JjaGVzdHJhdG9yKSB7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgY29tbWFuZE9yY2hlc3RyYXRvci5leGVjdXRlQ29tbWFuZChjb21tYW5kLCBkaXNwYXRjaCwgc3RhdGUpO1xuICAgIHJldHVybjtcbiAgfVxufVxuIl19
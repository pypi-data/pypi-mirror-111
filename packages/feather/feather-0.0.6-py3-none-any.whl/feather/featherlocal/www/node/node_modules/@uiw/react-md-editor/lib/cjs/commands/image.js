"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.image = void 0;

var React = _interopRequireWildcard(require("react"));

var _markdownUtils = require("../utils/markdownUtils");

var image = {
  name: 'image',
  keyCommand: 'image',
  shortcuts: 'ctrlcmd+i',
  buttonProps: {
    'aria-label': 'Add image',
    title: 'Add image'
  },
  icon: /*#__PURE__*/React.createElement("svg", {
    width: "12",
    height: "12",
    viewBox: "0 0 20 20"
  }, /*#__PURE__*/React.createElement("path", {
    fill: "currentColor",
    d: "M15 9c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm4-7H1c-.55 0-1 .45-1 1v14c0 .55.45 1 1 1h18c.55 0 1-.45 1-1V3c0-.55-.45-1-1-1zm-1 13l-6-5-2 2-4-5-4 8V4h16v11z"
  })),
  execute: function execute(state, api) {
    // Select everything
    var newSelectionRange = (0, _markdownUtils.selectWord)({
      text: state.text,
      selection: state.selection
    });
    var state1 = api.setSelectionRange(newSelectionRange); // Replaces the current selection with the image

    var imageTemplate = state1.selectedText || 'https://example.com/your-image.png';
    api.replaceSelection("![](".concat(imageTemplate, ")")); // Adjust the selection to not contain the **

    api.setSelectionRange({
      start: 4 + state1.selection.start,
      end: 4 + state1.selection.start + imageTemplate.length
    });
  }
};
exports.image = image;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tYW5kcy9pbWFnZS50c3giXSwibmFtZXMiOlsiaW1hZ2UiLCJuYW1lIiwia2V5Q29tbWFuZCIsInNob3J0Y3V0cyIsImJ1dHRvblByb3BzIiwidGl0bGUiLCJpY29uIiwiZXhlY3V0ZSIsInN0YXRlIiwiYXBpIiwibmV3U2VsZWN0aW9uUmFuZ2UiLCJ0ZXh0Iiwic2VsZWN0aW9uIiwic3RhdGUxIiwic2V0U2VsZWN0aW9uUmFuZ2UiLCJpbWFnZVRlbXBsYXRlIiwic2VsZWN0ZWRUZXh0IiwicmVwbGFjZVNlbGVjdGlvbiIsInN0YXJ0IiwiZW5kIiwibGVuZ3RoIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7QUFFQTs7QUFFTyxJQUFNQSxLQUFlLEdBQUc7QUFDN0JDLEVBQUFBLElBQUksRUFBRSxPQUR1QjtBQUU3QkMsRUFBQUEsVUFBVSxFQUFFLE9BRmlCO0FBRzdCQyxFQUFBQSxTQUFTLEVBQUUsV0FIa0I7QUFJN0JDLEVBQUFBLFdBQVcsRUFBRTtBQUFFLGtCQUFjLFdBQWhCO0FBQTZCQyxJQUFBQSxLQUFLLEVBQUU7QUFBcEMsR0FKZ0I7QUFLN0JDLEVBQUFBLElBQUksZUFDRjtBQUFLLElBQUEsS0FBSyxFQUFDLElBQVg7QUFBZ0IsSUFBQSxNQUFNLEVBQUMsSUFBdkI7QUFBNEIsSUFBQSxPQUFPLEVBQUM7QUFBcEMsa0JBQ0U7QUFDRSxJQUFBLElBQUksRUFBQyxjQURQO0FBRUUsSUFBQSxDQUFDLEVBQUM7QUFGSixJQURGLENBTjJCO0FBYTdCQyxFQUFBQSxPQUFPLEVBQUUsaUJBQUNDLEtBQUQsRUFBbUJDLEdBQW5CLEVBQTRDO0FBQ25EO0FBQ0EsUUFBTUMsaUJBQWlCLEdBQUcsK0JBQVc7QUFBRUMsTUFBQUEsSUFBSSxFQUFFSCxLQUFLLENBQUNHLElBQWQ7QUFBb0JDLE1BQUFBLFNBQVMsRUFBRUosS0FBSyxDQUFDSTtBQUFyQyxLQUFYLENBQTFCO0FBQ0EsUUFBTUMsTUFBTSxHQUFHSixHQUFHLENBQUNLLGlCQUFKLENBQXNCSixpQkFBdEIsQ0FBZixDQUhtRCxDQUluRDs7QUFDQSxRQUFNSyxhQUFhLEdBQUdGLE1BQU0sQ0FBQ0csWUFBUCxJQUF1QixvQ0FBN0M7QUFDQVAsSUFBQUEsR0FBRyxDQUFDUSxnQkFBSixlQUE0QkYsYUFBNUIsUUFObUQsQ0FPbkQ7O0FBQ0FOLElBQUFBLEdBQUcsQ0FBQ0ssaUJBQUosQ0FBc0I7QUFDcEJJLE1BQUFBLEtBQUssRUFBRSxJQUFJTCxNQUFNLENBQUNELFNBQVAsQ0FBaUJNLEtBRFI7QUFFcEJDLE1BQUFBLEdBQUcsRUFBRSxJQUFJTixNQUFNLENBQUNELFNBQVAsQ0FBaUJNLEtBQXJCLEdBQTZCSCxhQUFhLENBQUNLO0FBRjVCLEtBQXRCO0FBSUQ7QUF6QjRCLENBQXhCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgSUNvbW1hbmQsIFRleHRTdGF0ZSwgVGV4dEFyZWFUZXh0QXBpIH0gZnJvbSAnLi8nO1xuaW1wb3J0IHsgc2VsZWN0V29yZCB9IGZyb20gJy4uL3V0aWxzL21hcmtkb3duVXRpbHMnO1xuXG5leHBvcnQgY29uc3QgaW1hZ2U6IElDb21tYW5kID0ge1xuICBuYW1lOiAnaW1hZ2UnLFxuICBrZXlDb21tYW5kOiAnaW1hZ2UnLFxuICBzaG9ydGN1dHM6ICdjdHJsY21kK2knLFxuICBidXR0b25Qcm9wczogeyAnYXJpYS1sYWJlbCc6ICdBZGQgaW1hZ2UnLCB0aXRsZTogJ0FkZCBpbWFnZScgfSxcbiAgaWNvbjogKFxuICAgIDxzdmcgd2lkdGg9XCIxMlwiIGhlaWdodD1cIjEyXCIgdmlld0JveD1cIjAgMCAyMCAyMFwiPlxuICAgICAgPHBhdGhcbiAgICAgICAgZmlsbD1cImN1cnJlbnRDb2xvclwiXG4gICAgICAgIGQ9XCJNMTUgOWMxLjEgMCAyLS45IDItMnMtLjktMi0yLTItMiAuOS0yIDIgLjkgMiAyIDJ6bTQtN0gxYy0uNTUgMC0xIC40NS0xIDF2MTRjMCAuNTUuNDUgMSAxIDFoMThjLjU1IDAgMS0uNDUgMS0xVjNjMC0uNTUtLjQ1LTEtMS0xem0tMSAxM2wtNi01LTIgMi00LTUtNCA4VjRoMTZ2MTF6XCJcbiAgICAgIC8+XG4gICAgPC9zdmc+XG4gICksXG4gIGV4ZWN1dGU6IChzdGF0ZTogVGV4dFN0YXRlLCBhcGk6IFRleHRBcmVhVGV4dEFwaSkgPT4ge1xuICAgIC8vIFNlbGVjdCBldmVyeXRoaW5nXG4gICAgY29uc3QgbmV3U2VsZWN0aW9uUmFuZ2UgPSBzZWxlY3RXb3JkKHsgdGV4dDogc3RhdGUudGV4dCwgc2VsZWN0aW9uOiBzdGF0ZS5zZWxlY3Rpb24gfSk7XG4gICAgY29uc3Qgc3RhdGUxID0gYXBpLnNldFNlbGVjdGlvblJhbmdlKG5ld1NlbGVjdGlvblJhbmdlKTtcbiAgICAvLyBSZXBsYWNlcyB0aGUgY3VycmVudCBzZWxlY3Rpb24gd2l0aCB0aGUgaW1hZ2VcbiAgICBjb25zdCBpbWFnZVRlbXBsYXRlID0gc3RhdGUxLnNlbGVjdGVkVGV4dCB8fCAnaHR0cHM6Ly9leGFtcGxlLmNvbS95b3VyLWltYWdlLnBuZyc7XG4gICAgYXBpLnJlcGxhY2VTZWxlY3Rpb24oYCFbXSgke2ltYWdlVGVtcGxhdGV9KWApO1xuICAgIC8vIEFkanVzdCB0aGUgc2VsZWN0aW9uIHRvIG5vdCBjb250YWluIHRoZSAqKlxuICAgIGFwaS5zZXRTZWxlY3Rpb25SYW5nZSh7XG4gICAgICBzdGFydDogNCArIHN0YXRlMS5zZWxlY3Rpb24uc3RhcnQsXG4gICAgICBlbmQ6IDQgKyBzdGF0ZTEuc2VsZWN0aW9uLnN0YXJ0ICsgaW1hZ2VUZW1wbGF0ZS5sZW5ndGgsXG4gICAgfSk7XG4gIH0sXG59O1xuIl19
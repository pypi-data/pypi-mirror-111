"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.selectWord = selectWord;
exports.getBreaksNeededForEmptyLineBefore = getBreaksNeededForEmptyLineBefore;
exports.getBreaksNeededForEmptyLineAfter = getBreaksNeededForEmptyLineAfter;

var _getSurroundingWord = _interopRequireDefault(require("./getSurroundingWord"));

function selectWord(_ref) {
  var text = _ref.text,
      selection = _ref.selection;

  if (text && text.length && selection.start === selection.end) {
    // the user is pointing to a word
    return (0, _getSurroundingWord.default)(text, selection.start);
  }

  return selection;
}
/**
 *  Gets the number of line-breaks that would have to be inserted before the given 'startPosition'
 *  to make sure there's an empty line between 'startPosition' and the previous text
 */


function getBreaksNeededForEmptyLineBefore() {
  var text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  var startPosition = arguments.length > 1 ? arguments[1] : undefined;
  if (startPosition === 0) return 0; // rules:
  // - If we're in the first line, no breaks are needed
  // - Otherwise there must be 2 breaks before the previous character. Depending on how many breaks exist already, we
  //      may need to insert 0, 1 or 2 breaks

  var neededBreaks = 2;
  var isInFirstLine = true;

  for (var i = startPosition - 1; i >= 0 && neededBreaks >= 0; i--) {
    switch (text.charCodeAt(i)) {
      case 32:
        // blank space
        continue;

      case 10:
        // line break
        neededBreaks--;
        isInFirstLine = false;
        break;

      default:
        return neededBreaks;
    }
  }

  return isInFirstLine ? 0 : neededBreaks;
}
/**
 *  Gets the number of line-breaks that would have to be inserted after the given 'startPosition'
 *  to make sure there's an empty line between 'startPosition' and the next text
 */


function getBreaksNeededForEmptyLineAfter() {
  var text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  var startPosition = arguments.length > 1 ? arguments[1] : undefined;
  if (startPosition === text.length - 1) return 0; // rules:
  // - If we're in the first line, no breaks are needed
  // - Otherwise there must be 2 breaks before the previous character. Depending on how many breaks exist already, we
  //      may need to insert 0, 1 or 2 breaks

  var neededBreaks = 2;
  var isInLastLine = true;

  for (var i = startPosition; i < text.length && neededBreaks >= 0; i++) {
    switch (text.charCodeAt(i)) {
      case 32:
        continue;

      case 10:
        {
          neededBreaks--;
          isInLastLine = false;
          break;
        }

      default:
        return neededBreaks;
    }
  }

  return isInLastLine ? 0 : neededBreaks;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy91dGlscy9tYXJrZG93blV0aWxzLnRzIl0sIm5hbWVzIjpbInNlbGVjdFdvcmQiLCJ0ZXh0Iiwic2VsZWN0aW9uIiwibGVuZ3RoIiwic3RhcnQiLCJlbmQiLCJnZXRCcmVha3NOZWVkZWRGb3JFbXB0eUxpbmVCZWZvcmUiLCJzdGFydFBvc2l0aW9uIiwibmVlZGVkQnJlYWtzIiwiaXNJbkZpcnN0TGluZSIsImkiLCJjaGFyQ29kZUF0IiwiZ2V0QnJlYWtzTmVlZGVkRm9yRW1wdHlMaW5lQWZ0ZXIiLCJpc0luTGFzdExpbmUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQ0E7O0FBT08sU0FBU0EsVUFBVCxPQUFpRTtBQUFBLE1BQTNDQyxJQUEyQyxRQUEzQ0EsSUFBMkM7QUFBQSxNQUFyQ0MsU0FBcUMsUUFBckNBLFNBQXFDOztBQUN0RSxNQUFJRCxJQUFJLElBQUlBLElBQUksQ0FBQ0UsTUFBYixJQUF1QkQsU0FBUyxDQUFDRSxLQUFWLEtBQW9CRixTQUFTLENBQUNHLEdBQXpELEVBQThEO0FBQzVEO0FBQ0EsV0FBTyxpQ0FBbUJKLElBQW5CLEVBQXlCQyxTQUFTLENBQUNFLEtBQW5DLENBQVA7QUFDRDs7QUFDRCxTQUFPRixTQUFQO0FBQ0Q7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7O0FBQ08sU0FBU0ksaUNBQVQsR0FBcUY7QUFBQSxNQUExQ0wsSUFBMEMsdUVBQW5DLEVBQW1DO0FBQUEsTUFBL0JNLGFBQStCO0FBQzFGLE1BQUlBLGFBQWEsS0FBSyxDQUF0QixFQUF5QixPQUFPLENBQVAsQ0FEaUUsQ0FHMUY7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsTUFBSUMsWUFBWSxHQUFHLENBQW5CO0FBQ0EsTUFBSUMsYUFBYSxHQUFHLElBQXBCOztBQUNBLE9BQUssSUFBSUMsQ0FBQyxHQUFHSCxhQUFhLEdBQUcsQ0FBN0IsRUFBZ0NHLENBQUMsSUFBSSxDQUFMLElBQVVGLFlBQVksSUFBSSxDQUExRCxFQUE2REUsQ0FBQyxFQUE5RCxFQUFrRTtBQUNoRSxZQUFRVCxJQUFJLENBQUNVLFVBQUwsQ0FBZ0JELENBQWhCLENBQVI7QUFDRSxXQUFLLEVBQUw7QUFBUztBQUNQOztBQUNGLFdBQUssRUFBTDtBQUFTO0FBQ1BGLFFBQUFBLFlBQVk7QUFDWkMsUUFBQUEsYUFBYSxHQUFHLEtBQWhCO0FBQ0E7O0FBQ0Y7QUFDRSxlQUFPRCxZQUFQO0FBUko7QUFVRDs7QUFDRCxTQUFPQyxhQUFhLEdBQUcsQ0FBSCxHQUFPRCxZQUEzQjtBQUNEO0FBRUQ7QUFDQTtBQUNBO0FBQ0E7OztBQUNPLFNBQVNJLGdDQUFULEdBQW9GO0FBQUEsTUFBMUNYLElBQTBDLHVFQUFuQyxFQUFtQztBQUFBLE1BQS9CTSxhQUErQjtBQUN6RixNQUFJQSxhQUFhLEtBQUtOLElBQUksQ0FBQ0UsTUFBTCxHQUFjLENBQXBDLEVBQXVDLE9BQU8sQ0FBUCxDQURrRCxDQUd6RjtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxNQUFJSyxZQUFZLEdBQUcsQ0FBbkI7QUFDQSxNQUFJSyxZQUFZLEdBQUcsSUFBbkI7O0FBQ0EsT0FBSyxJQUFJSCxDQUFDLEdBQUdILGFBQWIsRUFBNEJHLENBQUMsR0FBR1QsSUFBSSxDQUFDRSxNQUFULElBQW1CSyxZQUFZLElBQUksQ0FBL0QsRUFBa0VFLENBQUMsRUFBbkUsRUFBdUU7QUFDckUsWUFBUVQsSUFBSSxDQUFDVSxVQUFMLENBQWdCRCxDQUFoQixDQUFSO0FBQ0UsV0FBSyxFQUFMO0FBQ0U7O0FBQ0YsV0FBSyxFQUFMO0FBQVM7QUFDUEYsVUFBQUEsWUFBWTtBQUNaSyxVQUFBQSxZQUFZLEdBQUcsS0FBZjtBQUNBO0FBQ0Q7O0FBQ0Q7QUFDRSxlQUFPTCxZQUFQO0FBVEo7QUFXRDs7QUFDRCxTQUFPSyxZQUFZLEdBQUcsQ0FBSCxHQUFPTCxZQUExQjtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGV4dFJhbmdlIH0gZnJvbSAnLi4vY29tbWFuZHMnO1xuaW1wb3J0IGdldFN1cnJvdW5kaW5nV29yZCBmcm9tICcuL2dldFN1cnJvdW5kaW5nV29yZCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVGV4dFNlY3Rpb24ge1xuICB0ZXh0OiBzdHJpbmc7XG4gIHNlbGVjdGlvbjogVGV4dFJhbmdlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2VsZWN0V29yZCh7IHRleHQsIHNlbGVjdGlvbiB9OiBUZXh0U2VjdGlvbik6IFRleHRSYW5nZSB7XG4gIGlmICh0ZXh0ICYmIHRleHQubGVuZ3RoICYmIHNlbGVjdGlvbi5zdGFydCA9PT0gc2VsZWN0aW9uLmVuZCkge1xuICAgIC8vIHRoZSB1c2VyIGlzIHBvaW50aW5nIHRvIGEgd29yZFxuICAgIHJldHVybiBnZXRTdXJyb3VuZGluZ1dvcmQodGV4dCwgc2VsZWN0aW9uLnN0YXJ0KTtcbiAgfVxuICByZXR1cm4gc2VsZWN0aW9uO1xufVxuXG4vKipcbiAqICBHZXRzIHRoZSBudW1iZXIgb2YgbGluZS1icmVha3MgdGhhdCB3b3VsZCBoYXZlIHRvIGJlIGluc2VydGVkIGJlZm9yZSB0aGUgZ2l2ZW4gJ3N0YXJ0UG9zaXRpb24nXG4gKiAgdG8gbWFrZSBzdXJlIHRoZXJlJ3MgYW4gZW1wdHkgbGluZSBiZXR3ZWVuICdzdGFydFBvc2l0aW9uJyBhbmQgdGhlIHByZXZpb3VzIHRleHRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEJyZWFrc05lZWRlZEZvckVtcHR5TGluZUJlZm9yZSh0ZXh0ID0gJycsIHN0YXJ0UG9zaXRpb246IG51bWJlcik6IG51bWJlciB7XG4gIGlmIChzdGFydFBvc2l0aW9uID09PSAwKSByZXR1cm4gMDtcblxuICAvLyBydWxlczpcbiAgLy8gLSBJZiB3ZSdyZSBpbiB0aGUgZmlyc3QgbGluZSwgbm8gYnJlYWtzIGFyZSBuZWVkZWRcbiAgLy8gLSBPdGhlcndpc2UgdGhlcmUgbXVzdCBiZSAyIGJyZWFrcyBiZWZvcmUgdGhlIHByZXZpb3VzIGNoYXJhY3Rlci4gRGVwZW5kaW5nIG9uIGhvdyBtYW55IGJyZWFrcyBleGlzdCBhbHJlYWR5LCB3ZVxuICAvLyAgICAgIG1heSBuZWVkIHRvIGluc2VydCAwLCAxIG9yIDIgYnJlYWtzXG5cbiAgbGV0IG5lZWRlZEJyZWFrcyA9IDI7XG4gIGxldCBpc0luRmlyc3RMaW5lID0gdHJ1ZTtcbiAgZm9yIChsZXQgaSA9IHN0YXJ0UG9zaXRpb24gLSAxOyBpID49IDAgJiYgbmVlZGVkQnJlYWtzID49IDA7IGktLSkge1xuICAgIHN3aXRjaCAodGV4dC5jaGFyQ29kZUF0KGkpKSB7XG4gICAgICBjYXNlIDMyOiAvLyBibGFuayBzcGFjZVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIGNhc2UgMTA6IC8vIGxpbmUgYnJlYWtcbiAgICAgICAgbmVlZGVkQnJlYWtzLS07XG4gICAgICAgIGlzSW5GaXJzdExpbmUgPSBmYWxzZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbmVlZGVkQnJlYWtzO1xuICAgIH1cbiAgfVxuICByZXR1cm4gaXNJbkZpcnN0TGluZSA/IDAgOiBuZWVkZWRCcmVha3M7XG59XG5cbi8qKlxuICogIEdldHMgdGhlIG51bWJlciBvZiBsaW5lLWJyZWFrcyB0aGF0IHdvdWxkIGhhdmUgdG8gYmUgaW5zZXJ0ZWQgYWZ0ZXIgdGhlIGdpdmVuICdzdGFydFBvc2l0aW9uJ1xuICogIHRvIG1ha2Ugc3VyZSB0aGVyZSdzIGFuIGVtcHR5IGxpbmUgYmV0d2VlbiAnc3RhcnRQb3NpdGlvbicgYW5kIHRoZSBuZXh0IHRleHRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEJyZWFrc05lZWRlZEZvckVtcHR5TGluZUFmdGVyKHRleHQgPSAnJywgc3RhcnRQb3NpdGlvbjogbnVtYmVyKTogbnVtYmVyIHtcbiAgaWYgKHN0YXJ0UG9zaXRpb24gPT09IHRleHQubGVuZ3RoIC0gMSkgcmV0dXJuIDA7XG5cbiAgLy8gcnVsZXM6XG4gIC8vIC0gSWYgd2UncmUgaW4gdGhlIGZpcnN0IGxpbmUsIG5vIGJyZWFrcyBhcmUgbmVlZGVkXG4gIC8vIC0gT3RoZXJ3aXNlIHRoZXJlIG11c3QgYmUgMiBicmVha3MgYmVmb3JlIHRoZSBwcmV2aW91cyBjaGFyYWN0ZXIuIERlcGVuZGluZyBvbiBob3cgbWFueSBicmVha3MgZXhpc3QgYWxyZWFkeSwgd2VcbiAgLy8gICAgICBtYXkgbmVlZCB0byBpbnNlcnQgMCwgMSBvciAyIGJyZWFrc1xuXG4gIGxldCBuZWVkZWRCcmVha3MgPSAyO1xuICBsZXQgaXNJbkxhc3RMaW5lID0gdHJ1ZTtcbiAgZm9yIChsZXQgaSA9IHN0YXJ0UG9zaXRpb247IGkgPCB0ZXh0Lmxlbmd0aCAmJiBuZWVkZWRCcmVha3MgPj0gMDsgaSsrKSB7XG4gICAgc3dpdGNoICh0ZXh0LmNoYXJDb2RlQXQoaSkpIHtcbiAgICAgIGNhc2UgMzI6XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgY2FzZSAxMDoge1xuICAgICAgICBuZWVkZWRCcmVha3MtLTtcbiAgICAgICAgaXNJbkxhc3RMaW5lID0gZmFsc2U7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIG5lZWRlZEJyZWFrcztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGlzSW5MYXN0TGluZSA/IDAgOiBuZWVkZWRCcmVha3M7XG59XG4iXX0=
import _extends from "@babel/runtime/helpers/extends";
import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["prefixCls"];
import React, { useContext, useEffect } from 'react';
import { EditorContext } from '../../Context';
import { TextAreaCommandOrchestrator } from '../../commands';
import handleKeyDown from './handleKeyDown';
import shortcuts from './shortcuts';
import "./index.css";
export default function Textarea(props) {
  var prefixCls = props.prefixCls,
      other = _objectWithoutProperties(props, _excluded);

  var _useContext = useContext(EditorContext),
      markdown = _useContext.markdown,
      commands = _useContext.commands,
      fullscreen = _useContext.fullscreen,
      preview = _useContext.preview,
      highlightEnable = _useContext.highlightEnable,
      extraCommands = _useContext.extraCommands,
      tabSize = _useContext.tabSize,
      _onChange = _useContext.onChange,
      dispatch = _useContext.dispatch;

  var textRef = React.useRef(null);
  var executeRef = React.useRef();
  var statesRef = React.useRef({
    fullscreen: fullscreen,
    preview: preview
  });
  useEffect(function () {
    statesRef.current = {
      fullscreen: fullscreen,
      preview: preview,
      highlightEnable: highlightEnable
    };
  }, [fullscreen, preview, highlightEnable]);
  useEffect(function () {
    if (textRef.current && dispatch) {
      var commandOrchestrator = new TextAreaCommandOrchestrator(textRef.current);
      executeRef.current = commandOrchestrator;
      dispatch({
        textarea: textRef.current,
        commandOrchestrator: commandOrchestrator
      });
    } // eslint-disable-next-line react-hooks/exhaustive-deps

  }, []);

  var onKeyDown = function onKeyDown(e) {
    handleKeyDown(e, tabSize);
    shortcuts(e, [].concat(_toConsumableArray(commands || []), _toConsumableArray(extraCommands || [])), executeRef.current, dispatch, statesRef.current);
  };

  useEffect(function () {
    if (textRef.current) {
      textRef.current.addEventListener('keydown', onKeyDown);
    }

    return function () {
      if (textRef.current) {
        // eslint-disable-next-line react-hooks/exhaustive-deps
        textRef.current.removeEventListener('keydown', onKeyDown);
      }
    }; // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  return /*#__PURE__*/React.createElement("textarea", _extends({
    autoComplete: "off",
    autoCorrect: "off",
    autoCapitalize: "off",
    spellCheck: false
  }, other, {
    ref: textRef,
    className: "".concat(prefixCls, "-text-input ").concat(other.className ? other.className : ''),
    value: markdown,
    onChange: function onChange(e) {
      dispatch && dispatch({
        markdown: e.target.value
      });
      _onChange && _onChange(e.target.value);
    }
  }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1RleHRBcmVhL1RleHRhcmVhLnRzeCJdLCJuYW1lcyI6WyJSZWFjdCIsInVzZUNvbnRleHQiLCJ1c2VFZmZlY3QiLCJFZGl0b3JDb250ZXh0IiwiVGV4dEFyZWFDb21tYW5kT3JjaGVzdHJhdG9yIiwiaGFuZGxlS2V5RG93biIsInNob3J0Y3V0cyIsIlRleHRhcmVhIiwicHJvcHMiLCJwcmVmaXhDbHMiLCJvdGhlciIsIm1hcmtkb3duIiwiY29tbWFuZHMiLCJmdWxsc2NyZWVuIiwicHJldmlldyIsImhpZ2hsaWdodEVuYWJsZSIsImV4dHJhQ29tbWFuZHMiLCJ0YWJTaXplIiwib25DaGFuZ2UiLCJkaXNwYXRjaCIsInRleHRSZWYiLCJ1c2VSZWYiLCJleGVjdXRlUmVmIiwic3RhdGVzUmVmIiwiY3VycmVudCIsImNvbW1hbmRPcmNoZXN0cmF0b3IiLCJ0ZXh0YXJlYSIsIm9uS2V5RG93biIsImUiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImNsYXNzTmFtZSIsInRhcmdldCIsInZhbHVlIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBT0EsS0FBUCxJQUFnQkMsVUFBaEIsRUFBNEJDLFNBQTVCLFFBQTZDLE9BQTdDO0FBRUEsU0FBU0MsYUFBVCxRQUFtRCxlQUFuRDtBQUNBLFNBQVNDLDJCQUFULFFBQTRDLGdCQUE1QztBQUNBLE9BQU9DLGFBQVAsTUFBMEIsaUJBQTFCO0FBQ0EsT0FBT0MsU0FBUCxNQUFzQixhQUF0QjtBQUNBO0FBSUEsZUFBZSxTQUFTQyxRQUFULENBQWtCQyxLQUFsQixFQUF3QztBQUNyRCxNQUFRQyxTQUFSLEdBQWdDRCxLQUFoQyxDQUFRQyxTQUFSO0FBQUEsTUFBc0JDLEtBQXRCLDRCQUFnQ0YsS0FBaEM7O0FBQ0Esb0JBQ0VQLFVBQVUsQ0FBQ0UsYUFBRCxDQURaO0FBQUEsTUFBUVEsUUFBUixlQUFRQSxRQUFSO0FBQUEsTUFBa0JDLFFBQWxCLGVB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QUEsS0FBSyxFQUFFcEIsUUFSVDtBQVNFLElBQUEsUUFBUSxFQUFFLGtCQUFDaUIsQ0FBRCxFQUFPO0FBQ2ZULE1BQUFBLFFBQVEsSUFBSUEsUUFBUSxDQUFDO0FBQUVSLFFBQUFBLFFBQVEsRUFBRWlCLENBQUMsQ0FBQ0ksTUFBRixDQUFTQztBQUFyQixPQUFELENBQXBCO0FBQ0FmLE1BQUFBLFNBQVEsSUFBSUEsU0FBUSxDQUFDVSxDQUFDLENBQUNJLE1BQUYsQ0FBU0MsS0FBVixDQUFwQjtBQUNEO0FBWkgsS0FERjtBQWdCRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyB1c2VDb250ZXh0LCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBJUHJvcHMgfSBmcm9tICcuLi8uLi91dGlscyc7XG5pbXBvcnQgeyBFZGl0b3JDb250ZXh0LCBFeGVjdXRlQ29tbWFuZFN0YXRlIH0gZnJvbSAnLi4vLi4vQ29udGV4dCc7XG5pbXBvcnQgeyBUZXh0QXJlYUNvbW1hbmRPcmNoZXN0cmF0b3IgfSBmcm9tICcuLi8uLi9jb21tYW5kcyc7XG5pbXBvcnQgaGFuZGxlS2V5RG93biBmcm9tICcuL2hhbmRsZUtleURvd24nO1xuaW1wb3J0IHNob3J0Y3V0cyBmcm9tICcuL3Nob3J0Y3V0cyc7XG5pbXBvcnQgJy4vaW5kZXgubGVzcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVGV4dEFyZWFQcm9wcyBleHRlbmRzIE9taXQ8UmVhY3QuVGV4dGFyZWFIVE1MQXR0cmlidXRlczxIVE1MVGV4dEFyZWFFbGVtZW50PiwgJ3ZhbHVlJz4sIElQcm9wcyB7fVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBUZXh0YXJlYShwcm9wczogVGV4dEFyZWFQcm9wcykge1xuICBjb25zdCB7IHByZWZpeENscywgLi4ub3RoZXIgfSA9IHByb3BzO1xuICBjb25zdCB7IG1hcmtkb3duLCBjb21tYW5kcywgZnVsbHNjcmVlbiwgcHJldmlldywgaGlnaGxpZ2h0RW5hYmxlLCBleHRyYUNvbW1hbmRzLCB0YWJTaXplLCBvbkNoYW5nZSwgZGlzcGF0Y2ggfSA9XG4gICAgdXNlQ29udGV4dChFZGl0b3JDb250ZXh0KTtcbiAgY29uc3QgdGV4dFJlZiA9IFJlYWN0LnVzZVJlZjxIVE1MVGV4dEFyZWFFbGVtZW50PihudWxsKTtcbiAgY29uc3QgZXhlY3V0ZVJlZiA9IFJlYWN0LnVzZVJlZjxUZXh0QXJlYUNvbW1hbmRPcmNoZXN0cmF0b3I+KCk7XG4gIGNvbnN0IHN0YXRlc1JlZiA9IFJlYWN0LnVzZVJlZjxFeGVjdXRlQ29tbWFuZFN0YXRlPih7IGZ1bGxzY3JlZW4sIHByZXZpZXcgfSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBzdGF0ZXNSZWYuY3VycmVudCA9IHsgZnVsbHNjcmVlbiwgcHJldmlldywgaGlnaGxpZ2h0RW5hYmxlIH07XG4gIH0sIFtmdWxsc2NyZWVuLCBwcmV2aWV3LCBoaWdobGlnaHRFbmFibGVdKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICh0ZXh0UmVmLmN1cnJlbnQgJiYgZGlzcGF0Y2gpIHtcbiAgICAgIGNvbnN0IGNvbW1hbmRPcmNoZXN0cmF0b3IgPSBuZXcgVGV4dEFyZWFDb21tYW5kT3JjaGVzdHJhdG9yKHRleHRSZWYuY3VycmVudCk7XG4gICAgICBleGVjdXRlUmVmLmN1cnJlbnQgPSBjb21tYW5kT3JjaGVzdHJhdG9yO1xuICAgICAgZGlzcGF0Y2goeyB0ZXh0YXJlYTogdGV4dFJlZi5jdXJyZW50LCBjb21tYW5kT3JjaGVzdHJhdG9yIH0pO1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gIH0sIFtdKTtcblxuICBjb25zdCBvbktleURvd24gPSAoZTogS2V5Ym9hcmRFdmVudCB8IFJlYWN0LktleWJvYXJkRXZlbnQ8SFRNTFRleHRBcmVhRWxlbWVudD4pID0+IHtcbiAgICBoYW5kbGVLZXlEb3duKGUsIHRhYlNpemUpO1xuICAgIHNob3J0Y3V0cyhlLCBbLi4uKGNvbW1hbmRzIHx8IFtdKSwgLi4uKGV4dHJhQ29tbWFuZHMgfHwgW10pXSwgZXhlY3V0ZVJlZi5jdXJyZW50LCBkaXNwYXRjaCwgc3RhdGVzUmVmLmN1cnJlbnQpO1xuICB9O1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICh0ZXh0UmVmLmN1cnJlbnQpIHtcbiAgICAgIHRleHRSZWYuY3VycmVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgb25LZXlEb3duKTtcbiAgICB9XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGlmICh0ZXh0UmVmLmN1cnJlbnQpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICAgICAgICB0ZXh0UmVmLmN1cnJlbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIG9uS2V5RG93bik7XG4gICAgICB9XG4gICAgfTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gIH0sIFtdKTtcblxuICByZXR1cm4gKFxuICAgIDx0ZXh0YXJlYVxuICAgICAgYXV0b0NvbXBsZXRlPVwib2ZmXCJcbiAgICAgIGF1dG9Db3JyZWN0PVwib2ZmXCJcbiAgICAgIGF1dG9DYXBpdGFsaXplPVwib2ZmXCJcbiAgICAgIHNwZWxsQ2hlY2s9e2ZhbHNlfVxuICAgICAgey4uLm90aGVyfVxuICAgICAgcmVmPXt0ZXh0UmVmfVxuICAgICAgY2xhc3NOYW1lPXtgJHtwcmVmaXhDbHN9LXRleHQtaW5wdXQgJHtvdGhlci5jbGFzc05hbWUgPyBvdGhlci5jbGFzc05hbWUgOiAnJ31gfVxuICAgICAgdmFsdWU9e21hcmtkb3dufVxuICAgICAgb25DaGFuZ2U9eyhlKSA9PiB7XG4gICAgICAgIGRpc3BhdGNoICYmIGRpc3BhdGNoKHsgbWFya2Rvd246IGUudGFyZ2V0LnZhbHVlIH0pO1xuICAgICAgICBvbkNoYW5nZSAmJiBvbkNoYW5nZShlLnRhcmdldC52YWx1ZSk7XG4gICAgICB9fVxuICAgIC8+XG4gICk7XG59XG4iXX0=
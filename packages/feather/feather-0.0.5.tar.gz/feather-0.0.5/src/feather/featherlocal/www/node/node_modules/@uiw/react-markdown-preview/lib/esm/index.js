import _extends from "@babel/runtime/helpers/extends";
import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import React, { useImperativeHandle } from 'react';
import ReactMarkdown from 'react-markdown';
import gfm from 'remark-gfm'; // @ts-ignore

import slug from 'remark-slug'; // @ts-ignore

import headings from 'remark-autolink-headings';
import rehypeRaw from 'rehype-raw';
import rehypePrism from '@mapbox/rehype-prism';
import rehypeRewrite from 'rehype-rewrite';
import "./styles/markdown.css";
import "./styles/markdowncolor.css";

var rehypeRewriteHandle = function rehypeRewriteHandle(node, index, parent) {
  if (node.type === 'element' && parent.type === 'root' && /h(1|2|3|4|5|6)/.test(node.tagName) && index !== 0) {
    var child = node.children && node.children[0] ? node.children[0] : null;

    if (child && child.properties && child.properties.ariaHidden === 'true') {
      child.properties = _objectSpread({
        class: 'anchor'
      }, child.properties);
      child.children = [{
        type: 'element',
        tagName: 'svg',
        properties: {
          class: 'octicon octicon-link',
          viewBox: '0 0 16 16',
          version: '1.1',
          width: '16',
          height: '16',
          ariaHidden: 'true'
        },
        children: [{
          type: 'element',
          tagName: 'path',
          properties: {
            fillRule: 'evenodd',
            d: 'M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z'
          }
        }]
      }];
    }
  }
};

export default /*#__PURE__*/React.forwardRef(function (props, ref) {
  var _ref = props || {},
      className = _ref.className,
      source = _ref.source,
      style = _ref.style,
      onScroll = _ref.onScroll,
      onMouseOver = _ref.onMouseOver,
      _ref$warpperElement = _ref.warpperElement,
      warpperElement = _ref$warpperElement === void 0 ? {} : _ref$warpperElement,
      other = _objectWithoutProperties(_ref, ["className", "source", "style", "onScroll", "onMouseOver", "warpperElement"]);

  var mdp = /*#__PURE__*/React.createRef();
  useImperativeHandle(ref, function () {
    return _objectSpread(_objectSpread({}, props), {}, {
      mdp: mdp
    });
  }, [mdp, props]);
  var cls = "wmde-markdown wmde-markdown-color ".concat(className || '');
  return /*#__PURE__*/React.createElement("div", _extends({
    ref: mdp,
    onScroll: onScroll,
    onMouseOver: onMouseOver
  }, warpperElement, {
    className: cls,
    style: style
  }), /*#__PURE__*/React.createElement(ReactMarkdown, _extends({}, other, {
    rehypePlugins: [[rehypePrism, {
      ignoreMissing: true
    }], [rehypeRewrite, rehypeRewriteHandle], rehypeRaw].concat(_toConsumableArray(other.rehypePlugins || [])),
    remarkPlugins: [slug, headings].concat(_toConsumableArray(other.remarkPlugins || []), [gfm]),
    children: source || ''
  })));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pbmRleC50c3giXSwibmFtZXMiOlsiUmVhY3QiLCJ1c2VJbXBlcmF0aXZlSGFuZGxlIiwiUmVhY3RNYXJrZG93biIsImdmbSIsInNsdWciLCJoZWFkaW5ncyIsInJlaHlwZVJhdyIsInJlaHlwZVByaXNtIiwicmVoeXBlUmV3cml0ZSIsInJlaHlwZVJld3JpdGVIYW5kbGUiLCJub2RlIiwiaW5kZXgiLCJwYXJlbnQiLCJ0eXBlIiwidGVzdCIsInRhZ05hbWUiLCJjaGlsZCIsImNoaWxkcmVuIiwicHJvcGVydGllcyIsImFyaWFIaWRkZW4iLCJjbGFzcyIsInZpZXdCb3giLCJ2ZXJzaW9uIiwid2lkdGgiLCJoZWlnaHQiLCJmaWxsUnVsZSIsImQiLCJmb3J3YXJkUmVmIiwicHJvcHMiLCJyZWYiLCJjbGFzc05hbWUiLCJzb3VyY2UiLCJzdHlsZSIsIm9uU2Nyb2xsIiwib25Nb3VzZU92ZXIiLCJ3YXJwcGVyRWxlbWVudCIsIm90aGVyIiwibWRwIiwiY3JlYXRlUmVmIiwiY2xzIiwiaWdub3JlTWlzc2luZyIsInJlaHlwZVBsdWdpbnMiLCJyZW1hcmtQbHVnaW5zIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBT0EsS0FBUCxJQUFnQkMsbUJBQWhCLFFBQTJDLE9BQTNDO0FBQ0EsT0FBT0MsYUFBUCxNQUEwQixnQkFBMUI7QUFDQSxPQUFPQyxHQUFQLE1BQWdCLFlBQWhCLEMsQ0FDQTs7QUFDQSxPQUFPQyxJQUFQLE1BQWlCLGFBQWpCLEMsQ0FDQTs7QUFDQSxPQUFPQyxRQUFQLE1BQXFCLDBCQUFyQjtBQUNBLE9BQU9DLFNBQVAsTUFBc0IsWUFBdEI7QUFDQSxPQUFPQyxXQUFQLE1BQXdCLHNCQUF4QjtBQUNBLE9BQU9DLGFBQVAsTUFBMEIsZ0JBQTFCO0FBQ0E7QUFDQTs7QUFFQSxJQUFNQyxtQkFBbUIsR0FBRyxTQUF0QkEsbUJBQXNCLENBQUNDLElBQUQsRUFBWUMsS0FBWixFQUEyQkMsTUFBM0IsRUFBMkM7QUFDckUsTUFBSUYsSUFB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QUFDSyxhQUFOLElBQXVCLEVBQXZILEVBRmY7QUFHRSxJQUFBLGFBQWEsR0FBSXJDLElBQUosRUFBVUMsUUFBViw0QkFBd0IrQixLQUFLLENBQUNNLGFBQU4sSUFBdUIsRUFBL0MsSUFBb0R2QyxHQUFwRCxFQUhmO0FBSUUsSUFBQSxRQUFRLEVBQUU0QixNQUFNLElBQUk7QUFKdEIsS0FERixDQURGO0FBVUQsQ0FmYyxDQUFmIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZUltcGVyYXRpdmVIYW5kbGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmVhY3RNYXJrZG93biBmcm9tICdyZWFjdC1tYXJrZG93bic7XG5pbXBvcnQgZ2ZtIGZyb20gJ3JlbWFyay1nZm0nO1xuLy8gQHRzLWlnbm9yZVxuaW1wb3J0IHNsdWcgZnJvbSAncmVtYXJrLXNsdWcnO1xuLy8gQHRzLWlnbm9yZVxuaW1wb3J0IGhlYWRpbmdzIGZyb20gJ3JlbWFyay1hdXRvbGluay1oZWFkaW5ncydcbmltcG9ydCByZWh5cGVSYXcgZnJvbSAncmVoeXBlLXJhdyc7XG5pbXBvcnQgcmVoeXBlUHJpc20gZnJvbSAnQG1hcGJveC9yZWh5cGUtcHJpc20nO1xuaW1wb3J0IHJlaHlwZVJld3JpdGUgZnJvbSAncmVoeXBlLXJld3JpdGUnO1xuaW1wb3J0ICcuL3N0eWxlcy9tYXJrZG93bi5sZXNzJztcbmltcG9ydCAnLi9zdHlsZXMvbWFya2Rvd25jb2xvci5sZXNzJztcblxuY29uc3QgcmVoeXBlUmV3cml0ZUhhbmRsZSA9IChub2RlOiBhbnksIGluZGV4OiBudW1iZXIsIHBhcmVudDogYW55KSA9PiB7XG4gIGlmIChub2RlLnR5cGUgPT09ICdlbGVtZW50JyAmJiBwYXJlbnQudHlwZSA9PT0gJ3Jvb3QnICYmIC9oKDF8MnwzfDR8NXw2KS8udGVzdChub2RlLnRhZ05hbWUpICYmIGluZGV4ICE9PSAwKSB7XG4gICAgY29uc3QgY2hpbGQgPSBub2RlLmNoaWxkcmVuICYmIG5vZGUuY2hpbGRyZW5bMF0gPyBub2RlLmNoaWxkcmVuWzBdIDogbnVsbDtcbiAgICBpZiAoY2hpbGQgJiYgY2hpbGQucHJvcGVydGllcyAmJiBjaGlsZC5wcm9wZXJ0aWVzLmFyaWFIaWRkZW4gPT09ICd0cnVlJykge1xuICAgICAgY2hpbGQucHJvcGVydGllcyA9IHsgY2xhc3M6ICdhbmNob3InLCAuLi5jaGlsZC5wcm9wZXJ0aWVzIH07XG4gICAgICBjaGlsZC5jaGlsZHJlbiA9IFtcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6ICdlbGVtZW50JyxcbiAgICAgICAgICB0YWdOYW1lOiAnc3ZnJyxcbiAgICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBjbGFzczogJ29jdGljb24gb2N0aWNvbi1saW5rJyxcbiAgICAgICAgICAgIHZpZXdCb3g6ICcwIDAgMTYgMTYnLFxuICAgICAgICAgICAgdmVyc2lvbjogJzEuMScsXG4gICAgICAgICAgICB3aWR0aDogJzE2JyxcbiAgICAgICAgICAgIGhlaWdodDogJzE2JyxcbiAgICAgICAgICAgIGFyaWFIaWRkZW46ICd0cnVlJyxcbiAgICAgICAgICB9LFxuICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHR5cGU6ICdlbGVtZW50JyxcbiAgICAgICAgICAgICAgdGFnTmFtZTogJ3BhdGgnLFxuICAgICAgICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICAgICAgZmlsbFJ1bGU6ICdldmVub2RkJyxcbiAgICAgICAgICAgICAgICBkOiAnTTcuNzc1IDMuMjc1YS43NS43NSAwIDAwMS4wNiAxLjA2bDEuMjUtMS4yNWEyIDIgMCAxMTIuODMgMi44M2wtMi41IDIuNWEyIDIgMCAwMS0yLjgzIDAgLjc1Ljc1IDAgMDAtMS4wNiAxLjA2IDMuNSAzLjUgMCAwMDQuOTUgMGwyLjUtMi41YTMuNSAzLjUgMCAwMC00Ljk1LTQuOTVsLTEuMjUgMS4yNXptLTQuNjkgOS42NGEyIDIgMCAwMTAtMi44M2wyLjUtMi41YTIgMiAwIDAxMi44MyAwIC43NS43NSAwIDAwMS4wNi0xLjA2IDMuNSAzLjUgMCAwMC00Ljk1IDBsLTIuNSAyLjVhMy41IDMuNSAwIDAwNC45NSA0Ljk1bDEuMjUtMS4yNWEuNzUuNzUgMCAwMC0xLjA2LTEuMDZsLTEuMjUgMS4yNWEyIDIgMCAwMS0yLjgzIDB6JyxcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIF1cbiAgICAgICAgfVxuICAgICAgXTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IHR5cGUgTWFya2Rvd25QcmV2aWV3UHJvcHMgPSB7XG4gIGNsYXNzTmFtZT86IHN0cmluZztcbiAgc291cmNlPzogc3RyaW5nO1xuICBzdHlsZT86IFJlYWN0LkNTU1Byb3BlcnRpZXM7XG4gIHdhcnBwZXJFbGVtZW50PzogUmVhY3QuRGV0YWlsZWRIVE1MUHJvcHM8UmVhY3QuSFRNTEF0dHJpYnV0ZXM8SFRNTERpdkVsZW1lbnQ+LCBIVE1MRGl2RWxlbWVudD47XG4gIG9uU2Nyb2xsPzogKGU6IFJlYWN0LlVJRXZlbnQ8SFRNTERpdkVsZW1lbnQ+KSA9PiB2b2lkO1xuICBvbk1vdXNlT3Zlcj86IChlOiBSZWFjdC5Nb3VzZUV2ZW50PEhUTUxEaXZFbGVtZW50PikgPT4gdm9pZDtcbn0gJiBPbWl0PFJlYWN0TWFya2Rvd24uUmVhY3RNYXJrZG93bk9wdGlvbnMsICdjaGlsZHJlbic+O1xuXG5leHBvcnQgdHlwZSBNYXJrZG93blByZXZpZXdSZWYgPSB7XG4gIG1kcDogUmVhY3QuUmVmT2JqZWN0PEhUTUxEaXZFbGVtZW50Pjtcbn0gJiBNYXJrZG93blByZXZpZXdQcm9wcztcblxuZXhwb3J0IGRlZmF1bHQgUmVhY3QuZm9yd2FyZFJlZjxNYXJrZG93blByZXZpZXdSZWYsIE1hcmtkb3duUHJldmlld1Byb3BzPigocHJvcHMsIHJlZikgPT4ge1xuICBjb25zdCB7IGNsYXNzTmFtZSwgc291cmNlLCBzdHlsZSwgb25TY3JvbGwsIG9uTW91c2VPdmVyLCB3YXJwcGVyRWxlbWVudCA9IHt9LCAuLi5vdGhlciAgfSA9IHByb3BzIHx8IHt9O1xuICBjb25zdCBtZHAgPSBSZWFjdC5jcmVhdGVSZWY8SFRNTERpdkVsZW1lbnQ+KCk7XG4gIHVzZUltcGVyYXRpdmVIYW5kbGUocmVmLCAoKSA9PiAoeyAuLi5wcm9wcywgbWRwIH0pLCBbbWRwLCBwcm9wc10pO1xuICBjb25zdCBjbHMgPSBgd21kZS1tYXJrZG93biB3bWRlLW1hcmtkb3duLWNvbG9yICR7Y2xhc3NOYW1lIHx8ICcnfWA7XG4gIHJldHVybiAoXG4gICAgPGRpdiByZWY9e21kcH0gb25TY3JvbGw9e29uU2Nyb2xsfSBvbk1vdXNlT3Zlcj17b25Nb3VzZU92ZXJ9IHsuLi53YXJwcGVyRWxlbWVudH0gY2xhc3NOYW1lPXtjbHN9IHN0eWxlPXtzdHlsZX0+XG4gICAgICA8UmVhY3RNYXJrZG93blxuICAgICAgICB7Li4ub3RoZXJ9XG4gICAgICAgIHJlaHlwZVBsdWdpbnM9e1tbcmVoeXBlUHJpc20sIHsgaWdub3JlTWlzc2luZzogdHJ1ZSB9XSwgW3JlaHlwZVJld3JpdGUsIHJlaHlwZVJld3JpdGVIYW5kbGVdLCByZWh5cGVSYXcsIC4uLihvdGhlci5yZWh5cGVQbHVnaW5zIHx8IFtdKV19XG4gICAgICAgIHJlbWFya1BsdWdpbnM9e1sgc2x1ZywgaGVhZGluZ3MsIC4uLihvdGhlci5yZW1hcmtQbHVnaW5zIHx8IFtdKSwgZ2ZtIF19XG4gICAgICAgIGNoaWxkcmVuPXtzb3VyY2UgfHwgJyd9XG4gICAgICAvPlxuICAgIDwvZGl2PlxuICApO1xufSk7XG4iXX0=
Metadata-Version: 2.1
Name: aws-cdk.assertions
Version: 1.110.1
Summary: An assertion library for use with CDK Apps
Home-page: https://github.com/aws/aws-cdk
Author: Amazon Web Services
License: Apache-2.0
Project-URL: Source, https://github.com/aws/aws-cdk.git
Description: # Assertions
        
        <!--BEGIN STABILITY BANNER-->---
        
        
        ![cdk-constructs: Experimental](https://img.shields.io/badge/cdk--constructs-experimental-important.svg?style=for-the-badge)
        
        > The APIs of higher level constructs in this module are experimental and under active development.
        > They are subject to non-backward compatible changes or removal in any future version. These are
        > not subject to the [Semantic Versioning](https://semver.org/) model and breaking changes will be
        > announced in the release notes. This means that while you may use them, you may need to update
        > your source code when upgrading to a newer version of this package.
        
        ---
        <!--END STABILITY BANNER-->
        
        Functions for writing test asserting against CDK applications, with focus on CloudFormation templates.
        
        The `TemplateAssertions` class includes a set of methods for writing assertions against CloudFormation templates. Use one of the `TemplateAssertions.fromXxx()` static methods to create an instance of this class.
        
        To create `TemplateAssertions` from CDK stack, start off with:
        
        ```python
        # Example automatically generated without compilation. See https://github.com/aws/jsii/issues/826
        from aws_cdk.core import Stack
        from aws_cdk.assertions import TemplateAssertions
        
        stack = Stack(...)
        assert = TemplateAssertions.from_stack(stack)
        ```
        
        Alternatively, assertions can be run on an existing CloudFormation template -
        
        ```python
        # Example automatically generated without compilation. See https://github.com/aws/jsii/issues/826
        template = fs.read_file_sync("/path/to/template/file")
        assert = TemplateAssertions.from_string(template)
        ```
        
        ## Full Template Match
        
        The simplest assertion would be to assert that the template matches a given
        template.
        
        ```python
        # Example automatically generated without compilation. See https://github.com/aws/jsii/issues/826
        assert.template_matches(
            Resources={
                "Type": "Foo::Bar",
                "Properties": {
                    "Baz": "Qux"
                }
            }
        )
        ```
        
        ## Counting Resources
        
        This module allows asserting the number of resources of a specific type found
        in a template.
        
        ```python
        # Example automatically generated without compilation. See https://github.com/aws/jsii/issues/826
        assert.resource_count_is("Foo::Bar", 2)
        ```
        
        ## Resource Matching
        
        Beyond resource counting, the module also allows asserting that a resource with
        specific properties are present.
        
        The following code asserts that the `Properties` section of a resource of type
        `Foo::Bar` contains the specified properties -
        
        ```python
        # Example automatically generated without compilation. See https://github.com/aws/jsii/issues/826
        assert.has_resource_properties("Foo::Bar",
            Foo="Bar",
            Baz=5,
            Qux=["Waldo", "Fred"]
        )
        ```
        
        The same method allows asserting the complete definition of the 'Resource'
        which can be used to verify things other sections like `DependsOn`, `Metadata`,
        `DeletionProperty`, etc.
        
        ```python
        # Example automatically generated without compilation. See https://github.com/aws/jsii/issues/826
        assert.has_resource_definition("Foo::Bar",
            Properties={"Foo": "Bar"},
            DependsOn=["Waldo", "Fred"]
        )
        ```
        
        ## Special Matchers
        
        The expectation provided to the `hasResourceXXX()` methods, besides carrying
        literal values, as seen in the above examples, can also have special matchers
        encoded.
        They are available as part of the `Matchers` class and can be used as follows -
        
        ```python
        # Example automatically generated without compilation. See https://github.com/aws/jsii/issues/826
        assert.has_resource_properties("Foo::Bar",
            Foo="Bar",
            Baz=Match.absent_property()
        )
        ```
        
        The list of available matchers are -
        
        * `absentProperty()`: Specifies that this key must not be present.
        
        ## Strongly typed languages
        
        Some of the APIs documented above, such as `templateMatches()` and
        `hasResourceProperties()` accept fluently an arbitrary JSON (like) structure
        its parameter.
        This fluency is available only in dynamically typed languages like javascript
        and Python.
        
        For strongly typed languages, like Java, you can achieve similar fluency using
        any popular JSON deserializer. The following Java example uses `Gson` -
        
        ```java
        // In Java, using text blocks and Gson
        import com.google.gson.Gson;
        
        String json = """
          {
            "Foo": "Bar",
            "Baz": 5,
            "Qux": [ "Waldo", "Fred" ],
          } """;
        
        Map expected = new Gson().fromJson(json, Map.class);
        assert.hasResourceProperties("Foo::Bar", expected);
        ```
        
Platform: UNKNOWN
Classifier: Intended Audience :: Developers
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: JavaScript
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Typing :: Typed
Classifier: Development Status :: 4 - Beta
Classifier: License :: OSI Approved
Classifier: Framework :: AWS CDK
Classifier: Framework :: AWS CDK :: 1
Requires-Python: >=3.6
Description-Content-Type: text/markdown

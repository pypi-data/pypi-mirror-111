# -*- coding: utf-8 -*-
from setuptools import setup

package_dir = \
{'': 'src'}

packages = \
['pydantic_vault']

package_data = \
{'': ['*']}

install_requires = \
['hvac>=0.10.0,<0.11.0', 'pydantic>=1.8,<2.0']

setup_kwargs = {
    'name': 'pydantic-vault',
    'version': '0.5.0a0',
    'description': 'A simple extension to Pydantic BaseSettings that can retrieve secrets from Hashicorp Vault',
    'long_description': '# Pydantic-Vault\n\n[![PyPI](https://img.shields.io/pypi/v/pydantic-vault)](https://pypi.org/project/pydantic-vault/)\n[![Check code](https://github.com/nymous/pydantic-vault/workflows/Check%20code/badge.svg)](https://github.com/nymous/pydantic-vault/actions/workflows/check_code.yml)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\nA simple extension to [Pydantic][pydantic] [BaseSettings][pydantic-basesettings] that can retrieve secrets from a [KV v2 secrets engine][vault-kv-v2] in Hashicorp [Vault][vault]\n\n## Getting started\n\nStarting with Pydantic 1.8, [custom settings sources][pydantic-basesettings-customsource] are officially supported.\n\nYou can create a normal `BaseSettings` class, and define the `customise_sources()` method to load secrets from your Vault instance using the `vault_config_settings_source` function:\n\n```python\nimport os\n\nfrom pydantic import BaseSettings, Field, SecretStr\nfrom pydantic_vault import vault_config_settings_source\n\nclass Settings(BaseSettings):\n    username: str = Field(..., vault_secret_path="path/to/secret", vault_secret_key="my_user")\n    password: SecretStr = Field(..., vault_secret_path="path/to/secret", vault_secret_key="my_password")\n\n    class Config:\n        vault_url: str = "https://vault.tld"\n        vault_token: SecretStr = os.environ["VAULT_TOKEN"]\n        vault_namespace: str = "your/namespace"  # Optional, pydantic-vault supports Vault namespaces (for Vault Enterprise)\n        vault_secret_mount_point: str = "secrets"  # Optional, if your KV v2 secrets engine is not available at the default "secret" mount point\n\n        @classmethod\n        def customise_sources(\n                cls,\n                init_settings,\n                env_settings,\n                file_secret_settings,\n        ):\n            # This is where you can choose which settings sources to use and their priority\n            return (\n                init_settings,\n                env_settings,\n                vault_config_settings_source,\n                file_secret_settings\n            )\n\nsettings = Settings()\n# These variables will come from the Vault secret you configured\nsettings.username\nsettings.password.get_secret_value()\n\n\n# Now let\'s pretend we have already set the USERNAME in an environment variable\n# (see the Pydantic documentation for more information and to know how to configure it)\n# With the priority order we defined above, its value will override the Vault secret\nos.environ["USERNAME"] = "my user"\n\nsettings = Settings()\nsettings.username  # "my user", defined in the environment variable\nsettings.password.get_secret_value()  # the value set in Vault\n```\n\n## Documentation\n\n### `Field` additional parameters\n\nYou might have noticed that we import `Field` directly from Pydantic. Pydantic-Vault doesn\'t add any custom logic to it, which means you can still use everything you know and love from Pydantic.\n\nThe additional parameters Pydantic-Vault uses are:\n\n| Parameter name              | Required | Description |\n|-----------------------------|----------|-------------|\n| `vault_secret_path`         | **Yes**  | The path to your secret in Vault |\n| `vault_secret_key`          | **Yes**  | The key to use in the secret |\n\nFor example, if you create a secret `database/prod` with a key `password` and a value of `a secret password`, you would use\n\n```python\npassword: SecretStr = Field(..., vault_secret_path="database/prod", vault_secret_key="password")\n```\n\n### Configuration\n\nYou can configure the behaviour of Pydantic-vault in your `Settings.Config` class, or using environment variables:\n\n| Settings name              | Required | Environment variable | Description |\n|----------------------------|----------|----------------------|-------------|\n| `customise_sources()`      | **Yes**  | N/A                  | You need to implement this function to use Vault as a settings source, and choose the priority order you want |\n| `vault_url`                | **Yes**  | `VAULT_ADDR`         | Your Vault URL |\n| `vault_namespace`          | No       | `VAULT_NAMESPACE`    | Your Vault namespace (if you use one, requires Vault Enterprise) |\n| `vault_secret_mount_point` | No       | N/A                  | The mount point of the KV v2 secrets engine, if different from the default `"secret"` mount point |\n| `vault_auth_mount_point`   | No       | `VAULT_AUTH_MOUNT_POINT` | The mount point of the authentication method, if different from its default mount point |\n\nYou can also configure everything available in the original Pydantic `BaseSettings` class.\n\n### Authentication\n\nFor now Pydantic-Vault supports the following authentication method (in descending order of priority):\n  - [direct token authentication][vault-auth-token]\n  - [kubernetes][vault-auth-kubernetes]\n  - [approle][vault-auth-approle]\n\nSupport is planned for GKE authentication methods.\n\n#### Approle\n\nTo authenticate using the [Approle auth method][vault-auth-approle], you need to pass a role ID and a secret ID to your Settings class.\n\nPydantic-vault reads this information from the following sources (in descending order of priority):\n  - the `VAULT_ROLE_ID` and `VAULT_SECRET_ID` environment variables\n  - the `vault_role_id` and `vault_secret_id` configuration fields in your `Settings.Config` class (`vault_secret_id` can be a `str` or a `SecretStr`)\n\nYou can also mix-and-match, e.g. write the role ID in your `Settings.Config` class and retrieve the secret ID from the environment at runtime.\n\nExample:\n```python\nfrom pydantic import BaseSettings, Field, SecretStr\nfrom pydantic_vault import vault_config_settings_source\n\nclass Settings(BaseSettings):\n    username: str = Field(..., vault_secret_path="path/to/secret", vault_secret_key="my_user")\n    password: SecretStr = Field(..., vault_secret_path="path/to/secret", vault_secret_key="my_password")\n\n    class Config:\n        vault_url: str = "https://vault.tld"\n        vault_role_id: str = "my-role-id"\n        vault_secret_id_id: SecretStr = SecretStr("my-secret-id")\n\n        @classmethod\n        def customise_sources(\n                cls,\n                init_settings,\n                env_settings,\n                file_secret_settings,\n        ):\n            return (\n                init_settings,\n                env_settings,\n                vault_config_settings_source,\n                file_secret_settings\n            )\n```\n\n#### Kubernetes\n\nTo authenticate using the [Kubernetes auth method][vault-auth-kubernetes], you need to pass a role to your Settings class.\n\nPydantic-vault reads this information from the following sources (in descending order of priority):\n  - the `VAULT_KUBERNETES_ROLE` environment variable\n  - the `vault_kubernetes_role` configuration field in your `Settings.Config` class, which must be a `str`\n\nThe Kubernetes service account token will be read from the file at `/var/run/secrets/kubernetes.io/serviceaccount/token`.\n\nExample:\n```python\nfrom pydantic import BaseSettings, Field, SecretStr\nfrom pydantic_vault import vault_config_settings_source\n\nclass Settings(BaseSettings):\n    username: str = Field(..., vault_secret_path="path/to/secret", vault_secret_key="my_user")\n    password: SecretStr = Field(..., vault_secret_path="path/to/secret", vault_secret_key="my_password")\n\n    class Config:\n        vault_url: str = "https://vault.tld"\n        vault_kubernetes_role: str = "my-role"\n\n        @classmethod\n        def customise_sources(\n                cls,\n                init_settings,\n                env_settings,\n                file_secret_settings,\n        ):\n            return (\n                init_settings,\n                env_settings,\n                vault_config_settings_source,\n                file_secret_settings\n            )\n```\n\n#### Vault token\n\nTo authenticate using the [Token auth method][vault-auth-token], you need to pass a Vault token to your `Settings` class.\n\nPydantic-vault reads this token from the following sources (in descending order of priority):\n  - the `VAULT_TOKEN` environment variable\n  - the `~/.vault-token` file (so you can use the `vault` CLI to login locally, Pydantic-vault will transparently reuse its token)\n  - the `vault_token` configuration field in your `Settings.Config` class, which can be a `str` or a `SecretStr`\n\nExample:\n```python\nfrom pydantic import BaseSettings, Field, SecretStr\nfrom pydantic_vault import vault_config_settings_source\n\nclass Settings(BaseSettings):\n    username: str = Field(..., vault_secret_path="path/to/secret", vault_secret_key="my_user")\n    password: SecretStr = Field(..., vault_secret_path="path/to/secret", vault_secret_key="my_password")\n\n    class Config:\n        vault_url: str = "https://vault.tld"\n        vault_token: SecretStr = SecretStr("my-secret-token")\n\n        @classmethod\n        def customise_sources(\n                cls,\n                init_settings,\n                env_settings,\n                file_secret_settings,\n        ):\n            return (\n                init_settings,\n                env_settings,\n                vault_config_settings_source,\n                file_secret_settings\n            )\n```\n\n### Order of priority\n\nThanks to the new feature in Pydantic 1.8 that allows you to [customize settings sources][pydantic-basesettings-customsource], you can choose the order of priority you want.\n\nHere are some examples:\n```python\nfrom pydantic import BaseSettings\nfrom pydantic_vault import vault_config_settings_source\n\nclass Settings(BaseSettings):\n    """\n    In descending order of priority:\n      - arguments passed to the `Settings` class initializer\n      - environment variables\n      - Vault variables\n      - variables loaded from the secrets directory, such as Docker Secrets\n      - the default field values for the `Settings` model\n    """\n    class Config:\n        @classmethod\n        def customise_sources(\n                cls,\n                init_settings,\n                env_settings,\n                file_secret_settings,\n        ):\n            return (\n                init_settings,\n                env_settings,\n                vault_config_settings_source,\n                file_secret_settings\n            )\n\n\nclass Settings(BaseSettings):\n    """\n    In descending order of priority:\n      - Vault variables\n      - environment variables\n      - variables loaded from the secrets directory, such as Docker Secrets\n      - the default field values for the `Settings` model\n    Here we chose to remove the "init arguments" source,\n    and move the Vault source up before the environment source\n    """\n    class Config:\n        @classmethod\n        def customise_sources(\n                cls,\n                init_settings,\n                env_settings,\n                file_secret_settings,\n        ):\n            return (\n                vault_config_settings_source,\n                env_settings,\n                file_secret_settings\n            )\n```\n\n## Inspirations\n\n- [Ansible `hashi_vault` lookup plugin][ansible hashi_vault] for the API and some code\n- [Hashicorp\'s Vault GitHub Action][vault-action] for the API\n\n## License\n\nPydantic-Vault is available under the [MIT license](./LICENSE).\n\n[ansible hashi_vault]: https://docs.ansible.com/ansible/latest/collections/community/hashi_vault/hashi_vault_lookup.html\n[pydantic]: https://pydantic-docs.helpmanual.io/\n[pydantic-basesettings]: https://pydantic-docs.helpmanual.io/usage/settings/\n[pydantic-basesettings-customsource]: https://pydantic-docs.helpmanual.io/usage/settings/#customise-settings-sources\n[vault]: https://www.vaultproject.io/\n[vault-action]: https://github.com/hashicorp/vault-action\n[vault-auth-approle]: https://www.vaultproject.io/docs/auth/approle\n[vault-auth-kubernetes]: https://www.vaultproject.io/docs/auth/kubernetes\n[vault-auth-token]: https://www.vaultproject.io/docs/auth/token\n[vault-kv-v2]: https://www.vaultproject.io/docs/secrets/kv/kv-v2/\n',
    'author': 'Thomas Gaudin',
    'author_email': 'thomas.gaudin@centraliens-lille.org',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/nymous/pydantic-vault',
    'package_dir': package_dir,
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.6.1,<4.0.0',
}


setup(**setup_kwargs)

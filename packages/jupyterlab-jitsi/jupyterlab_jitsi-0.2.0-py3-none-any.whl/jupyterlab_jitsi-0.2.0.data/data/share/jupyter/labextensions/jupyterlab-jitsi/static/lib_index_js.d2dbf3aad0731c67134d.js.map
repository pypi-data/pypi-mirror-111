{"version":3,"sources":["webpack://jupyterlab-jitsi/./lib/handler.js","webpack://jupyterlab-jitsi/./lib/index.js","webpack://jupyterlab-jitsi/./style/icon.svg"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAA+C;AACS;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACO,kDAAkD;AACzD;AACA,qBAAqB,+EAA6B;AAClD,uBAAuB,8DAAW;AAClC;AACA;AACA;AACA,yBAAyB,8EAA4B;AACrD;AACA;AACA,kBAAkB,+EAA6B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,gFAA8B;AAChD;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClCuD;AACH;AACW;AACd;AACV;AACO;AACK;AACR;AACpC,oBAAoB,8DAAO;AAClC;AACA,YAAY,oDAAU;AACtB,CAAC;AACD;AACA;AACA;AACA,0BAA0B,wDAAM;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,wEAAqB;AAC7C,qDAAqD,WAAW;AAChE;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,eAAe,GAAG,+BAA+B;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iEAAe,EAAE,yEAAgB;AAChD,eAAe,2DAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,eAAe;AACjD;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,EAAE;AACpD,+CAA+C,EAAE;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,eAAe,GAAG,oBAAoB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,QAAQ,oDAAU;AAClB;AACA;AACA,SAAS;AACT;AACA,2FAA2F,OAAO;AAClG,SAAS;AACT;AACA;AACA,iEAAe,SAAS,EAAC;;;;;;;;;;;;;;;;AClJzB,iEAAe,4XAA4X,E","file":"lib_index_js.d2dbf3aad0731c67134d.js","sourcesContent":["import { URLExt } from '@jupyterlab/coreutils';\nimport { ServerConnection } from '@jupyterlab/services';\n/**\n * Call the API extension\n *\n * @param endPoint API REST end point for the extension\n * @param init Initial values for the request\n * @returns The response body interpreted as JSON\n */\nexport async function requestAPI(endPoint = '', init = {}) {\n    // Make request to Jupyter API\n    const settings = ServerConnection.makeSettings();\n    const requestUrl = URLExt.join(settings.baseUrl, 'jitsi', // API Namespace\n    endPoint);\n    let response;\n    try {\n        response = await ServerConnection.makeRequest(requestUrl, init, settings);\n    }\n    catch (error) {\n        throw new ServerConnection.NetworkError(error);\n    }\n    let data = await response.text();\n    if (data.length > 0) {\n        try {\n            data = JSON.parse(data);\n        }\n        catch (error) {\n            console.log('Not a JSON response body.', response);\n        }\n    }\n    if (!response.ok) {\n        throw new ServerConnection.ResponseError(response, data.message || data);\n    }\n    return data;\n}\n","import { ICommandPalette } from '@jupyterlab/apputils';\nimport { LabIcon } from '@jupyterlab/ui-components';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { ILauncher } from '@jupyterlab/launcher';\nimport { requestAPI } from './handler';\nimport { IFrame } from '@jupyterlab/apputils';\nimport { PageConfig } from '@jupyterlab/coreutils';\nimport iconSvgStr from '../style/icon.svg';\nexport const camIcon = new LabIcon({\n    name: 'jupyterlab-jitsi:icon',\n    svgstr: iconSvgStr\n});\nconst SETTINGS_ID = 'jupyterlab-jitsi:plugin';\n// interface IJitsiOptions {\n// }\nclass JitsiWidget extends IFrame {\n    constructor(options, room_index) {\n        super();\n        const queryElems = [];\n        for (const k in options) {\n            if (k === 'options') {\n                const opts = options.options;\n                const jopts = JSON.stringify(opts);\n                queryElems.push(encodeURIComponent(k) + '=' + encodeURIComponent(jopts));\n            }\n            else {\n                queryElems.push(encodeURIComponent(k) + '=' + encodeURIComponent(options[k]));\n            }\n        }\n        this.query = queryElems.join('&');\n        const baseUrl = PageConfig.getBaseUrl();\n        this.url = baseUrl + `jitsi/app/index.html?${this.query}`;\n        console.log('Full URL: ', this.url);\n        let label;\n        if ('roomAlias' in options['options']) {\n            label = options['options']['roomAlias'];\n        }\n        else {\n            label = `Room #${room_index + 1} ${options['options']['roomName']}`;\n        }\n        this.id = 'Jitsi';\n        this.title.label = label;\n        this.title.icon = camIcon;\n        this.title.closable = true;\n        this.node.style.overflowY = 'auto';\n        this.node.style.background = '#FFF';\n        this.sandbox = [\n            'allow-forms',\n            'allow-modals',\n            'allow-orientation-lock',\n            'allow-pointer-lock',\n            'allow-popups',\n            'allow-presentation',\n            'allow-same-origin',\n            'allow-scripts',\n            'allow-top-navigation',\n            'allow-top-navigation-by-user-activation'\n        ];\n    }\n    dispose() {\n        super.dispose();\n    }\n    onCloseRequest() {\n        this.dispose();\n    }\n}\n/**\n * Initialization data for the jupyterlab-jitsi extension.\n */\nconst extension = {\n    id: 'jupyterlab-jitsi:plugin',\n    autoStart: true,\n    requires: [ICommandPalette, ISettingRegistry],\n    optional: [ILauncher],\n    activate: (app, palette, settings, launcher) => {\n        let _settings;\n        const command = 'jitsi:open';\n        let registeredCommands = [];\n        const _loadSettings = () => {\n            const enpoints = _settings.get('configured_rooms').composite;\n            console.log(enpoints);\n            // const enpoints = [{\"name\": \"test\"}];\n            let i = 0;\n            for (const c of registeredCommands) {\n                c.dispose();\n            }\n            registeredCommands = [];\n            enpoints.forEach((epconf, room_index) => {\n                // const full_cmd = command + `:${i}`\n                const full_cmd = command + `:${i}`;\n                const options = epconf['options'];\n                const widget = new JitsiWidget(epconf, room_index);\n                let label;\n                if ('roomAlias' in options) {\n                    label = options['roomAlias'];\n                }\n                else {\n                    label = `Room #${room_index + 1} ${options['roomName']}`;\n                }\n                const rcmd = app.commands.addCommand(full_cmd, {\n                    label: label,\n                    execute: () => {\n                        if (!widget.isAttached) {\n                            // Attach the widget to the main work area if it's not there\n                            app.shell.add(widget, 'main');\n                        }\n                        // Activate the widget\n                        app.shell.activateById(widget.id);\n                    },\n                    icon: camIcon\n                });\n                registeredCommands.push(rcmd);\n                // Add a launcher item if the launcher is available.\n                if (launcher) {\n                    const lcmd = launcher.add({\n                        command: full_cmd,\n                        rank: 1 + room_index,\n                        category: 'Robotics'\n                    });\n                    registeredCommands.push(lcmd);\n                }\n                const pcmd = palette.addItem({\n                    command: full_cmd,\n                    category: 'Robotics'\n                });\n                registeredCommands.push(pcmd);\n                i += 1;\n            });\n        };\n        settings.load(SETTINGS_ID).then(setting => {\n            console.log(setting);\n            _settings = setting;\n            const extensions = setting.get('configured_endpoints').composite;\n            console.log(extensions);\n            _loadSettings();\n            setting.changed.connect(_loadSettings);\n        });\n        requestAPI('get_example')\n            .then(data => {\n            console.log(data);\n        })\n            .catch(reason => {\n            console.error(`The jupyterlab-jitsi server extension appears to be missing.\\n${reason}`);\n        });\n    }\n};\nexport default extension;\n","export default \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" height=\\\"48px\\\" viewBox=\\\"0 0 24 24\\\" width=\\\"48px\\\" fill=\\\"#000000\\\"><path d=\\\"M0 0h24v24H0V0z\\\" fill=\\\"none\\\"/><path class=\\\"jp-icon3 jp-icon-selectable\\\" fill=\\\"#616161\\\" d=\\\"M17 10.5V7c0-.55-.45-1-1-1H4c-.55 0-1 .45-1 1v10c0 .55.45 1 1 1h12c.55 0 1-.45 1-1v-3.5l4 4v-11l-4 4zM15 16H5V8h10v8zm-6-1h2v-2h2v-2h-2V9H9v2H7v2h2z\\\"/></svg>\";"],"sourceRoot":""}
{"version":3,"sources":["webpack://jupyterlab-jitsi/./lib/handler.js","webpack://jupyterlab-jitsi/./lib/index.js","webpack://jupyterlab-jitsi/./style/icon.svg"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAA+C;AACS;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACO,kDAAkD;AACzD;AACA,qBAAqB,+EAA6B;AAClD,uBAAuB,8DAAW;AAClC;AACA;AACA;AACA,yBAAyB,8EAA4B;AACrD;AACA;AACA,kBAAkB,+EAA6B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,gFAA8B;AAChD;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClCuD;AACH;AACW;AACd;AACV;AACO;AACK;AACR;AACpC,oBAAoB,8DAAO;AAClC;AACA,YAAY,oDAAU;AACtB,CAAC;AACD;AACA;AACA;AACA,0BAA0B,wDAAM;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,wEAAqB;AAC7C,qDAAqD,WAAW;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iEAAe,EAAE,yEAAgB;AAChD,eAAe,2DAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,eAAe;AACjD;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,EAAE;AACpD,+CAA+C,EAAE;AACjD;AACA;AACA,6CAA6C,EAAE,IAAI,mDAAmD;AACtG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,QAAQ,oDAAU;AAClB;AACA;AACA,SAAS;AACT;AACA,2FAA2F,OAAO;AAClG,SAAS;AACT;AACA;AACA,iEAAe,SAAS,EAAC;;;;;;;;;;;;;;;;AClIzB,iEAAe,wXAAwX,i1CAAi1C,E","file":"lib_index_js.235768b0934eb78c6748.js","sourcesContent":["import { URLExt } from '@jupyterlab/coreutils';\nimport { ServerConnection } from '@jupyterlab/services';\n/**\n * Call the API extension\n *\n * @param endPoint API REST end point for the extension\n * @param init Initial values for the request\n * @returns The response body interpreted as JSON\n */\nexport async function requestAPI(endPoint = '', init = {}) {\n    // Make request to Jupyter API\n    const settings = ServerConnection.makeSettings();\n    const requestUrl = URLExt.join(settings.baseUrl, 'jitsi', // API Namespace\n    endPoint);\n    let response;\n    try {\n        response = await ServerConnection.makeRequest(requestUrl, init, settings);\n    }\n    catch (error) {\n        throw new ServerConnection.NetworkError(error);\n    }\n    let data = await response.text();\n    if (data.length > 0) {\n        try {\n            data = JSON.parse(data);\n        }\n        catch (error) {\n            console.log('Not a JSON response body.', response);\n        }\n    }\n    if (!response.ok) {\n        throw new ServerConnection.ResponseError(response, data.message || data);\n    }\n    return data;\n}\n","import { ICommandPalette } from '@jupyterlab/apputils';\nimport { LabIcon } from '@jupyterlab/ui-components';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { ILauncher } from '@jupyterlab/launcher';\nimport { requestAPI } from './handler';\nimport { IFrame } from '@jupyterlab/apputils';\nimport { PageConfig } from '@jupyterlab/coreutils';\nimport iconSvgStr from '../style/icon.svg';\nexport const fooIcon = new LabIcon({\n    name: 'jupyterlab-jitsi:icon',\n    svgstr: iconSvgStr\n});\nconst SETTINGS_ID = 'jupyterlab-jitsi:plugin';\n// interface IJitsiOptions {\n// }\nclass JitsiWidget extends IFrame {\n    constructor(options) {\n        super();\n        const queryElems = [];\n        for (const k in options) {\n            if (k === 'options') {\n                const opts = options.options;\n                const jopts = JSON.stringify(opts);\n                queryElems.push(encodeURIComponent(k) + '=' + encodeURIComponent(jopts));\n            }\n            else {\n                queryElems.push(encodeURIComponent(k) + '=' + encodeURIComponent(options[k]));\n            }\n        }\n        this.query = queryElems.join('&');\n        const baseUrl = PageConfig.getBaseUrl();\n        this.url = baseUrl + `jitsi/app/index.html?${this.query}`;\n        console.log('Full URL: ', this.url);\n        this.id = 'Jitsi';\n        this.title.label = 'Jitsi';\n        this.title.closable = true;\n        this.node.style.overflowY = 'auto';\n        this.node.style.background = '#FFF';\n        this.sandbox = [\n            'allow-forms',\n            'allow-modals',\n            'allow-orientation-lock',\n            'allow-pointer-lock',\n            'allow-popups',\n            'allow-presentation',\n            'allow-same-origin',\n            'allow-scripts',\n            'allow-top-navigation',\n            'allow-top-navigation-by-user-activation'\n        ];\n    }\n    dispose() {\n        super.dispose();\n    }\n    onCloseRequest() {\n        this.dispose();\n    }\n}\n/**\n * Initialization data for the jupyterlab-jitsi extension.\n */\nconst extension = {\n    id: 'jupyterlab-jitsi:plugin',\n    autoStart: true,\n    requires: [ICommandPalette, ISettingRegistry],\n    optional: [ILauncher],\n    activate: (app, palette, settings, launcher) => {\n        let _settings;\n        const command = 'jitsi:open';\n        let registeredCommands = [];\n        const _loadSettings = () => {\n            const enpoints = _settings.get('configured_rooms').composite;\n            console.log(enpoints);\n            // const enpoints = [{\"name\": \"test\"}];\n            let i = 0;\n            for (const c of registeredCommands) {\n                c.dispose();\n            }\n            registeredCommands = [];\n            for (const epconf of enpoints) {\n                // const full_cmd = command + `:${i}`\n                const full_cmd = command + `:${i}`;\n                const widget = new JitsiWidget(epconf);\n                const rcmd = app.commands.addCommand(full_cmd, {\n                    label: `Connect to VNC ${i}: ${'name' in epconf ? epconf['name'] : epconf['host']}`,\n                    execute: () => {\n                        if (!widget.isAttached) {\n                            // Attach the widget to the main work area if it's not there\n                            app.shell.add(widget, 'main');\n                        }\n                        // Activate the widget\n                        app.shell.activateById(widget.id);\n                    },\n                    icon: fooIcon\n                });\n                registeredCommands.push(rcmd);\n                // Add a launcher item if the launcher is available.\n                if (launcher) {\n                    const lcmd = launcher.add({\n                        command: full_cmd,\n                        rank: 1,\n                        category: 'Robotics'\n                    });\n                    registeredCommands.push(lcmd);\n                }\n                const pcmd = palette.addItem({\n                    command: full_cmd,\n                    category: 'Robotics'\n                });\n                registeredCommands.push(pcmd);\n                i += 1;\n            }\n        };\n        settings.load(SETTINGS_ID).then(setting => {\n            console.log(setting);\n            _settings = setting;\n            const extensions = setting.get('configured_endpoints').composite;\n            console.log(extensions);\n            _loadSettings();\n            setting.changed.connect(_loadSettings);\n        });\n        requestAPI('get_example')\n            .then(data => {\n            console.log(data);\n        })\n            .catch(reason => {\n            console.error(`The jupyterlab-jitsi server extension appears to be missing.\\n${reason}`);\n        });\n    }\n};\nexport default extension;\n","export default \"<?xml version=\\\"1.0\\\" encoding=\\\"iso-8859-1\\\"?>\\r\\n<!-- Generator: Adobe Illustrator 19.0.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\\r\\n<svg version=\\\"1.1\\\" id=\\\"Layer_1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" x=\\\"0px\\\" y=\\\"0px\\\"\\r\\n\\t viewBox=\\\"0 0 329.998 329.998\\\" style=\\\"enable-background:new 0 0 329.998 329.998;\\\" xml:space=\\\"preserve\\\">\\r\\n<g id=\\\"XMLID_873_\\\">\\r\\n\\t<g id=\\\"XMLID_874_\\\">\\r\\n\\t\\t<path id=\\\"XMLID_875_\\\" d=\\\"M320.605,310c-16.068-45.459-50.888-80.607-93.903-97.994C258.722,191.566,280,155.723,280,115\\r\\n\\t\\t\\tC280,51.589,228.411,0,165,0c-63.412,0-115,51.589-115,115c0,40.723,21.278,76.567,53.298,97.005\\r\\n\\t\\t\\tc-43.016,17.387-77.836,52.535-93.904,97.994c-1.623,4.591-0.916,9.684,1.896,13.66c2.811,3.976,7.378,6.339,12.247,6.339h282.927\\r\\n\\t\\t\\tc4.869,0,9.436-2.364,12.247-6.339C321.521,319.683,322.228,314.59,320.605,310z M79.999,115c0-46.869,38.131-85,85-85\\r\\n\\t\\t\\tc46.869,0,85,38.131,85,85c0,46.869-38.131,85-85,85C118.13,200,79.999,161.869,79.999,115z M46.638,299.998\\r\\n\\t\\t\\tC70.067,257.398,115.275,230,165,230c49.726,0,94.932,27.398,118.36,69.998H46.638z\\\"/>\\r\\n\\t</g>\\r\\n\\t<g id=\\\"XMLID_879_\\\">\\r\\n\\t\\t<path id=\\\"XMLID_880_\\\" d=\\\"M165,60c-30.327,0-55,24.673-55,55c0,30.327,24.673,55,55,55c30.327,0,55-24.673,55-55\\r\\n\\t\\t\\tC220,84.673,195.327,60,165,60z M165,140c-13.785,0-25-11.215-25-25c0-13.785,11.215-25,25-25c13.785,0,25,11.215,25,25\\r\\n\\t\\t\\tC190,128.785,178.785,140,165,140z\\\"/>\\r\\n\\t</g>\\r\\n</g>\\r\\n<g>\\r\\n</g>\\r\\n<g>\\r\\n</g>\\r\\n<g>\\r\\n</g>\\r\\n<g>\\r\\n</g>\\r\\n<g>\\r\\n</g>\\r\\n<g>\\r\\n</g>\\r\\n<g>\\r\\n</g>\\r\\n<g>\\r\\n</g>\\r\\n<g>\\r\\n</g>\\r\\n<g>\\r\\n</g>\\r\\n<g>\\r\\n</g>\\r\\n<g>\\r\\n</g>\\r\\n<g>\\r\\n</g>\\r\\n<g>\\r\\n</g>\\r\\n<g>\\r\\n</g>\\r\\n</svg>\\r\\n\";"],"sourceRoot":""}